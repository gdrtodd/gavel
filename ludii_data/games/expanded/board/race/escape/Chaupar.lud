(game "Chaupar" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "61,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N7,End" P1 directed:True) (track "Track2" "21,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 directed:True) (track "Track3" "88,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 directed:True) (track "Track4" "32,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 directed:True)}) (dice d:4 faces:{1 2 5 6} num:3) (map "Start" {(pair P1 61) (pair P2 21) (pair P3 88) (pair P4 32)}) (piece "Pawn" Each (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (sites {61 58 59 56})) (place Stack "Pawn2" (sites {21 20 0 1})) (place Stack "Pawn3" (sites {91 88 93 90})) (place Stack "Pawn4" (sites {33 32 49 50}))}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (no Pieces Mover) (if (is Mover P1) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track3" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P3) (if (is Mover P3) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track1" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P1) (if (is Mover P4) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track2" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P2) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track4" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P4)))) (forEach Piece)))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 