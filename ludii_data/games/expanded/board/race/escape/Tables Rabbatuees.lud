(game "Tables Rabbatuees" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5} P1 directed:True) (track "Track2" {12 13 14 15 16 17} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move (from (from)) (to (handSite Mover))) (move (from) (to (trackSite Move steps:(pips))))))) (hand Each) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2}) count:2) (place Stack "Disc1" (sites {3 4 5}) count:3) (place Stack "Disc2" (sites {12 13 14}) count:2) (place Stack "Disc2" (sites {15 16 17}) count:3)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(if (or (< 0 (var "Double")) (all DiceEqual)) (do (if (>= 0 (var "Double")) (set Var "Double" (count Pips))) next:(forEach Site (sites Occupied by:Mover) (if (= (state at:(site)) 0) (move Select (from (site)) (then (if (= 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 2))))) (if (= (state at:(site)) 1) (move Select (from (site)) (then (forEach Level (last To) (set State at:(last To) level:(level) 2)))))) (then (and (if (< 1 (var "Double")) (moveAgain)) (set Var "Double" (- (var "Double") 1)))))) (forEach Die if:(!= (pips) 0) (or (if (= (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 0) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) (then (and (if (= 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 2))) (if (not (all DiceUsed)) (moveAgain)))))) (if (= (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) (then (and (forEach Level (last To) (set State at:(last To) level:(level) 2)) (if (not (all DiceUsed)) (moveAgain))))))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (or (= (state at:(site)) 0) (= (state at:(site)) 1)))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll)) next:(if (or (< 0 (var "Double")) (all DiceEqual)) (do (if (>= 0 (var "Double")) (set Var "Double" (count Pips))) next:(forEach Site (sites Occupied by:Mover) (move (from (site)) (to (handSite Mover))) (then (and (if (< 1 (var "Double")) (moveAgain)) (set Var "Double" (- (var "Double") 1)))))) (forEach Piece top:True)) (then (if (not (all DiceUsed)) (moveAgain))))) (nextPhase Mover (no Pieces Mover in:(sites Board)) "Placing")) (phase "Placing" (play (do (if (not (is Prev Mover)) (roll)) next:(if (is Occupied (handSite Mover)) (forEach Die if:(!= (pips) 0) (if (if (< (pips) 4) (< (size Stack at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 2) (< (size Stack at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 3)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))))) (then (and (if (not (all DiceUsed)) (moveAgain)) (if (!= 0 (state at:(last To))) (set State at:(last To) 0)))))))) (end (if (is Empty (handSite Mover)) (result Mover Win))))})) 