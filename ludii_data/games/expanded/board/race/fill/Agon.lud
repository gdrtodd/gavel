(game "Agon" (players 2) (equipment {(board (hex 6)) (piece "Pawn" Each (move Step (to if:(and {(is Empty (to)) (>= (count Steps Orthogonal (from) (centrePoint)) (count Steps Orthogonal (to) (centrePoint))) (!= (to) (centrePoint))})) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (set State at:(between) 1))) (to if:(is Friend (who at:(to)))))))) (piece "Queen" Each (move Step (to if:(and (is Empty (to)) (>= (count Steps Orthogonal (from) (centrePoint)) (count Steps Orthogonal (to) (centrePoint))))) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (set State at:(between) 1))) (to if:(is Friend (who at:(to))))))))}) (rules (start {(place "Pawn1" (sites {89 60 20 3 6 51})) (place "Pawn2" (sites {87 84 39 1 30 70})) (place "Queen1" 85) (place "Queen2" 5)}) (play (priority {(forEach Site (forEach (sites Occupied by:Mover component:"Queen") if:(!= 0 (state at:(site)))) (move (from (site)) (to (sites Board) if:(is Empty (to))) (then (set State at:(last To) 0)))) (forEach Site (forEach (sites Occupied by:Mover component:"Pawn") if:(!= 0 (state at:(site)))) (move (from (site)) (to (sites Outer) if:(is Empty (to))) (then (set State at:(last To) 0)))) (do (forEach Piece) ifAfterwards:(not (can Move (intervene (from (last To)) Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to))))))))})) (end (if (all Sites (difference (sites Around (sites Centre)) (sites Centre)) if:(= (what at:(site)) (id "Pawn" Mover))) {(if (= (what at:(centrePoint)) (id "Queen" Mover)) (result Mover Win)) (if (not (= (what at:(centrePoint)) (id "Queen" Mover))) (result Mover Loss))})))) 