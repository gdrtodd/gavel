(game "Camelot" (players 2) (equipment {(board (keep (rectangle 12 16) (poly {{0 7} {1 10} {4 13} {12 13} {15 10} {16 7} {16 5} {15 2} {13 0} {3 0} {1 2} {0 5}}))) (piece "Pawn" Each (or (if (not (is In (from) (sites Next))) (move Hop (from (from)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (and (moveAgain) (set Pending)))))) (move Step (to if:(if (is In (from) (sites Next)) (and (is Empty (to)) (is In (to) (sites Next))) (is In (to) (difference (sites Empty) (sites Mover)))))))) (piece "Knight" Each (or (if (not (is In (from) (sites Next))) (move Hop (from (from)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (and (moveAgain) (set Pending)))))) (move Step (to if:(if (is In (from) (sites Next)) (and (is Empty (to)) (is In (to) (sites Next))) (is In (to) (difference (sites Empty) (sites Mover)))))))) (regions P1 (sites {"A6" "A7"})) (regions P2 (sites {"P6" "P7"}))}) (rules (start {(place "Pawn1" {"F4" "F5" "F6" "F7" "F8" "F9" "G5" "G6" "G7" "G8"}) (place "Knight1" {"F3" "G4" "G9" "F10"}) (place "Pawn2" {"K4" "K5" "K6" "K7" "K8" "K9" "J5" "J6" "J7" "J8"}) (place "Knight2" {"K3" "J4" "J9" "K10"})}) (play (if (is Prev Mover) (if (is Pending) (if (= (what at:(last To)) (id "Knight" Mover)) (priority {(move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (moveAgain)))) (or (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (and (moveAgain) (set Pending))))) (move Pass))}) (or (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (and (moveAgain) (set Pending))))) (move Pass))) (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (moveAgain))))) (priority {(forEach Site (sites Mover) (if (= (who at:(site)) (mover)) (priority {(move Hop (from (site)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (moveAgain)))) (or (move Hop (from (site)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (move Hop (from (last To)) (between if:(is Friend (who at:(between)))) (to if:(and (is In (to) (difference (sites Empty) (sites Mover))) (not (is Visited (to)))))))) (and (moveAgain) (set Pending))))) (move Step (to if:(if (is In (from) (sites Next)) (and (is Empty (to)) (is In (to) (sites Next))) (is In (to) (difference (sites Empty) (sites Mover)))))))}))) (forEach Piece (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(if (is In (from) (sites Next)) (and (is Empty (to)) (is In (to) (sites Next))) (is In (to) (difference (sites Empty) (sites Mover))))) (then (if (and (not (is In (last To) (sites Next))) (can Move (hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (moveAgain))))) (forEach Piece)}))) (end {(if (= (sites P2) (sites Occupied by:P1)) (result P1 Win)) (if (= (sites P1) (sites Occupied by:P2)) (result P2 Win)) (if (and (>= (count Pieces Mover) 2) (= (count Pieces Next) 0)) (result Mover Win)) (if (and (< (count Pieces Mover) 2) (< (count Pieces Next) 2)) (result Mover Draw))}))) 