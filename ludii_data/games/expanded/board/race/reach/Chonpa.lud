(game "Chonpa" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "TrackNormal1" "64,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N8" P1 directed:True) (track "TrackPaired1" "57,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N8" P1 directed:True) (track "TrackNormal2" "22,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "TrackPaired2" "36,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "TrackNormal3" "85,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "TrackPaired3" "92,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "TrackNormal4" "31,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True) (track "TrackPaired4" "17,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True)}) (dice d:4 faces:{1 2 5 6} num:3) (piece "Pawn" Each (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal" steps:(pips)) (trackSite Move from:(from) "TrackPaired" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (sites {61 64})) (place Stack "Pawn2" (sites {21 22})) (place Stack "Pawn3" (sites {85 88})) (place Stack "Pawn4" (sites {31 32})) (place Stack "Pawn1" (sites {54 57}) state:1) (place Stack "Pawn2" (sites {35 36}) state:1) (place Stack "Pawn3" (sites {95 92}) state:1) (place Stack "Pawn4" (sites {17 18}) state:1)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (can Move (if (and (= 1 (count Sites in:(sites Occupied by:Mover top:False))) (is In (centrePoint) (sites Occupied by:Mover top:False))) (if (is Mover P1) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal3" steps:(pips)) (trackSite Move from:(from) "TrackPaired3" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired3" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P3) (if (is Mover P3) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal1" steps:(pips)) (trackSite Move from:(from) "TrackPaired1" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired1" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P1) (if (is Mover P4) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal2" steps:(pips)) (trackSite Move from:(from) "TrackPaired2" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired2" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P2) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal4" steps:(pips)) (trackSite Move from:(from) "TrackPaired4" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired4" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P4)))) (forEach Piece))) (if (and (= 1 (count Sites in:(sites Occupied by:Mover top:False))) (is In (centrePoint) (sites Occupied by:Mover top:False))) (if (is Mover P1) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal3" steps:(pips)) (trackSite Move from:(from) "TrackPaired3" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired3" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P3) (if (is Mover P3) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal1" steps:(pips)) (trackSite Move from:(from) "TrackPaired1" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired1" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P1) (if (is Mover P4) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal2" steps:(pips)) (trackSite Move from:(from) "TrackPaired2" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired2" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P2) (forEach Piece (forEach Die if:(!= (pips) 0) (move (from (from) level:(level) if:(!= 0 (what at:(from) level:(level)))) (to (if (= 0 (state at:(from) level:(level))) (trackSite Move from:(from) "TrackNormal4" steps:(pips)) (trackSite Move from:(from) "TrackPaired4" steps:(pips))) if:(if (= 0 (state at:(from) level:(level))) (if (not (= 1 (var "MovePair"))) True (or (all DiceEqual) (= (pips) (if (= (face 97) (face 98)) (face 99) (if (= (face 98) (face 99)) (face 97) (face 98)))))) (and {(not (= 1 (var "MovePair"))) (or {(= (face 97) (face 98)) (= (face 97) (face 99)) (= (face 98) (face 99))}) (= (pips) (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99)))) (< (count MovesThisTurn) 2) (if (= (count MovesThisTurn) 0) True (or (all DiceEqual) (!= (var "Pips") (if (= (face 97) (face 98)) (face 97) (if (= (face 98) (face 99)) (face 98) (face 99))))))})) (apply (and (if (= 1 (state at:(from))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (and {(= 1 (state at:(site) level:(level))) (!= (from) (site)) (= (mover) (who at:(site) level:(level)))}) (fromTo (from (site) level:(level)) (to (trackSite Move from:(site) "TrackPaired4" steps:(pips)))))))) (set Var "Pips" (pips))))) (then (if (and (not (= 1 (var "MovePair"))) (if (= 1 (state at:(last To) level:(last LevelTo))) (< (count MovesThisTurn) 1) (< (count MovesThisTurn) 2))) (and (moveAgain) (if (= 1 (state at:(last To) level:(last LevelTo))) (set Var "MovePair" 1))) (and (set Var "MovePair" 0) (set Var "Pips" 0)))))) P4)))) (forEach Piece)) (move Pass (then (and (set Var "MovePair" 0) (set Var "Pips" 0))))))) (end (if (and (= 1 (count Sites in:(sites Occupied by:TeamMover top:False))) (is In (centrePoint) (sites Occupied by:TeamMover top:False))) (result TeamMover Win))))) 