(game "Li'b el-Merafib" (players 4) (equipment {(board (merge {(shift 4 4 (rectangle 2 1)) (shift 4 4 (rectangle 1 4)) (shift 7 4 (rectangle 4 1)) (shift 2 7 (rectangle 1 6)) (shift 2 2 (rectangle 6 1)) (shift 2 2 (rectangle 1 8)) (shift 9 2 (rectangle 8 1)) (shift 0 9 (rectangle 1 10)) (rectangle 10 1) (rectangle 1 12) (shift 11 0 (rectangle 12 1)) (shift 0 11 (rectangle 1 12))}) {(track "Track" "73,E,S,W,N,E,S,W,N,E,S,W,N" directed:True) (track "ReverseTrack" "0,E,N,W,S,E,N,W,S,E,N,W" directed:True)}) (dice d:2 from:0 num:3) (piece "Stick" Each (if (= (from) 2) (if (= 4 (state at:(from) level:(level))) (move (from (from) level:(level)) (to 0)) (if (= (mapEntry "Throw" (count Pips)) 1) (move Select (from (from) level:(level)) (then (set State at:(last To) level:(last LevelTo) (+ 1 (state at:(last To) level:(last LevelTo)))))) (if (is In 1 (if (is Mover P1) (values Remembered "TabulatedP1") (if (is Mover P2) (values Remembered "TabulatedP2") (if (is Mover P3) (values Remembered "TabulatedP3") (if (is Mover P4) (values Remembered "TabulatedP4") (if (is Mover P5) (values Remembered "TabulatedP5") (if (is Mover P6) (values Remembered "TabulatedP6") (if (is Mover P7) (values Remembered "TabulatedP7") (values Remembered "TabulatedP8"))))))))) (move Select (from (from) level:(level)) (then (and (set State at:(last To) level:(last LevelTo) (+ 1 (state at:(last To) level:(last LevelTo)))) (if (is Mover P1) (forget Value "TabulatedP1" 1) (if (is Mover P2) (forget Value "TabulatedP2" 1) (if (is Mover P3) (forget Value "TabulatedP3" 1) (if (is Mover P4) (forget Value "TabulatedP4" 1) (if (is Mover P5) (forget Value "TabulatedP5" 1) (if (is Mover P6) (forget Value "TabulatedP6" 1) (if (is Mover P7) (forget Value "TabulatedP7" 1) (forget Value "TabulatedP8" 1)))))))))))))) (if (and {(= 0 (state at:(from) level:(level))) (= (from) 0) (is In 1 (if (is Mover P1) (values Remembered "TabulatedP1") (if (is Mover P2) (values Remembered "TabulatedP2") (if (is Mover P3) (values Remembered "TabulatedP3") (if (is Mover P4) (values Remembered "TabulatedP4") (if (is Mover P5) (values Remembered "TabulatedP5") (if (is Mover P6) (values Remembered "TabulatedP6") (if (is Mover P7) (values Remembered "TabulatedP7") (values Remembered "TabulatedP8")))))))))}) (move (from (from) level:(level)) (to 2) (then (if (is Mover P1) (forget Value "TabulatedP1" 1) (if (is Mover P2) (forget Value "TabulatedP2" 1) (if (is Mover P3) (forget Value "TabulatedP3" 1) (if (is Mover P4) (forget Value "TabulatedP4" 1) (if (is Mover P5) (forget Value "TabulatedP5" 1) (if (is Mover P6) (forget Value "TabulatedP6" 1) (if (is Mover P7) (forget Value "TabulatedP7" 1) (forget Value "TabulatedP8" 1)))))))))) (if (= (from) 73) (move (from (from) level:(level) if:(= (mapEntry "Throw" (count Pips)) 1)) (to (trackSite Move from:(from) "Track" steps:(mapEntry "Throw" (count Pips))))) (if (= 0 (state at:(from) level:(level))) (if (not (= (mapEntry "Throw" (count Pips)) 1)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(mapEntry "Throw" (count Pips))))) (move Pass (then (if (is Mover P1) (remember Value "TabulatedP1" (mapEntry "Throw" (count Pips))) (if (is Mover P2) (remember Value "TabulatedP2" (mapEntry "Throw" (count Pips))) (if (is Mover P3) (remember Value "TabulatedP3" (mapEntry "Throw" (count Pips))) (if (is Mover P4) (remember Value "TabulatedP4" (mapEntry "Throw" (count Pips))) (if (is Mover P5) (remember Value "TabulatedP5" (mapEntry "Throw" (count Pips))) (if (is Mover P6) (remember Value "TabulatedP6" (mapEntry "Throw" (count Pips))) (if (is Mover P7) (remember Value "TabulatedP7" (mapEntry "Throw" (count Pips))) (remember Value "TabulatedP8" (mapEntry "Throw" (count Pips))))))))))))) (or (move (from (from) level:(level)) (to (trackSite Move from:(from) "ReverseTrack" steps:(mapEntry "Throw" (count Pips)))) (then (if (= (last To) 73) (if (= (where "Hyena" Neutral) -1) (add (piece (id "Hyena" Neutral)) (to (last To))))))) (if (= (mapEntry "Throw" (count Pips)) 1) (move Pass (then (if (is Mover P1) (remember Value "TabulatedP1" (mapEntry "Throw" (count Pips))) (if (is Mover P2) (remember Value "TabulatedP2" (mapEntry "Throw" (count Pips))) (if (is Mover P3) (remember Value "TabulatedP3" (mapEntry "Throw" (count Pips))) (if (is Mover P4) (remember Value "TabulatedP4" (mapEntry "Throw" (count Pips))) (if (is Mover P5) (remember Value "TabulatedP5" (mapEntry "Throw" (count Pips))) (if (is Mover P6) (remember Value "TabulatedP6" (mapEntry "Throw" (count Pips))) (if (is Mover P7) (remember Value "TabulatedP7" (mapEntry "Throw" (count Pips))) (remember Value "TabulatedP8" (mapEntry "Throw" (count Pips))))))))))))))))))) (piece "Hyena" Neutral maxState:10) (map "Throw" {(pair 0 6) (pair 1 1) (pair 2 2) (pair 3 4)})}) (rules (start {(place Stack items:{"Stick4" "Stick3" "Stick2" "Stick1"} 73)}) (play (do (roll) next:(if (and (= 73 (where "Stick" Mover)) (!= 0 (state at:(where "Stick" Mover) level:(where Level "Stick" Mover at:(where "Stick" Mover))))) (if (= (where "Hyena" Neutral) 2) (if (= 9 (state at:(where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral)))) (move (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (to 0)) (if (= (mapEntry "Throw" (count Pips)) 1) (move Select (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (then (set State at:(last To) level:(last LevelTo) (+ 1 (state at:(last To) level:(last LevelTo)))))) (if (is In 1 (if (is Mover P1) (values Remembered "TabulatedP1") (if (is Mover P2) (values Remembered "TabulatedP2") (if (is Mover P3) (values Remembered "TabulatedP3") (if (is Mover P4) (values Remembered "TabulatedP4") (if (is Mover P5) (values Remembered "TabulatedP5") (if (is Mover P6) (values Remembered "TabulatedP6") (if (is Mover P7) (values Remembered "TabulatedP7") (values Remembered "TabulatedP8"))))))))) (move Select (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (then (and (set State at:(last To) level:(last LevelTo) (+ 1 (state at:(last To) level:(last LevelTo)))) (if (is Mover P1) (forget Value "TabulatedP1" 1) (if (is Mover P2) (forget Value "TabulatedP2" 1) (if (is Mover P3) (forget Value "TabulatedP3" 1) (if (is Mover P4) (forget Value "TabulatedP4" 1) (if (is Mover P5) (forget Value "TabulatedP5" 1) (if (is Mover P6) (forget Value "TabulatedP6" 1) (if (is Mover P7) (forget Value "TabulatedP7" 1) (forget Value "TabulatedP8" 1)))))))))))))) (if (= 0 (state at:(where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral)))) (or {(if (= (mapEntry "Throw" (count Pips)) 1) (move Pass (then (if (is Mover P1) (remember Value "TabulatedP1" (mapEntry "Throw" (count Pips))) (if (is Mover P2) (remember Value "TabulatedP2" (mapEntry "Throw" (count Pips))) (if (is Mover P3) (remember Value "TabulatedP3" (mapEntry "Throw" (count Pips))) (if (is Mover P4) (remember Value "TabulatedP4" (mapEntry "Throw" (count Pips))) (if (is Mover P5) (remember Value "TabulatedP5" (mapEntry "Throw" (count Pips))) (if (is Mover P6) (remember Value "TabulatedP6" (mapEntry "Throw" (count Pips))) (if (is Mover P7) (remember Value "TabulatedP7" (mapEntry "Throw" (count Pips))) (remember Value "TabulatedP8" (mapEntry "Throw" (count Pips))))))))))))) (move (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (to (trackSite Move from:(where "Hyena" Neutral) "Track" steps:(* 2 (mapEntry "Throw" (count Pips)))))) (if (is In 1 (if (is Mover P1) (values Remembered "TabulatedP1") (if (is Mover P2) (values Remembered "TabulatedP2") (if (is Mover P3) (values Remembered "TabulatedP3") (if (is Mover P4) (values Remembered "TabulatedP4") (if (is Mover P5) (values Remembered "TabulatedP5") (if (is Mover P6) (values Remembered "TabulatedP6") (if (is Mover P7) (values Remembered "TabulatedP7") (values Remembered "TabulatedP8"))))))))) (move (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (to (trackSite Move from:(where "Hyena" Neutral) "Track" steps:1)) (then (if (is Mover P1) (forget Value "TabulatedP1" 1) (if (is Mover P2) (forget Value "TabulatedP2" 1) (if (is Mover P3) (forget Value "TabulatedP3" 1) (if (is Mover P4) (forget Value "TabulatedP4" 1) (if (is Mover P5) (forget Value "TabulatedP5" 1) (if (is Mover P6) (forget Value "TabulatedP6" 1) (if (is Mover P7) (forget Value "TabulatedP7" 1) (forget Value "TabulatedP8" 1)))))))))))}) (or (move (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (to (trackSite Move from:(where "Hyena" Neutral) "ReverseTrack" steps:(* 2 (mapEntry "Throw" (count Pips))))) (then (forEach Site (sites Track "ReverseTrack" from:(last From) to:(trackSite Move from:(last From) "ReverseTrack" steps:(- (* 2 (mapEntry "Throw" (count Pips))) 1))) (forEach Level (site) FromTop (remove (site) level:(level)))))) (if (is In 1 (if (is Mover P1) (values Remembered "TabulatedP1") (if (is Mover P2) (values Remembered "TabulatedP2") (if (is Mover P3) (values Remembered "TabulatedP3") (if (is Mover P4) (values Remembered "TabulatedP4") (if (is Mover P5) (values Remembered "TabulatedP5") (if (is Mover P6) (values Remembered "TabulatedP6") (if (is Mover P7) (values Remembered "TabulatedP7") (values Remembered "TabulatedP8"))))))))) (move (from (where "Hyena" Neutral) level:(where Level "Hyena" Neutral at:(where "Hyena" Neutral))) (to (trackSite Move from:(where "Hyena" Neutral) "ReverseTrack" steps:1)) (then (and (if (is Mover P1) (forget Value "TabulatedP1" 1) (if (is Mover P2) (forget Value "TabulatedP2" 1) (if (is Mover P3) (forget Value "TabulatedP3" 1) (if (is Mover P4) (forget Value "TabulatedP4" 1) (if (is Mover P5) (forget Value "TabulatedP5" 1) (if (is Mover P6) (forget Value "TabulatedP6" 1) (if (is Mover P7) (forget Value "TabulatedP7" 1) (forget Value "TabulatedP8" 1)))))))) (forEach Level (last From) FromTop (remove (last From) level:(level)))))))))) (forEach Piece)) (then (if (not (= (mapEntry "Throw" (count Pips)) 2)) (moveAgain))))) (end {(forEach Player if:(= 0 (count Sites in:(sites Occupied by:Player top:False))) (result Player Loss)) (forEach Player if:(and {(if (!= 73 (where "Hyena" Neutral)) (= 1 (size Stack at:(where "Hyena" Neutral))) True) (!= (where "Hyena" Neutral) -1) (all Sites (sites Occupied by:All top:False) if:(is In (site) (union (sites Hand Shared) (sites {73 (where "Hyena" Neutral)}))))}) (result Player Win))}))) 