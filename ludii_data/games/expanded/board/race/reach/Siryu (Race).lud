(game "Siryu (Race)" (players 4) (equipment {(board (merge {(rectangle 5 2) (shift 2 -3 (scale 1.2 1 (rectangle 8 1))) (shift 3.2 0 (rectangle 5 2)) (shift 1.6 -6 (scale 2 1 (rectangle 3 1)))}) {(track "FirstTrack" "13,S,E1,N,E1,S1" directed:True) (track "SecondTrack" "6,S1,E1,N,E1,S" directed:True)}) (dice d:2 from:0 num:6) (map "Throw" {(pair 0 6) (pair 1 1) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 1) (pair 6 6)}) (map "ExtraThrow" {(pair 0 1) (pair 1 1) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 1) (pair 6 3)}) (piece "Father" Each (if (!= 0 (mapEntry "Throw" (count Pips))) (or {(if (is In (from) (sites Track "FirstTrack")) (move (from (from) level:(level)) (to (trackSite Move "FirstTrack" steps:(mapEntry "Throw" (count Pips))))) (then (forEach Site (sites Track Mover "FirstTrack" from:(trackSite Move from:(last From) "FirstTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10))))))))) (if (is In (from) (sites Track "SecondTrack")) (move (from (from) level:(level)) (to (trackSite Move "SecondTrack" steps:(mapEntry "Throw" (count Pips)))) (then (forEach Site (sites Track Mover "SecondTrack" from:(trackSite Move from:(last From) "SecondTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10)))))))))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 12)) (move (from (from) level:(level)) (to 9))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 9)) (move (from (from) level:(level)) (to 6))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 23)) (move (from (from) level:(level)) (to 2))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 2)) (move (from (from) level:(level)) (to 17))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 17)) (move (from (from) level:(level)) (to 16))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (is In (from) (sites {16 29 30})) (< (state at:(from) level:(level)) 2)}) (move (from (from) level:(level)) (to (from) (apply (set State at:(to) level:(level) (+ 1 (state at:(to) level:(level)))))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 16) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 30 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 30) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 29 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 29) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 28 (apply (set State at:(from) level:(level) 0)))))}))) (piece "Angel" Each (if (!= 0 (* 2 (mapEntry "Throw" (count Pips)))) (or {(if (is In (from) (sites Track "FirstTrack")) (move (from (from) level:(level)) (to (trackSite Move "FirstTrack" steps:(* 2 (mapEntry "Throw" (count Pips)))))) (then (forEach Site (sites Track Mover "FirstTrack" from:(trackSite Move from:(last From) "FirstTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10))))))))) (if (is In (from) (sites Track "SecondTrack")) (move (from (from) level:(level)) (to (trackSite Move "SecondTrack" steps:(* 2 (mapEntry "Throw" (count Pips))))) (then (forEach Site (sites Track Mover "SecondTrack" from:(trackSite Move from:(last From) "SecondTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10)))))))))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 12)) (move (from (from) level:(level)) (to 9))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 9)) (move (from (from) level:(level)) (to 6))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 23)) (move (from (from) level:(level)) (to 2))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 2)) (move (from (from) level:(level)) (to 17))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 17)) (move (from (from) level:(level)) (to 16))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 24)) (move (from (from) level:(level)) (to 2))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (is In (from) (sites {16 29 30})) (< (state at:(from) level:(level)) 2)}) (move (from (from) level:(level)) (to (from) (apply (set State at:(to) level:(level) (+ 1 (state at:(to) level:(level)))))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 16) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 30 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 30) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 29 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 29) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 28 (apply (set State at:(from) level:(level) 0)))))}))) (piece "Mother" Each (if (!= 0 (mapEntry "Throw" (count Pips))) (or {(if (is In (from) (sites Track "FirstTrack")) (move (from (from) level:(level)) (to (trackSite Move "FirstTrack" steps:(mapEntry "Throw" (count Pips))))) (then (forEach Site (sites Track Mover "FirstTrack" from:(trackSite Move from:(last From) "FirstTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10))))))))) (if (is In (from) (sites Track "SecondTrack")) (move (from (from) level:(level)) (to (trackSite Move "SecondTrack" steps:(mapEntry "Throw" (count Pips)))) (then (forEach Site (sites Track Mover "SecondTrack" from:(trackSite Move from:(last From) "SecondTrack" steps:1) to:(last To)) (forEach Level (site) FromTop (if (is Enemy (who at:(site) level:(level))) (fromTo (from (site) level:(level)) (to (if (= (site) (where "Father" (who at:(site) level:(level)))) 13 (if (= (site) (where "Mother" (who at:(site) level:(level)))) 7 10)))))))))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 12)) (move (from (from) level:(level)) (to 9))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 9)) (move (from (from) level:(level)) (to 6))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 23)) (move (from (from) level:(level)) (to 2))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 2)) (move (from (from) level:(level)) (to 17))) (if (and (= (mapEntry "Throw" (count Pips)) 1) (= (from) 17)) (move (from (from) level:(level)) (to 16))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (is In (from) (sites {16 29 30})) (< (state at:(from) level:(level)) 2)}) (move (from (from) level:(level)) (to (from) (apply (set State at:(to) level:(level) (+ 1 (state at:(to) level:(level)))))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 16) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 30 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 30) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 29 (apply (set State at:(from) level:(level) 0))))) (if (and {(= (mapEntry "Throw" (count Pips)) 1) (= (from) 29) (= 2 (state at:(from) level:(level)))}) (move (from (from) level:(level)) (to 28 (apply (set State at:(from) level:(level) 0)))))})))}) (rules (start {(place Stack "Father1" 13) (place Stack "Angel1" 10) (place Stack "Mother1" 7) (place Stack "Father2" 13) (place Stack "Angel2" 10) (place Stack "Mother2" 7) (place Stack "Father3" 13) (place Stack "Angel3" 10) (place Stack "Mother3" 7) (place Stack "Father4" 13) (place Stack "Angel4" 10) (place Stack "Mother4" 7)}) (play (do (roll) next:(forEach Piece) (then (if (!= 0 (mapEntry "ExtraThrow" (count Pips))) (and (if (= 3 (mapEntry "ExtraThrow" (count Pips))) (if (<= (var) 0) (set Var 2) (set Var (+ 2 (var))))) (moveAgain)) (if (> (var) 0) (and (set Var (- (var) 1)) (moveAgain))))))) (end (if (and {(= 28 (where "Angel" Mover)) (= 28 (where "Father" Mover)) (= 28 (where "Mother" Mover))}) (result Mover Win))))) 