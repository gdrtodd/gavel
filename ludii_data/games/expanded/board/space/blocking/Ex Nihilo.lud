(game "Ex Nihilo" (players 2) (equipment {(board (hex 5)) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (start (place "Disc0" (sites Board))) (play (priority (do (if (= 1 (var)) (and (set Var 0) (or {(forEach Piece (move (from if:(is In (from) (sites (values Remembered)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint))) (apply (remove (to)))) count:(size Stack at:(from)) stack:True (then (and (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True) (add (piece "Disc0") (to (last From)))))) Next top:True) (forEach Piece (forEach Value min:1 max:(- (size Stack at:(from)) 1) (move (from if:(is In (from) (sites (values Remembered)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) (apply (remove (to)))) count:(value) stack:True (then (if (< (count Steps (last From) (centrePoint)) (count Steps (last To) (centrePoint))) (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True))))) Next top:True)})) (or {(forEach Piece (move (from) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint)))) copy:True (then (do (remove (last To) count:(size Stack at:(last To))) next:(add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True)))) Neutral top:True) (forEach Piece (or (move (from if:True) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint))) (apply (remove (to)))) count:(size Stack at:(from)) stack:True (then (and (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True) (add (piece "Disc0") (to (last From)))))) (forEach Value min:1 max:(- (size Stack at:(from)) 1) (move (from if:(< 1 (size Stack at:(from)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) (apply (remove (to)))) count:(value) stack:True (then (if (< (count Steps (last From) (centrePoint)) (count Steps (last To) (centrePoint))) (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True)))))) Mover top:True)})) ifAfterwards:(or {(and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (is Even (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) NNW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (is Even (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) W)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (is Even (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) SSW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (is Even (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) SSE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (is Even (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) E)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (is Even (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) NNE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE)))})})) (if (= 1 (var)) (do (set Var 0) next:(or {(forEach Piece (move (from if:(is In (from) (sites (values Remembered)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint))) (apply (remove (to)))) count:(size Stack at:(from)) stack:True (then (and (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True) (add (piece "Disc0") (to (last From)))))) Next top:True) (forEach Piece (forEach Value min:1 max:(- (size Stack at:(from)) 1) (move (from if:(is In (from) (sites (values Remembered)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) (apply (remove (to)))) count:(value) stack:True (then (if (< (count Steps (last From) (centrePoint)) (count Steps (last To) (centrePoint))) (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True))))) Next top:True)})) (or {(forEach Piece (move (from) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint)))) copy:True (then (do (remove (last To) count:(size Stack at:(last To))) next:(add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True)))) Neutral top:True) (forEach Piece (or (move (from if:True) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) if:(< (count Steps (from) (centrePoint)) (count Steps (to) (centrePoint))) (apply (remove (to)))) count:(size Stack at:(from)) stack:True (then (and (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True) (add (piece "Disc0") (to (last From)))))) (forEach Value min:1 max:(- (size Stack at:(from)) 1) (move (from if:(< 1 (size Stack at:(from)))) (to (sites Direction from:(from) stop:(< 0 (who at:(to)))) (apply (remove (to)))) count:(value) stack:True (then (if (< (count Steps (last From) (centrePoint)) (count Steps (last To) (centrePoint))) (add (to (last To)) count:(- (count Steps (last To) (centrePoint)) (count Steps (last From) (centrePoint))) stack:True)))))) Mover top:True)})) (then (and (forget Value All) (and {(if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (is Even (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) NNW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (is Even (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) W)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (is Even (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) SSW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (is Even (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) SSE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (is Even (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) E)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (if (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (is Even (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) NNE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE)))}) (remember Value (ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE)))}) (then (if (or {(and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (is Even (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) NNW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNW)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (is Even (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) W)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) W stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) W)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (is Even (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) SSW)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSW stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSW)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (is Even (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) SSE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) SSE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) SSE)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (is Even (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) E)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) E stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) E)))}) (and {(= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Mover)))) (= 1 (count Sites in:(intersection (sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True) (sites Occupied by:Next)))) (= (next) (who at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (is Even (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True))) (= (mover) (who at:(last To))) (= (size Stack at:(last To)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE))) (= (size Stack at:(ahead (last To) steps:(count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) NNE)) (size Stack at:(ahead (last To) steps:(/ (count Sites in:(sites Direction from:(last To) NNE stop:(= (mover) (who at:(to))) stopIncluded:True)) 2) NNE)))})}) (and (set Var 1) (moveAgain)))))))) (end (if (no Moves Next) (result Next Loss))))) 