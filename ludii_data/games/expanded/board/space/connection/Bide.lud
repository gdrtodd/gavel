(game "Bide" (players 2) (equipment {(board (tri Hexagon 5) use:Vertex) (hand Each size:1) (piece "Disc" Each) (regions "R0x" (sites Outer)) (regions "R1x" (sites Around (sites "R0x") Orthogonal includeSelf:True)) (regions "R2x" (sites Around (sites "R1x") Orthogonal includeSelf:True)) (regions "R3x" (sites Around (sites "R2x") Orthogonal includeSelf:True)) (regions "R4x" (sites Around (sites "R3x") Orthogonal includeSelf:True)) (regions "R5x" (sites Around (sites "R4x") Orthogonal includeSelf:True))}) (rules (meta (passEnd NoEnd)) (play (if (or (is Prev Mover) (and (< 0 (size Array (values Remembered "Released"))) (> 2 (size Array (values Remembered "Released"))))) (if (is Empty (handSite Mover)) (move Add (to (intersection (sites Board) (sites Empty)))) (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain))) (then (and {(remember Value "Released" (mover) unique:True) (set Var "LF" (last To) (then (and {(if (and (!= (var "LF") (ahead (var "LF") NNE)) (not (is Empty (ahead (var "LF") NNE)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))) (apply (remove (to)))))) (then (remove (ahead (var "LF") NNE))))))) (if (and (!= (var "LF") (ahead (var "LF") E)) (not (is Empty (ahead (var "LF") E)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") E)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") E)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))) (apply (remove (to)))))) (then (remove (ahead (var "LF") E))))))) (if (and (!= (var "LF") (ahead (var "LF") SSE)) (not (is Empty (ahead (var "LF") SSE)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))) (apply (remove (to)))))) (then (remove (ahead (var "LF") SSE))))))) (if (and (!= (var "LF") (ahead (var "LF") SSW)) (not (is Empty (ahead (var "LF") SSW)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))) (apply (remove (to)))))) (then (remove (ahead (var "LF") SSW))))))) (if (and (!= (var "LF") (ahead (var "LF") W)) (not (is Empty (ahead (var "LF") W)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") W)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") W)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))) (apply (remove (to)))))) (then (remove (ahead (var "LF") W))))))) (if (and (!= (var "LF") (ahead (var "LF") NNW)) (not (is Empty (ahead (var "LF") NNW)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))) (apply (remove (to)))))) (then (remove (ahead (var "LF") NNW)))))))})))}))) (or (do (add (to (handSite Mover)) stack:True) next:(move Pass)) (or (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain))) (move Add (to (intersection (sites Board) (sites Empty)))) (then (set Var "LF" (last To) (then (and {(if (and (!= (var "LF") (ahead (var "LF") NNE)) (not (is Empty (ahead (var "LF") NNE)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNE))) (apply (remove (to)))))) (then (remove (ahead (var "LF") NNE))))))) (if (and (!= (var "LF") (ahead (var "LF") E)) (not (is Empty (ahead (var "LF") E)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") E)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") E)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") E))) (apply (remove (to)))))) (then (remove (ahead (var "LF") E))))))) (if (and (!= (var "LF") (ahead (var "LF") SSE)) (not (is Empty (ahead (var "LF") SSE)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSE))) (apply (remove (to)))))) (then (remove (ahead (var "LF") SSE))))))) (if (and (!= (var "LF") (ahead (var "LF") SSW)) (not (is Empty (ahead (var "LF") SSW)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") SSW))) (apply (remove (to)))))) (then (remove (ahead (var "LF") SSW))))))) (if (and (!= (var "LF") (ahead (var "LF") W)) (not (is Empty (ahead (var "LF") W)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") W)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") W)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") W))) (apply (remove (to)))))) (then (remove (ahead (var "LF") W))))))) (if (and (!= (var "LF") (ahead (var "LF") NNW)) (not (is Empty (ahead (var "LF") NNW)))) (set Var "AnchorSite" (regionSite (forEach (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) stopIncluded:True distance:Infinity) if:(= (site) (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) index:0) (then (forEach Site (difference (sites Direction from:(var "LF") (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))))) stopIncluded:True distance:Infinity) (if (or {(= -1 (var "AnchorSite")) (is Empty (var "AnchorSite")) (= (var "LF") (var "AnchorSite"))}) (sites {(var "LF")}) (sites Direction from:(var "AnchorSite") (directions Vertex from:(var "AnchorSite") to:(var "LF")) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity))) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW)))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:(var "LF") to:(ahead (var "LF") NNW))) (apply (remove (to)))))) (then (remove (ahead (var "LF") NNW)))))))}))))) (then (forget Value "Released" All))) (then (and {(set Score All 0) (forEach Player (do (and {(forEach Site (sites Around (sites "R0x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 1)) (forEach Site (sites Around (sites "R1x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 2)) (forEach Site (sites Around (sites "R2x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 3)) (forEach Site (sites Around (sites "R3x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 4)) (forEach Site (sites Around (sites "R4x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 5))}) next:(if (< 0 (count Sites in:(intersection (difference (sites Board) (sites Empty)) (sites Occupied by:(player (player)))))) (do (forEach Group Orthogonal if:(and {(is In (to) (intersection (difference (sites Board) (sites Empty)) (sites Occupied by:(player (player)))))}) (remember Value "PlayerGroups" (+ (results from:(sites) to:(from) (value Piece at:(from)))))) next:(addScore (player (player)) (* 10000000 (max (values Remembered "PlayerGroups"))) (then (forget Value "PlayerGroups" All))))))) (forEach Player (do (and {(forEach Site (sites Around (sites "R0x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 1)) (forEach Site (sites Around (sites "R1x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 2)) (forEach Site (sites Around (sites "R2x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 3)) (forEach Site (sites Around (sites "R3x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 4)) (forEach Site (sites Around (sites "R4x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 5))}) next:(if (< 0 (count Sites in:(intersection (difference (sites Board) (sites "R0x")) (sites Occupied by:(player (player)))))) (do (forEach Group Orthogonal if:(and {(is In (to) (intersection (difference (sites Board) (sites "R0x")) (sites Occupied by:(player (player)))))}) (remember Value "PlayerGroups" (+ (results from:(sites) to:(from) (value Piece at:(from)))))) next:(addScore (player (player)) (* 100000 (max (values Remembered "PlayerGroups"))) (then (forget Value "PlayerGroups" All))))))) (forEach Player (do (and {(forEach Site (sites Around (sites "R0x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 1)) (forEach Site (sites Around (sites "R1x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 2)) (forEach Site (sites Around (sites "R2x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 3)) (forEach Site (sites Around (sites "R3x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 4)) (forEach Site (sites Around (sites "R4x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 5))}) next:(if (< 0 (count Sites in:(intersection (difference (sites Board) (sites "R1x")) (sites Occupied by:(player (player)))))) (do (forEach Group Orthogonal if:(and {(is In (to) (intersection (difference (sites Board) (sites "R1x")) (sites Occupied by:(player (player)))))}) (remember Value "PlayerGroups" (+ (results from:(sites) to:(from) (value Piece at:(from)))))) next:(addScore (player (player)) (* 1000 (max (values Remembered "PlayerGroups"))) (then (forget Value "PlayerGroups" All))))))) (forEach Player (do (and {(forEach Site (sites Around (sites "R0x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 1)) (forEach Site (sites Around (sites "R1x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 2)) (forEach Site (sites Around (sites "R2x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 3)) (forEach Site (sites Around (sites "R3x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 4)) (forEach Site (sites Around (sites "R4x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 5))}) next:(if (< 0 (count Sites in:(intersection (difference (sites Board) (sites "R2x")) (sites Occupied by:(player (player)))))) (do (forEach Group Orthogonal if:(and {(is In (to) (intersection (difference (sites Board) (sites "R2x")) (sites Occupied by:(player (player)))))}) (remember Value "PlayerGroups" (+ (results from:(sites) to:(from) (value Piece at:(from)))))) next:(addScore (player (player)) (* 10 (max (values Remembered "PlayerGroups"))) (then (forget Value "PlayerGroups" All))))))) (forEach Player (do (and {(forEach Site (sites Around (sites "R0x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 1)) (forEach Site (sites Around (sites "R1x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 2)) (forEach Site (sites Around (sites "R2x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 3)) (forEach Site (sites Around (sites "R3x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 4)) (forEach Site (sites Around (sites "R4x") Orthogonal if:(= (player) (who at:(to)))) (set Value at:(site) 5))}) next:(if (< 0 (count Sites in:(intersection (difference (sites Board) (sites "R3x")) (sites Occupied by:(player (player)))))) (do (forEach Group Orthogonal if:(and {(is In (to) (intersection (difference (sites Board) (sites "R3x")) (sites Occupied by:(player (player)))))}) (remember Value "PlayerGroups" (+ (results from:(sites) to:(from) (value Piece at:(from)))))) next:(addScore (player (player)) (* 1 (max (values Remembered "PlayerGroups"))) (then (forget Value "PlayerGroups" All)))))))})))) (end (if (= 0 (count Sites in:(intersection (sites Board) (sites Empty)))) (byScore))))) 