(game "Kassle" (players 2) (equipment {(board (square 5)) (piece "Square" Each)}) (rules (play (or {(move Add (to (sites Empty))) (move Select (from (forEach (sites Column (- (count Columns) 1)) if:(not (all Sites (sites Row (row of:(site))) if:(is Empty (site)))))) (to (ahead (from) W) if:(not (is In (+ (from) (to)) (sites Pending)))) (then (and {(forEach Site (sites Row (row of:(last From))) (remove (site))) (forEach Site (sites Row (row of:(last From))) (if (!= (ahead (site) W) (site)) (add (piece (what at:(site))) (to (ahead (site) W))) (add (piece (what at:(site))) (to (coord row:(row of:(last From)) column:(- (count Columns) 1)))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord row:(row of:(last From)) column:0) (ahead (coord row:(row of:(last From)) column:0) E)))}))) (move Select (from (forEach (sites Column 0) if:(not (all Sites (sites Row (row of:(site))) if:(is Empty (site)))))) (to (ahead (from) E) if:(not (is In (+ (from) (to)) (sites Pending)))) (then (and {(forEach Site (sites Row (row of:(last From))) (remove (site))) (forEach Site (sites Row (row of:(last From))) (if (!= (ahead (site) E) (site)) (add (piece (what at:(site))) (to (ahead (site) E))) (add (piece (what at:(site))) (to (coord row:(row of:(last From)) column:0))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord row:(row of:(last From)) column:(- (count Columns) 1)) (ahead (coord row:(row of:(last From)) column:(- (count Columns) 1)) W)))}))) (move Select (from (forEach (sites Row 0) if:(not (all Sites (sites Column (column of:(site))) if:(is Empty (site)))))) (to (ahead (from) N) if:(not (is In (+ (from) (to)) (sites Pending)))) (then (and {(forEach Site (sites Column (column of:(last From))) (remove (site))) (forEach Site (sites Column (column of:(last From))) (if (!= (ahead (site) N) (site)) (add (piece (what at:(site))) (to (ahead (site) N))) (add (piece (what at:(site))) (to (coord row:0 column:(column of:(last From))))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord row:(- (count Rows) 1) column:(column of:(last To))) (ahead (coord row:(- (count Rows) 1) column:(column of:(last To))) S)))}))) (move Select (from (forEach (sites Row (- (count Rows) 1)) if:(not (all Sites (sites Column (column of:(site))) if:(is Empty (site)))))) (to (ahead (from) S) if:(not (is In (+ (from) (to)) (sites Pending)))) (then (and {(forEach Site (sites Column (column of:(last From))) (remove (site))) (forEach Site (sites Column (column of:(last From))) (if (!= (ahead (site) S) (site)) (add (piece (what at:(site))) (to (ahead (site) S))) (add (piece (what at:(site))) (to (coord row:(- (count Rows) 1) column:(column of:(last From))))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord row:(- (count Rows) 1) column:0) (ahead (coord row:(- (count Rows) 1) column:0) N)))})))})) (end {(if (and (not (all Sites (sites Occupied by:P1) if:(not (is Line 5 through:(site))))) (not (all Sites (sites Occupied by:P2) if:(not (is Line 5 through:(site)))))) (result Mover Win)) (if (not (all Sites (sites Occupied by:P1) if:(not (is Line 5 through:(site))))) (result P1 Win)) (if (not (all Sites (sites Occupied by:P2) if:(not (is Line 5 through:(site))))) (result P2 Win))}))) 