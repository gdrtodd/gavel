(game "Ringo" (players 2) (equipment {(boardless Square) (piece "Disc" Each (move (from (from) level:(level)) (to (sites Occupied by:All component:"Ring") level:0 if:(= 1 (size Stack at:(to)))) (then (moveAgain)))) (piece "Ring" Each)}) (rules (start {(place "Ring1" (ahead (centrePoint) NE)) (place "Ring1" (ahead (centrePoint) SE)) (place "Ring1" (ahead (centrePoint) SW)) (place "Ring1" (ahead (centrePoint) NW)) (place "Ring2" (ahead (centrePoint) N)) (place "Ring2" (ahead (centrePoint) E)) (place "Ring2" (ahead (centrePoint) S)) (place "Ring2" (ahead (centrePoint) W))}) phases:{(phase "PlacePhase" (play (do (if (not (is Prev Mover)) (move Add (piece (id "Disc" Mover)) (to (sites Occupied by:All component:"Ring") level:0 if:(= 1 (size Stack at:(to)))) stack:True (then (moveAgain))) (move (from (last To)) (to (sites Around (difference (sites Occupied by:All component:"Ring") (last To)) Orthogonal if:(is Empty (to)))))) ifAfterwards:(= 1 (count Groups)))) (nextPhase Mover (and (not (is Prev Mover)) (>= (count Turns) (- (* (count Players) 10) 1))) "MovePhase")) (phase "MovePhase" (play (do (if (not (is Prev Mover)) (forEach Piece) (move (from (last To)) (to (sites Around (difference (sites Occupied by:All component:"Ring") (last To)) Orthogonal if:(is Empty (to)))))) ifAfterwards:(= 1 (count Groups)))))} (end {(if (is Line 4 what:(id "Disc" P1)) (result P1 Win)) (if (is Line 4 what:(id "Ring" P1)) (result P1 Win)) (if (is Line 4 what:(id "Disc" P2)) (result P2 Win)) (if (is Line 4 what:(id "Ring" P2)) (result P2 Win))}))) 