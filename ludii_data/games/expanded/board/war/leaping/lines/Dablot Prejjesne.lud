(game "Dablot Prejjesne" (players {(player S) (player N)}) (equipment {(board (rectangle 7 6 diagonals:Solid) use:Vertex) (piece "Cone" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (piece "Prince" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (piece "King" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Cone1" (expand (sites Bottom) steps:2)) (place "Cone2" (expand (sites Top) steps:2)) (place "Prince1" coord:"H4" value:1) (place "Prince2" coord:"E9" value:1) (place "King1" coord:"I4" value:2) (place "King2" coord:"D9" value:2)}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (>= (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (if (and {(= 1 (count Pieces P1)) (= 1 (count Pieces P2)) (= (max (results from:(sites Occupied by:P1) to:(sites Occupied by:P1) (value Piece at:(to)))) (max (results from:(sites Occupied by:P2) to:(sites Occupied by:P2) (value Piece at:(to)))))}) (forEach Piece (priority (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(and (is Empty (to)) (< (count Steps (to) (regionSite (sites Occupied by:Next) index:0)) (count Steps (from) (regionSite (sites Occupied by:Next) index:0)))))))) (forEach Piece)))) (end {(if (no Pieces Next) (result Next Loss)) (if (and {(< (max (results from:(sites Occupied by:Mover) to:(sites Occupied by:Mover) (value Piece at:(to)))) (max (results from:(sites Occupied by:Next) to:(sites Occupied by:Next) (value Piece at:(to))))) (= 1 (count Pieces Next)) (no Moves Next)}) (result Mover Win)) (if (and {(= 1 (count Pieces P1)) (!= (where "King" P1) -1) (= 1 (count Pieces P2)) (!= (where "King" P2) -1)}) (result Mover Draw))}))) 