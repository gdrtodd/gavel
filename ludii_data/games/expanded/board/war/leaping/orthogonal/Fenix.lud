(game "Fenix" (players 2) (equipment {(board (square 9)) (piece "Fenix" Each)}) (rules (start {(place "Fenix1" (expand (intersection (sites Bottom) (sites Right)) steps:6 Orthogonal) value:1) (place "Fenix2" (expand (intersection (sites Top) (sites Left)) steps:6 Orthogonal) value:1)}) phases:{(phase "Setup" (play (move (from (sites Occupied by:Mover) if:(= 1 (size Stack at:(from)))) (to (sites Around (from) Own Orthogonal) if:(and {(!= (from) (to)) (< (size Stack at:(to)) 3) (if (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site)))) True (< (size Stack at:(to)) 2)) (if (!= 3 (count Sites in:(forEach (sites Occupied by:Mover) if:(= 2 (size Stack at:(site)))))) True (not (= 1 (size Stack at:(to)))))})))) (nextPhase Mover (and (not (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site))))) (not (!= 3 (count Sites in:(forEach (sites Occupied by:Mover) if:(= 2 (size Stack at:(site)))))))) "Play")) (phase "Play" (play (if (is Prev Mover) (max Moves withValue:True (if (= 1 (size Stack at:(last To))) (move Hop (from (last To)) Orthogonal (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (move Hop (from (last To)) Orthogonal (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True)) (moveAgain)))) (if (= 3 (size Stack at:(last To))) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True)) (moveAgain)))) (if (= 2 (size Stack at:(last To))) (move Hop (from (last To)) Orthogonal (between before:(count Columns) after:(count Columns) if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (hop (from (last To)) Orthogonal (between before:(count Columns) after:(count Columns) if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))))))) (if (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site)))) (forEach Piece (if (= 1 (size Stack at:(from))) (move Step Orthogonal (to if:(and (is Friend (who at:(to))) (= 2 (size Stack at:(to))))) stack:True))) (priority {(max Moves withValue:True (forEach Piece (if (= 1 (size Stack at:(from))) (move Hop (from (from)) Orthogonal (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (move Hop (from (last To)) Orthogonal (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True)) (moveAgain)))) (if (= 3 (size Stack at:(from))) (move Hop (from (from)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True)) (moveAgain)))) (if (= 2 (size Stack at:(from))) (move Hop (from) Orthogonal (between before:(count Columns) after:(count Columns) if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))) (to if:(is Empty (to))) stack:True (then (if (can Move (hop (from (last To)) Orthogonal (between before:(count Columns) after:(count Columns) if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))))))) (forEach Piece (if (= 1 (size Stack at:(from))) (or (move Step Orthogonal (to if:(is Empty (to))) stack:True) (if (!= 3 (count Sites in:(forEach (sites Occupied by:Mover) if:(= 2 (size Stack at:(site)))))) (move Step Orthogonal (to if:(and (is Friend (who at:(to))) (= 1 (size Stack at:(to))))) stack:True))) (if (= 2 (size Stack at:(from))) (move Slide Orthogonal stack:True) (if (= 3 (size Stack at:(from))) (move Step (to if:(is Empty (to))) stack:True)))))})))) (end (if (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site)))) (result Mover Loss))))})) 