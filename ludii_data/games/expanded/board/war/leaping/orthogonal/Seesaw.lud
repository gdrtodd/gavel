(game "Seesaw" (players {(player N) (player S)}) (equipment {(board (rotate 30 (hex 4))) (piece "Disc" Each) (tile "Hex" Each)}) (rules (start {(place Stack "Hex1" 0) (place Stack "Disc1" 0) (place Stack "Hex2" (* 4 (* 3 (- 4 1)))) (place Stack "Disc2" (* 4 (* 3 (- 4 1))))}) (play (if (can Move (forEach Piece "Disc" (do (if (= 0 (count MovesThisTurn)) (set Var (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))))) next:(move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (if (> (var) 1) (intersection (sites Around (intersection (sites Distance (step (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (- (var) 1))) (sites Around (sites Occupied by:Enemy component:"Disc")))) (sites Occupied by:Enemy component:"Disc")) (intersection (sites Around (from)) (sites Occupied by:Enemy component:"Disc"))) (apply (remove (to) count:(count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) count:(count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) stack:True)) top:True)) (forEach Piece "Disc" (do (if (= 0 (count MovesThisTurn)) (set Var (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))))) next:(move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (if (> (var) 1) (intersection (sites Around (intersection (sites Distance (step (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (- (var) 1))) (sites Around (sites Occupied by:Enemy component:"Disc")))) (sites Occupied by:Enemy component:"Disc")) (intersection (sites Around (from)) (sites Occupied by:Enemy component:"Disc"))) (apply (remove (to) count:(count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) count:(count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) stack:True)) top:True (then (set Var (- (var) (count Steps (step (to if:(or (= (last To) (to)) (= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))))))) (last From) (last To))) (then (if (< 0 (var)) (moveAgain) (if (= (+ (* 1 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)) (% (mover) (- 3 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)))) (* (who at:(last To) level:0) (count Stack at:(last To) if:(or (= (id "Hex" Next) (what at:(to) level:(level))) (= (id "Hex" Mover) (what at:(to) level:(level))))))) (add (piece (id "Disc" Mover)) (to (last To)) stack:True))))))) (if (< 0 (count MovesThisTurn)) (or (forEach Piece "Disc" (do (if (= 0 (count MovesThisTurn)) (set Var (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))))) next:(move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (if (is Odd (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))) (sites Distance (step Forwards (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (var))) (sites Distance (step Backwards (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (var))))) count:(count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) stack:True)) top:True) (move Pass) (then (if (= (+ (* 1 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)) (% (mover) (- 3 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)))) (* (who at:(last To) level:0) (count Stack at:(last To) if:(or (= (id "Hex" Next) (what at:(to) level:(level))) (= (id "Hex" Mover) (what at:(to) level:(level))))))) (add (piece (id "Disc" Mover)) (to (last To)) stack:True)))) (or (forEach Piece "Disc" (do (if (= 0 (count MovesThisTurn)) (set Var (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))))) next:(move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (if (is Odd (count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))) (sites Distance (step Forwards (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (var))) (sites Distance (step Backwards (to if:(= 0 (count Stack at:(to) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover))))))) from:(from) (range 1 (var))))) count:(count Stack at:(from) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) stack:True)) top:True (then (if (= (+ (* 1 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)) (% (mover) (- 3 (% (count Stack at:(last To) if:(or (= (what at:(to) level:(level)) (id "Disc" Next)) (= (what at:(to) level:(level)) (id "Disc" Mover)))) 2)))) (* (who at:(last To) level:0) (count Stack at:(last To) if:(or (= (id "Hex" Next) (what at:(to) level:(level))) (= (id "Hex" Mover) (what at:(to) level:(level))))))) (add (piece (id "Disc" Mover)) (to (last To)) stack:True)))) (move Add (piece (id "Hex" Mover)) (to (sites Around (sites Occupied by:Mover component:"Hex" top:False)) if:(is Empty (to))) (then (add (piece (id "Disc" Mover)) (to (last To)) stack:True))))))) (end (if (= 0 (count Sites in:(sites Occupied by:Next component:"Disc"))) (result Next Loss))))) 