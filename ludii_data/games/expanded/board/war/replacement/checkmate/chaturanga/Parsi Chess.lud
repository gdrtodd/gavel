(game "Parsi Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(if (is In (from) (sites Start (piece (what at:(from))))) (if (= 1 (state at:(ahead (from) Backward))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to)))))) (move Step Forward (to if:(and (or (not (is In (to) (sites Mover "Promotion"))) (and (is In (to) (sites Mover "Promotion")) (if (and (is In (to) (sites Corners)) (< (count Sites in:(sites Occupied by:Mover component:"Boat")) 2)) True (if (and (or (= (column of:(to)) 1) (= (column of:(to)) 6)) (< (count Sites in:(sites Occupied by:Mover component:"Knight")) 2)) True (if (and (or (= (column of:(to)) 2) (= (column of:(to)) 5)) (< (count Sites in:(sites Occupied by:Mover component:"Elephant")) 2)) True (if (and (or (and (is Mover P1) (= (column of:(to)) 3)) (and (is Mover P2) (= (column of:(to)) 4))) (< (count Sites in:(sites Occupied by:Mover component:"Ferz_noCross")) 1)) True False)))))) (is Empty (to))))) (move Step (directions {FR FL}) (to if:(and (or (not (is In (to) (sites Mover "Promotion"))) (and (is In (to) (sites Mover "Promotion")) (if (and (is In (to) (sites Corners)) (< (count Sites in:(sites Occupied by:Mover component:"Boat")) 2)) True (if (and (or (= (column of:(to)) 1) (= (column of:(to)) 6)) (< (count Sites in:(sites Occupied by:Mover component:"Knight")) 2)) True (if (and (or (= (column of:(to)) 2) (= (column of:(to)) 5)) (< (count Sites in:(sites Occupied by:Mover component:"Elephant")) 2)) True (if (and (or (and (is Mover P1) (= (column of:(to)) 3)) (and (is Mover P2) (= (column of:(to)) 4))) (< (count Sites in:(sites Occupied by:Mover component:"Ferz_noCross")) 1)) True False)))))) (is Enemy (who at:(to)))) (apply (remove (to)))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece (if (is In (last To) (sites Corners)) (id "Boat" Mover) (if (or (= (column of:(last To)) 1) (= (column of:(last To)) 6)) (id "Knight" Mover) (if (or (= (column of:(last To)) 2) (= (column of:(last To)) 5)) (id "Elephant" Mover) (if (or (and (is Mover P2) (= (column of:(last To)) 4)) (and (is Mover P1) (= (column of:(last To)) 3))) (id "Ferz_noCross" Mover) (id "King_noCross" Mover))))))))))) (piece "Boat" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King_noCross" Each (or (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (if (!= (value Player Mover) (mover)) (move Leap {{F F R F} {F F L F}} (to if:(is Empty (to))) (then (set Value Mover (mover))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Elephant" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Ferz_noCross" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Boat1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1" state:1) (place "King_noCross1" coord:"E1" state:1) (place "Boat2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"E8" state:1) (place "King_noCross2" coord:"D8" state:1)}) (play (do (forEach Piece) ifAfterwards:(and (can Move (forEach Piece Next)) (not (is Threatened (id "King_noCross" Mover)))) (then (if (!= (next) (value Player Next)) (if (is Threatened (id "King_noCross" Next)) (set Value Next (next))))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= 1 (count Pieces Next)) (result Mover Draw))}))) 