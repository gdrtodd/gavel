(game "Shatranj al-Kabir" (players {(player N) (player S)}) (equipment {(board (merge {(square 11) (shift 11 1 (square 1)) (shift -1 9 (square 1))})) (piece "Pawn" Each (if (= 23 (value Piece at:(from))) (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (or (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (then (if (and {(> (value Piece at:(last To)) 2) (is In (last To) (sites Next)) (= 0 (state at:(last To)))}) (promote (last To) (piece (value Piece at:(last To)))) (if (and (is In (last To) (sites Next)) (= 2 (state at:(last To)))) (and {(set Value at:(last To) 23) (set State at:(last To) 0) (forEach Site (sites Board) (if (= (if (is Mover P1) 11 12) (value Piece at:(site))) (set Value at:(site) 23)))}))))))) (piece "Wazir" Each (move Hop Orthogonal (between (exact 2) if:True) (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (remove (to)))))) (piece "Knight_rotated" Each (move Leap {{F F F R F} {F F F L F}} (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Elephant" Each (move Hop Diagonal (between (exact 2) if:True) (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (remove (to)))))) (piece "Queen" Each (move Step Diagonal (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "King_noCross" Each (move Step (to if:(or (is Empty (to)) (and (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))}))) (or (!= (to) (mapEntry "ExtraSquare" Next)) (and (= (to) (mapEntry "ExtraSquare" Next)) (< (value Piece at:(to)) 23))))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Amazon" Each (move Step Orthogonal (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Giraffe" Each (forEach Direction Diagonal (to if:(is Empty (to)) (apply (and {(move (from) (to (sites To (slide (from (to)) Orthogonal (between (min 3)) (to if:(and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))}))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))))}))))) (piece "Bishop_noCross" Each (move Slide Diagonal (between (min 2)) (to if:(and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))}))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))})))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(and (is Enemy (who at:(to))) (not (and {(= (what at:(to)) (id "Pawn" Next)) (is In (to) (sites Mover))}))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "InitShahPawn" {(pair P1 "G3") (pair P2 "G9")}) (map "ExtraSquare" {(pair P1 "M2") (pair P2 "A10")})}) (rules (start {(place "Pawn1" coord:"B3" value:1) (place "Pawn2" coord:"L9" value:2) (place "Pawn1" coord:"C3" value:3) (place "Pawn2" coord:"K9" value:4) (place "Pawn1" coord:"D3" value:5) (place "Pawn2" coord:"J9" value:6) (place "Pawn1" coord:"E3" value:7) (place "Pawn2" coord:"I9" value:8) (place "Pawn1" coord:"F3" value:9) (place "Pawn2" coord:"H9" value:10) (place "Pawn1" coord:"G3" value:11) (place "Pawn2" coord:"G9" value:12) (place "Pawn1" coord:"H3" value:13) (place "Pawn2" coord:"F9" value:14) (place "Pawn1" coord:"I3" value:15) (place "Pawn2" coord:"E9" value:16) (place "Pawn1" coord:"J3" value:17) (place "Pawn2" coord:"D9" value:18) (place "Pawn1" coord:"K3" value:19) (place "Pawn2" coord:"C9" value:20) (place "Pawn1" coord:"L3" value:21) (place "Pawn2" coord:"B9" value:22) (place "King_noCross1" coord:"G2") (place "King_noCross2" coord:"G10") (place "Queen1" coord:"F2") (place "Queen2" coord:"H10") (place "Amazon1" coord:"H2") (place "Amazon2" coord:"F10") (place "Giraffe1" (sites {"E2" "I2"})) (place "Giraffe2" (sites {"E10" "I10"})) (place "Bishop_noCross1" (sites {"D2" "J2"})) (place "Bishop_noCross2" (sites {"D10" "J10"})) (place "Wazir1" (sites {"F1" "H1"})) (place "Wazir2" (sites {"F11" "H11"})) (place "Knight1" (sites {"C2" "K2"})) (place "Knight2" (sites {"C10" "K10"})) (place "Rook1" (sites {"B2" "L2"})) (place "Rook2" (sites {"B10" "L10"})) (place "Elephant1" (sites {"B1" "L1"})) (place "Elephant2" (sites {"B11" "L11"})) (place "Knight_rotated1" (sites {"D1" "J1"})) (place "Knight_rotated2" (sites {"D11" "J11"}))}) (play (do (or {(move (from (forEach (sites Next) if:(and (= (what at:(site)) (id "Pawn" Mover)) (<= (value Piece at:(site)) 2)))) (to (forEach (sites Empty) if:(if (is Mover P1) (and (is Enemy (who at:(ahead (site) NE))) (is Enemy (who at:(ahead (site) NW)))) (and (is Enemy (who at:(ahead (site) SE))) (is Enemy (who at:(ahead (site) SW))))))) (then (and (set Value at:(last To) (if (is Mover P1) 11 12)) (set State at:(last To) 1)))) (move (from (forEach (sites Next) if:(and {(= (what at:(site)) (id "Pawn" Mover)) (or (= (value Piece at:(site)) 11) (= (value Piece at:(site)) 12)) (= (state at:(site)) 1)}))) (to (mapEntry "InitShahPawn" Mover) if:(is Empty (to))) (then (set State at:(last To) 2))) (if (and (!= (value Player Mover) 1) (is Threatened (id "King_noCross" Mover))) (forEach Site (difference (sites Occupied by:Mover container:"Board") (sites Occupied by:Mover container:"Board" component:"King_noCross")) (move Swap Pieces (where "King_noCross" Mover) (site) (then (set Value Mover 1))))) (forEach Piece)}) ifAfterwards:(and (not (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (no Moves Next) (result Mover Win)) (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (or (= (what at:(mapEntry "ExtraSquare" P1)) (id "King_noCross" P2)) (= (what at:(mapEntry "ExtraSquare" P2)) (id "King_noCross" P1))) (result Mover Draw))}))) 