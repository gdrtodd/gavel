(game "Shatranj ar-Rumiya" (players 2) (equipment {(board (remove (concentric {0 0 0 16 16 16 16}) cells:{1})) (piece "Pawn" Each (or {(move Step (if (= (state at:(from)) 0) CW CCW) (to if:(is Empty (to)))) (move (from) (to (sites Around (sites To (move Step (if (= (state at:(from)) 0) CW CCW) (to if:True))) Orthogonal) if:(and (is Related Diagonal (from) (to)) (is Enemy (who at:(to))))))} (then (if (= (state at:(last To)) 0) (if (= (what at:(ahead (last To) CW)) (id "Pawn" Next)) (and (remove (last To)) (remove (ahead (last To) CW)))) (if (= (what at:(ahead (last To) CCW)) (id "Pawn" Next)) (and (remove (last To)) (remove (ahead (last To) CCW)))))))) (piece "Rook" Each (move Slide Rotational (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Knight" Each (forEach Direction Orthogonal (to if:True (apply (forEach Direction (from (to)) Diagonal (if (and (not (is Friend (who at:(to)))) (= 3 (count Steps Orthogonal (from) (to)))) (move (from) (to (apply if:(is Enemy (who at:(to))) (remove (to))))))))))) (piece "Elephant" Each (move (from) (to (sites Around (sites Around (from) Diagonal) Diagonal) if:(and (not (is Friend (who at:(to)))) (< 2 (count Steps Orthogonal (from) (to)))) (apply if:(is Enemy (who at:(to))) (remove (to)))))) (piece "Queen" Each (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "King_noCross" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))}) (rules (start {(place "Rook1" (sites {52 53})) (place "Rook2" (sites {61 60})) (place "Knight1" (sites {36 37})) (place "Knight2" (sites {44 45})) (place "Elephant1" (sites {20 21})) (place "Elephant2" (sites {28 29})) (place "Queen1" 4) (place "Queen2" 12) (place "King_noCross1" 5) (place "King_noCross2" 13) (place "Pawn1" (sites {3 19 35 51}) state:0) (place "Pawn1" (sites {54 38 22 6}) state:1) (place "Pawn2" (sites {11 27 43 59}) state:0) (place "Pawn2" (sites {14 30 46 62}) state:1)}) (play (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win))}))) 