(game "Sittuyin" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each size:6) (piece "King_noCross" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Elephant" Each (move Step Forwards (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))} (then (if (is In (last To) (difference (sites "DiagonalSites") (sites Mover "Home"))) (promote (last To) (piece "Queen") Mover))))) (piece "Queen" Each (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (regions "Home" P1 (expand (sites Bottom) steps:3)) (regions "Home" P2 (expand (sites Top) steps:3)) (regions "NoPawnSites" (union (difference (sites Row 3) (expand (sites Right) steps:3)) (difference (sites Row 4) (expand (sites Left) steps:3)))) (regions "PawnSites" (union {(difference (sites Row 2) (expand (sites Right) steps:3)) (difference (sites Row 3) (expand (sites Left) steps:3)) (difference (sites Row 4) (expand (sites Right) steps:3)) (difference (sites Row 5) (expand (sites Left) steps:3))})) (regions "DiagonalSites" (union (union (sites Centre) (expand (sites Corners) steps:1)) (sites {"C6" "F6" "F3" "C3"}))) (map "KingInitPos" {(pair P1 (coord "G2")) (pair P2 (coord "B7"))})}) (rules (start {(place "Pawn1" (difference (sites Row 2) (expand (sites Right) steps:3))) (place "Pawn1" (difference (sites Row 3) (expand (sites Left) steps:3))) (place "Pawn2" (difference (sites Row 4) (expand (sites Right) steps:3))) (place "Pawn2" (difference (sites Row 5) (expand (sites Left) steps:3))) (place "King_noCross1" (handSite P1)) (place "King_noCross2" (handSite P2)) (place "Queen1" (handSite P1 1)) (place "Queen2" (handSite P2 1)) (place "Elephant1" (handSite P1 2) count:2) (place "Elephant2" (handSite P2 2) count:2) (place "Knight1" (handSite P1 3) count:2) (place "Knight2" (handSite P2 3) count:2) (place "Rook1" (handSite P1 4) count:2) (place "Rook2" (handSite P2 4) count:2)}) phases:{(phase "PlaceKing" (play (move (from (sites Occupied by:Mover container:"Hand" component:"King_noCross")) (to (mapEntry "KingInitPos" Mover)))) (nextPhase Mover "PlaceFirstElephant")) (phase "PlaceFirstElephant" (play (move (from (sites Occupied by:Mover container:"Hand" component:"Elephant")) (to (sites Around (mapEntry "KingInitPos" Mover))))) (nextPhase Mover "PlaceOtherPieces")) (phase "PlaceOtherPieces" (play (if (!= 0 (count Sites in:(sites Occupied by:Mover container:"Hand" component:"Pawn"))) (move (from (sites Occupied by:Mover container:"Hand" component:"Pawn")) (to (intersection (difference (sites Mover) (union (sites "PawnSites") (sites "NoPawnSites"))) (sites Empty)))) (or (if (= 0 (count Sites in:(union (sites Occupied by:P1 container:"Hand") (sites Occupied by:P2 container:"Hand")))) (or (forEach Piece "Pawn" (move Step Forward (to if:(is Empty (to))))) (move (from (difference (sites Occupied by:Mover container:"Board") (sites Occupied by:Mover container:"Board" component:"Pawn"))) (to (difference (intersection (sites Mover) (union (sites Empty) (sites Occupied by:Mover container:"Board" component:"Pawn"))) (sites "NoPawnSites")) (apply (if (is Occupied (to)) (fromTo (from (to)) (to (handSite Mover 5)))))) (then (if (!= 0 (count Sites in:(sites Occupied by:Mover container:"Hand" component:"Pawn"))) (moveAgain)))))) (move (from (sites Occupied by:Mover container:"Hand")) (to (difference (intersection (sites Mover) (union (sites Empty) (sites Occupied by:Mover container:"Board" component:"Pawn"))) (sites "NoPawnSites")) (apply (if (is Occupied (to)) (fromTo (from (to)) (to (handSite Mover 5)))))) (then (if (!= 0 (count Sites in:(sites Occupied by:Mover container:"Hand" component:"Pawn"))) (moveAgain))))))) (nextPhase (and (is In (last From) (sites Board)) (= (what at:(last To)) (id "Pawn" Mover))) "Playing")) (phase "Playing" (play (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win))))})) 