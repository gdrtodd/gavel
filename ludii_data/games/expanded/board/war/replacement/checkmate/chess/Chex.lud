(game "Chex" (players {(player N) (player S)}) (equipment {(boardless Square) (hand Each) (tile "Pawn" Each numSides:4 (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))})) (tile "Rook" Each numSides:4 (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (tile "King" Each numSides:4 (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (tile "Bishop" Each numSides:4 (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (tile "Knight" Each numSides:4 (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (tile "Queen" Each numSides:4 (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to))))))}) (rules (start {(place Random {(count "Pawn1" 8) (count "Rook1" 2) (count "Knight1" 2) (count "Bishop1" 2) (count "Queen1" 1) (count "King1" 1)} (handSite 1)) (place Random {(count "Pawn2" 8) (count "Rook2" 2) (count "Knight2" 2) (count "Bishop2" 2) (count "Queen2" 1) (count "King2" 1)} (handSite 2)) (forEach Value min:0 max:(topLevel at:(handSite 1)) (set Hidden What at:(handSite 1) level:(value) to:P1)) (forEach Value min:0 max:(topLevel at:(handSite 1)) (set Hidden What at:(handSite 1) level:(value) to:P2)) (forEach Value min:0 max:(topLevel at:(handSite 2)) (set Hidden What at:(handSite 2) level:(value) to:P1)) (forEach Value min:0 max:(topLevel at:(handSite 2)) (set Hidden What at:(handSite 2) level:(value) to:P2))}) (play (if (is Prev Mover) (if (= (count Moves) 1) (move (from (handSite (mover))) (to (centrePoint))) (do (move (from (handSite (mover))) (to (sites Around (union (sites Occupied by:P1 container:"Board") (sites Occupied by:P2 container:"Board")) Empty))) ifAfterwards:(not (is Threatened (id "King" Mover))))) (or (if (is Occupied (handSite (mover))) (move Select (from (handSite (mover))) (then (and {(moveAgain) (set Hidden What at:(last To) level:(topLevel at:(last To)) False to:P1) (set Hidden What at:(last To) level:(topLevel at:(last To)) False to:P2)})))) (do (forEach Piece) ifAfterwards:(and (= 1 (count Groups)) (not (is Threatened (id "King" Mover)))))))) (end {(if (and {(not (can Move (if (!= (what at:(handSite (mover))) 0) (move Select (from (handSite (mover))))))) (!= (where "King" Next) -1) (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(and (= 1 (count Groups)) (not (is Threatened (id "King" Next)))))))}) (result Mover Win)) (if (and {(is Prev Mover) (is Threatened (id "King" Mover)) (not (can Move (do (move (from (handSite (mover))) (to (sites Around (union (sites Occupied by:P1 container:"Board") (sites Occupied by:P2 container:"Board")) Empty))) ifAfterwards:(not (is Threatened (id "King" Mover))))))}) (result Next Win)) (if (no Moves Mover) (result Mover Draw))}))) 