(game "De Vasa Chess" (players {(player NNE) (player SSW)}) (equipment {(board (hex Diamond 9)) (piece "King" Each (or {(move Step All (to if:(or (is In (to) (sites Empty)) (is Enemy (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0)))) (if (and {(= (what at:(mapEntry "King" (mover))) (id "King" Mover)) (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))}) (or {(if (is Mover P1) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ESE (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:True)))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ESE (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:True))))))) (if (is Mover P1) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WNW (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:True)))))) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WNW (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:True)))))))}))})) (piece "Queen" Each (move Slide All (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step (if (is Mover P1) (directions {N ENE}) (directions {S WSW})) (to if:(is Empty (to)))) (if (is In (from) (sites Start (piece (what at:(from))))) (if (is Mover P1) (or (move Hop N (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) S)) (set Var (last To))}))) (move Hop ENE (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) WSW)) (set Var (last To))})))) (or (move Hop S (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) N)) (set Var (last To))}))) (move Hop WSW (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) ENE)) (set Var (last To))})))))) (move Step (if (is Mover P1) (directions {NNW E}) (directions {SSE W})) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (move Step (if (is Mover P1) (directions {NNW E}) (directions {SSE W})) (to if:(and (is Pending) (= (to) (value Pending)))) (then (remove (var))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain)) (set Counter))))) (map "King" {(pair 1 "A4") (pair 2 "I4")}) (map "RookLeft" {(pair 1 "A9") (pair 2 "I9")}) (map "RookRight" {(pair 1 "A1") (pair 2 "I1")}) (regions "Region-Dark" (sites Phase 0)) (regions "Region-Light" (sites Phase 1)) (regions "Region-Medium" (sites Phase 2)) (regions "PromotionZone" P1 (sites Side NE)) (regions "PromotionZone" P2 (sites Side SW))}) (rules (start {(place "King1" coord:"A4" state:1) (place "Queen1" coord:"A6") (place "Rook1" {"A9" "A1"} state:1) (place "Bishop1" {"A3" "A5" "A7"}) (place "Knight1" {"A8" "A2"}) (place "King2" coord:"I4" state:1) (place "Queen2" coord:"I6") (place "Rook2" {"I9" "I1"} state:1) (place "Bishop2" {"I7" "I5" "I3"}) (place "Knight2" {"I8" "I2"}) (place "Pawn1" {"C9" "C8" "C7" "C6" "C5" "C4" "C3" "C2" "C1"}) (place "Pawn2" {"G1" "G2" "G3" "G4" "G5" "G6" "G7" "G8" "G9"})}) phases:{(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))}))})) 