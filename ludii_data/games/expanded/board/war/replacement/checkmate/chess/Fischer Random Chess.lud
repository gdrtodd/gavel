(game "Fischer Random Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (or (if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (= (to) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Rook1" (sites Random (difference (sites Bottom) (expand (sites Right)))) state:1) (place "King1" (sites Random (difference (intersection {(sites Bottom) (expand (sites Occupied by:Mover) steps:8 E) (sites Empty)}) (sites Right))) state:1) (place "Rook1" (sites Random (intersection {(sites Bottom) (expand (sites Occupied by:Mover component:"King") steps:8 E) (sites Empty)})) state:1) (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 0)}))) (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 1)}))) (place "Knight1" (sites Random (intersection (sites Bottom) (sites Empty)) num:2)) (place "Queen1" (sites Random (intersection (sites Bottom) (sites Empty)))) (place "Pawn1" (sites Row 1)) (place "Rook2" (forEach (sites Top) if:(= (id "Rook1") (what at:(ahead (site) steps:7 S)))) state:1) (place "Bishop2" (forEach (sites Top) if:(= (id "Bishop1") (what at:(ahead (site) steps:7 S))))) (place "Knight2" (forEach (sites Top) if:(= (id "Knight1") (what at:(ahead (site) steps:7 S))))) (place "Queen2" (forEach (sites Top) if:(= (id "Queen1") (what at:(ahead (site) steps:7 S))))) (place "King2" (forEach (sites Top) if:(= (id "King1") (what at:(ahead (site) steps:7 S)))) state:1) (place "Pawn2" (sites Row 6))}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (or (forEach Piece) (if (and (= (state at:(where "King" Mover)) 1) (not (is Threatened (id "King" Mover)))) (if (is Mover P1) (forEach Site (sites Occupied by:Mover component:"Rook") (if (= (state at:(site)) 1) (if (< (column of:(site)) (column of:(where "King" Mover))) (if (or (can Move (slide (from (site)) (if (< (column of:(site)) (column of:(coord "D1"))) E W) (between (exact (count Steps (coord "D1") (site))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (= (site) (coord "D1"))) (if (= (where "King" Mover) (coord "C1")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (< (column of:(where "King" Mover)) (column of:(coord "C1"))) E W) (between (exact (count Steps (coord "C1") (where "King" Mover))) if:(and (or (is Empty (to)) (= (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (= (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (= (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (< (column of:(var "RookToMove")) (column of:(coord "D1"))) E W) (between (exact (count Steps (coord "D1") (var "RookToMove"))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "D1"))))))) (if (or (can Move (slide (from (site)) (if (< (column of:(site)) (column of:(coord "F1"))) E W) (between (exact (count Steps (coord "F1") (site))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (= (site) (coord "F1"))) (if (= (where "King" Mover) (coord "G1")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (< (column of:(where "King" Mover)) (column of:(coord "G1"))) E W) (between (exact (count Steps (coord "G1") (where "King" Mover))) if:(and (or (is Empty (to)) (= (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (= (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (= (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (< (column of:(var "RookToMove")) (column of:(coord "F1"))) E W) (between (exact (count Steps (coord "F1") (var "RookToMove"))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "F1")))))))))) (forEach Site (sites Occupied by:Mover component:"Rook") (if (= (state at:(site)) 1) (if (> (column of:(site)) (column of:(where "King" Mover))) (if (or (can Move (slide (from (site)) (if (< (column of:(site)) (column of:(coord "F8"))) E W) (between (exact (count Steps (coord "F8") (site))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (= (site) (coord "F8"))) (if (= (where "King" Mover) (coord "G8")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (< (column of:(where "King" Mover)) (column of:(coord "G8"))) E W) (between (exact (count Steps (coord "G8") (where "King" Mover))) if:(and (or (is Empty (to)) (= (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (= (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (= (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (< (column of:(var "RookToMove")) (column of:(coord "F8"))) E W) (between (exact (count Steps (coord "F8") (var "RookToMove"))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "F8"))))))) (if (or (can Move (slide (from (site)) (if (< (column of:(site)) (column of:(coord "D8"))) E W) (between (exact (count Steps (coord "D8") (site))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (= (site) (coord "D8"))) (if (= (where "King" Mover) (coord "C8")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (< (column of:(where "King" Mover)) (column of:(coord "C8"))) E W) (between (exact (count Steps (coord "C8") (where "King" Mover))) if:(and (or (is Empty (to)) (= (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (= (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (= (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (< (column of:(var "RookToMove")) (column of:(coord "D8"))) E W) (between (exact (count Steps (coord "D8") (var "RookToMove"))) if:(or (is Empty (to)) (= (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (= (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "D8"))))))))))))) ifAfterwards:(not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw))}))) 