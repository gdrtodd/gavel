(game "Grande Acedrex" (players {(player N) (player S)}) (equipment {(board (square 12)) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece (if (is In (last To) (sites Corners)) (id "Rook" Mover) (if (or (= (column of:(last To)) 1) (= (column of:(last To)) 10)) (id "Lion" Mover) (if (or (= (column of:(last To)) 2) (= (column of:(last To)) 9)) (id "Rhino" Mover) (if (or (= (column of:(last To)) 3) (= (column of:(last To)) 8)) (id "Giraffe" Mover) (if (or (= (column of:(last To)) 4) (= (column of:(last To)) 7)) (id "Crocodile" Mover) (id "Eagle" Mover)))))))))))) (piece "Crocodile" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Eagle" Each (move (from) (to (union {(sites To (if (and (!= (ahead (from) NW) -1) (not (is Friend (who at:(ahead (from) NW))))) (or (fromTo (from) (to (ahead (from) NW))) (slide (from (ahead (from) NW)) (directions {N W}) (to if:(is Enemy (who at:(to)))))))) (sites To (if (and (!= (ahead (from) NE) -1) (not (is Friend (who at:(ahead (from) NE))))) (or (fromTo (from) (to (ahead (from) NE))) (slide (from (ahead (from) NE)) (directions {N E}) (to if:(is Enemy (who at:(to)))))))) (sites To (if (and (!= (ahead (from) SW) -1) (not (is Friend (who at:(ahead (from) SW))))) (or (fromTo (from) (to (ahead (from) SW))) (slide (from (ahead (from) SW)) (directions {S W}) (to if:(is Enemy (who at:(to)))))))) (sites To (if (and (!= (ahead (from) SE) -1) (not (is Friend (who at:(ahead (from) SE))))) (or (fromTo (from) (to (ahead (from) SE))) (slide (from (ahead (from) SE)) (directions {E S}) (to if:(is Enemy (who at:(to))))))))}) (apply if:(is Enemy (who at:(to))) (remove (to)))))) (piece "Rhino" Each (move (from) (to (union {(sites To (if (!= (ahead (from) N) -1) (slide (from (ahead (from) N)) (directions {NE NW}) (to if:(is Enemy (who at:(to))))))) (sites To (if (!= (ahead (from) W) -1) (slide (from (ahead (from) W)) (directions {NW SW}) (to if:(is Enemy (who at:(to))))))) (sites To (if (!= (ahead (from) S) -1) (slide (from (ahead (from) S)) (directions {SW SE}) (to if:(is Enemy (who at:(to))))))) (sites To (if (!= (ahead (from) E) -1) (slide (from (ahead (from) E)) (directions {SE NE}) (to if:(is Enemy (who at:(to)))))))}) (apply if:(is Enemy (who at:(to))) (remove (to)))))) (piece "Giraffe" Each (move Leap {{F F F R F F} {F F F L F F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Lion" Each (move Leap {{F F F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "King" Each (or (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (if (= (state at:(from)) 1) (move Hop Forwards (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 3)) (place "Rook1" (sites {"A1" "L1"})) (place "Lion1" (sites {"B1" "K1"})) (place "Rhino1" (sites {"C1" "J1"})) (place "Giraffe1" (sites {"D1" "I1"})) (place "Crocodile1" (sites {"E1" "H1"})) (place "Eagle1" coord:"F1") (place "King1" coord:"G1" state:1) (place "Pawn2" (sites Row 8)) (place "Rook2" (sites {"A12" "L12"})) (place "Lion2" (sites {"B12" "K12"})) (place "Rhino2" (sites {"C12" "J12"})) (place "Giraffe2" (sites {"D12" "I12"})) (place "Crocodile2" (sites {"E12" "H12"})) (place "Eagle2" coord:"F12") (place "King2" coord:"G12" state:1)}) (play (do (or {(forEach Piece "Pawn") (forEach Piece "King") (forEach Piece "Rook") (forEach Piece "Lion") (forEach Piece "Giraffe") (forEach Piece "Eagle") (forEach Piece "Crocodile") (forEach Piece "Rhino")}) ifAfterwards:(not (is Threatened (id "King" Mover))))) (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win))))) 