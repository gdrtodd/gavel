(game "Nodal Chess" (players {(player N) (player S)}) (equipment {(board (add (remove (rectangle 8 6) cells:{1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33}) edges:{{1 2} {3 4} {6 12} {11 17} {18 24} {23 29} {30 36} {35 41} {43 44} {45 46}}) use:Vertex) (piece "Pawn" Each (or {(move Step (if (= 1 (mover)) (union N (union NE NW)) (union S (union SW SE))) (to if:(is Empty (to))) (then (and (set Score Mover 0) (if (is In (last To) (sites Mover "Promotion")) (moveAgain))))) (move Step Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (and (set Score Mover 0) (if (is In (last To) (sites Mover "Promotion")) (moveAgain)))))})) (piece "King" Each (if (not (is Prev Mover)) (or {(move (from (from)) (to (difference (sites (from) {{F R F F} {F L F F} {F R F}}) (sites Around (from) All)) if:(and {(is Enemy (who at:(to))) (< 0 (count Sites in:(intersection (sites Around (from) All if:(is Empty (to))) (sites Around (to) All))))}) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0))))))) (move (from (from)) (to (difference (sites (from) {{F R F F} {F L F F} {F R F}}) (sites Around (from) All)) if:(and {(is Empty (to)) (< 0 (count Sites in:(intersection (sites Around (from) All if:(is Empty (to))) (sites Around (to) All))))}) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0))))))) (or (move Step All (to if:(and {(!= (from) (to)) (is Enemy (who at:(to))) (not (is In (to) (sites (from) {{F F} {F F R F F}})))}) (apply if:(is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0)))))) (move Step All (to if:(and {(!= (from) (to)) (is Empty (to)) (not (is In (to) (sites (from) {{F F} {F F R F F}})))}) (apply if:(is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0)))))) (then (moveAgain)))} (then (set Var "LF" (last From)))) (or {(move Pass) (move Step All (to if:(and {(!= (var "LF") (to)) (is Enemy (who at:(to))) (not (is In (to) (sites (var "LF") {{F F} {F F R F F}})))}) (apply if:(is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0)))))) (move Step All (to if:(and {(!= (var "LF") (to)) (is Empty (to)) (not (is In (to) (sites (var "LF") {{F F} {F F R F F}})))}) (apply if:(is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0))))))}))) (piece "Bishop" Each (move Slide All (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0)))))))) (piece "Knight" Each (move Leap {{F R F F} {F L F F}} (to if:(not (is Mover (who at:(to)))) (apply (if (is Next (who at:(to))) (remove (to) (then (set Score Mover 0))) (if (< 0 (count Pieces Next in:(intersection (sites Around (to) All) (sites Around (from) All)))) (remove (intersection (sites Around (to) All) (sites Around (from) All)) (then (set Score Mover 0))))))))) (piece "Queen" Each (move (from (from)) (to (union {(sites To (slide (from (from)) Diagonal (to if:(is Enemy (who at:(to)))))) (sites (results from:(union (sites To (slide (from (from)) Diagonal)) (sites {(from)})) to:(sites (results from:(sites Incident Cell of:Vertex at:(from)) to:(forEach (sites Incident Vertex of:Cell at:(from)) if:(not (is Mover (who at:(site))))) (to))) (to))) (forEach of:(sites (results from:(union (sites To (slide (from (from)) Diagonal)) (sites {(from)})) to:(sites (results from:(sites Incident Cell of:Vertex at:(from)) to:(forEach (sites Incident Vertex of:Cell at:(from)) if:(is Empty (site))) (to))) (to))) (sites To (slide (from (site)) Diagonal (to if:(is Enemy (who at:(to)))))))}) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Score Mover 0))) (set NextPlayer (player (next)))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Knight1" {"B1" "E1"}) (place "Bishop1" {"A1" "F1"}) (place "Queen1" coord:"C1") (place "King1" coord:"D1" state:1) (place "Knight2" {"B8" "E8"}) (place "Bishop2" {"A8" "F8"}) (place "Queen2" coord:"C8") (place "King2" coord:"D8" state:1)}) (play (if (not (is Prev Mover)) (if (and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to)))))))))}) (or (do (forEach Piece {"Queen" "Knight" "Bishop" "Pawn"}) ifAfterwards:(and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to)))))))))})) (do (forEach Piece "King") ifAfterwards:(and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))))))) (can Move (do (move Step (from (last To)) All (to if:(is In (to) (sites Around (var "LF") All includeSelf:True)))) ifAfterwards:(or (not (is Threatened (id "King" Mover) (forEach Piece {"Queen" "Knight" "Bishop" "Pawn"}))) (= (var "LF") (last To)))))})) (then (addScore Mover 1))) (do (or (do (forEach Piece {"Queen" "Knight" "Bishop" "Pawn"}) ifAfterwards:(and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to)))))))))})) (do (forEach Piece "King") ifAfterwards:(and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))))))) (can Move (do (move Step (from (last To)) All (to if:(is In (to) (sites Around (var "LF") All includeSelf:True)))) ifAfterwards:(or (not (is Threatened (id "King" Mover) (forEach Piece {"Queen" "Knight" "Bishop" "Pawn"}))) (= (var "LF") (last To)))))})) (then (addScore Mover 1))) next:(addScore Mover -1))) (if (= (id "King" Mover) (what at:(last To))) (do (forEach Piece "King" Mover) ifAfterwards:(and {(not (is Threatened (id "King" Mover))) (not (is Threatened (id "King" Mover) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to)))))))))})) (move Promote (last To) (piece {"Queen" "Knight" "Bishop"}) Mover)) (then (if (and {(not (is Threatened (id "King" Prev))) (not (is Threatened (id "King" Prev) (forEach Piece "Knight" (or (move Step Diagonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Orthogonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to))))) (move Step Orthogonal (to if:(and (is Enemy (who at:(to))) (< 0 (count Sites in:(difference (sites Around (to) Diagonal if:(is Empty (to))) (sites Around (from) Orthogonal))))) (apply (remove (to)))))))))}) (addScore Mover 0))))) (end {(if (no Moves Next) (result Mover Win)) (if (< 13 (score Mover)) (result Mover Loss))}))) 