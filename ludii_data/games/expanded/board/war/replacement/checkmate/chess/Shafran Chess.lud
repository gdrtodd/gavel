(game "Shafran Chess" (players {(player N) (player S)}) (equipment {(board (remove (rotate 90 (hex 6)) cells:{0 1 2 3 4 5 85 86 87 88 89 90 84 77 69 60 50 39 29 20 12})) (piece "King" Each (or {(move Step All (to if:(or (is In (to) (sites Empty)) (is Enemy (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0)))) (if (and {(= (what at:(mapEntry "King" (mover))) (id "King" Mover)) (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))}) (or {(if (is Mover P1) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WSW (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ENE (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WSW (between (exact 2) if:True)))))) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ENE (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WSW (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ENE (between (exact 2) if:True))))))) (if (is Mover P1) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WSW (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ENE (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WSW (between (exact 3) if:True)))))) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ENE (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WSW (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ENE (between (exact 3) if:True))))))) (if (is Mover P1) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WNW (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 2) if:True)))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ESE (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 2) if:True))))))) (if (is Mover P1) (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) WNW (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) ESE (between (exact 3) if:True)))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) ESE (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) WNW (between (exact 3) if:True)))))))}))})) (piece "Queen" Each (move Slide All (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (if (is In (from) (sites Start (piece (what at:(from))))) (or {(if (is In (from) (sites Mover "Pawn_Step2Cells")) (move Hop (from) Forward (between (range 1 1) if:(is Empty (between)) (apply (set Pending (between)))) (to if:(is Empty (to))) (then (set Var (last To))))) (if (is In (from) (sites Mover "Pawn_Step3Cells")) (move Hop (from) Forward (between (range 1 2) if:(is Empty (between)) (apply (set Pending (between)))) (to if:(is Empty (to))) (then (set Var (last To)))))})) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to if:(is In (to) (sites Pending))) (then (remove (var))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain)) (set Counter))))) (map "King" {(pair 1 "A1") (pair 2 "J10")}) (map "RookLeft" {(pair 1 "A5") (pair 2 "F10")}) (map "RookRight" {(pair 1 "E1") (pair 2 "J6")}) (regions "Pawn_Step2Cells" P1 (sites {"B5" "B4" "B3" "B2" "C2" "D2" "E2"})) (regions "Pawn_Step2Cells" P2 (sites {"F9" "G9" "H9" "I9" "I8" "I7" "I6"})) (regions "Pawn_Step3Cells" P1 (sites {"B3" "B2" "C2"})) (regions "Pawn_Step3Cells" P2 (sites {"H9" "I9" "I8"})) (regions "PromotionZone" P1 (union (sites Side NW) (sites Side NE))) (regions "PromotionZone" P2 (union (sites Side SW) (sites Side SE))) (regions "Region-Dark" (sites Phase 2)) (regions "Region-Light" (sites Phase 0)) (regions "Region-Medium" (sites Phase 1))}) (rules (start {(place "King1" coord:"A1" state:1) (place "Queen1" coord:"A2") (place "Rook1" {"A5" "E1"} state:1) (place "Bishop1" {"A3" "B1" "D1"}) (place "Knight1" {"A4" "C1"}) (place "King2" coord:"J10" state:1) (place "Queen2" coord:"J9") (place "Rook2" {"F10" "J6"} state:1) (place "Bishop2" {"G10" "I10" "J8"}) (place "Knight2" {"H10" "J7"}) (place "Pawn1" {"B6" "B5" "B4" "B3" "B2" "C2" "D2" "E2" "F2"}) (place "Pawn2" {"E9" "F9" "G9" "H9" "I9" "I8" "I7" "I6" "I5"})}) phases:{(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))}))})) 