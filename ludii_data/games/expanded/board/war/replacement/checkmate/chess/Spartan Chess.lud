(game "Spartan Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" P1 (or {(if (is In (from) (sites Start (piece (what at:(from))))) (move Hop Forward (between if:(is Empty (between))) (to if:(is Empty (to))))) (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FL FR}) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Hoplite" P2 (or {(if (is In (from) (sites Start (piece (what at:(from))))) (move Hop (directions {FL FR}) (to if:(is Empty (to))))) (move Step (directions {FL FR}) (to if:(is Empty (to)))) (move Step Forward (to if:(is Enemy (who at:(to))) (apply (remove (to)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" P1 (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "General" P2 (or (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))) (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (piece "Warlord" P2 (or (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (piece "Lieutenant" P2 (or {(move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))) (move Hop Diagonal (to if:(or (is Enemy (who at:(to))) (is Empty (to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))) (move Step (directions {W E}) (to if:(is Empty (to))))})) (piece "Captain" P2 (or (move Step Orthogonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))) (move Hop Orthogonal (to if:(or (is Enemy (who at:(to))) (is Empty (to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (piece "King" Each (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" P1 (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Knight" P1 (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" P1 (move Slide (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Hoplite2" (sites Row 6)) (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) (place "Lieutenant2" {"A8" "H8"}) (place "Warlord2" {"G8"}) (place "General2" {"B8"}) (place "King2" {"C8" "F8"} state:0) (place "Captain2" {"D8" "E8"})}) (play (if (is Prev Mover) (if (= (mover) (id P1)) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (if (= 1 (count Sites in:(sites Occupied by:P2 component:"King"))) (move Promote (last To) (piece {"King" "Captain" "General" "Warlord" "Lieutenant"}) Mover) (move Promote (last To) (piece {"Captain" "General" "Warlord" "Lieutenant"}) Mover))) (do (or (forEach Piece) (if (and {(= (what at:4) (id "King" Mover)) (= (state at:4) 1) (not (is Threatened (id "King" Mover)))}) (or (if (and (= (state at:0) 1) (can Move (move Slide (from 0) E (between (exact 3) if:(is Empty (to)))))) (move Slide (from 4) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from 0) E (between (exact 3) if:True)))))) (if (and (= (state at:7) 1) (can Move (move Slide (from 7) W (between (exact 2) if:(is Empty (to)))))) (move Slide (from 4) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from 7) W (between (exact 2) if:True))))))))) ifAfterwards:(not (all Sites (sites Occupied by:Mover component:"King") if:(is Threatened at:(site))))))) (end {(if (and (all Sites (sites Occupied by:Next component:"King") if:(is Threatened at:(site))) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (all Sites (sites Occupied by:Next component:"King") if:(is Threatened at:(site)))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw))}))) 