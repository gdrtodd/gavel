(game "Stratomic" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Pawn" Each (or {(if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to)))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (= (to) (value Pending)))) (then (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(ahead (last To) Backward)))) (set Var "NonPawnPieceCapture" 1)) (remove (ahead (last To) Backward)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))))) (piece "NuclearBomb" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (and (if (and (not (= (var "NonPawnPieceCapture") 1)) (!= (id "Pawn" Next) (what at:(to)))) (set Var "NonPawnPieceCapture" 1)) (remove (to) (then (set Counter))))))))) (map "King" {(pair 1 "F2") (pair 2 "E9")}) (map "RookLeft" {(pair 1 "A2") (pair 2 "J9")}) (map "RookRight" {(pair 1 "J2") (pair 2 "A9")}) (regions "Promotion" P1 (sites Row 8)) (regions "Promotion" P2 (sites Row 1))}) (rules (start {(place "Pawn1" (sites Row 2)) (place "Pawn2" (sites Row 7)) (place "NuclearBomb1" (sites {"A2" "J2"})) (place "Rook1" {"B2" "I2"} state:1) (place "Knight1" {"C2" "H2"}) (place "Bishop1" {"D2" "G2"}) (place "Queen1" coord:"E2") (place "King1" coord:"F2" state:1) (place "NuclearBomb2" (sites {"A9" "J9"})) (place "Rook2" {"B9" "I9"} state:1) (place "Knight2" {"C9" "H9"}) (place "Bishop2" {"D9" "G9"}) (place "Queen2" coord:"F9") (place "King2" coord:"E9" state:1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook" "NuclearBomb"}) Mover) (do (or (if (= (var "NonPawnPieceCapture") 1) (move Select (from (sites Occupied by:Mover component:"NuclearBomb") if:(not (is Threatened (id "NuclearBomb" Mover) at:(from) (forEach Piece)))) (to (sites Board)) (then (and (forEach Site (sites Around (last To) includeSelf:True) (if (and {(is Occupied (site)) (!= (what at:(site)) (id "King" P1)) (!= (what at:(site)) (id "King" P2))}) (remove (site)))) (remove (last From)))))) (or (forEach Piece) (if (and (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover) (forEach Piece)))) (or (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0))))))))))) ifAfterwards:(not (is Threatened (id "King" Mover) (or (forEach Piece) (if (and (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover) (forEach Piece)))) (or (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0))))))))))))))) (end {(if (and (is Threatened (id "King" Next) (or (forEach Piece) (if (and (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover) (forEach Piece)))) (or (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0))))))))))) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next) (or (forEach Piece) (if (and (= (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover) (forEach Piece)))) (or (if (and (= (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (= (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to) (forEach Piece))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0)))))))))))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw))}))) 