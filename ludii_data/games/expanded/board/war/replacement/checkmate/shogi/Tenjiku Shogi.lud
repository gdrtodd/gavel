(game "Tenjiku Shogi" (players {(player N) (player S)}) (equipment {(board (square 16)) (piece "Pawn" (move Step Forward (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "King" (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "Prince" (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "DrunkenElephant" (move Step (difference Adjacent (directions {Backward})) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))) (piece "ViceGeneral" (or {(if (not (is Prev Mover)) (or (move Hop Diagonal (between (range 1 (count Columns)) if:(not (is In (what at:(between)) (sites {(id "King1") (id "King2") (id "Prince1") (id "Prince2") (id "GreatGeneral1") (id "GreatGeneral2") (id "ViceGeneral1") (id "ViceGeneral2")})))) (to if:(and (is Enemy (who at:(to))) (not (is In (what at:(to)) (sites {(id "King" Next) (id "Prince" Next)})))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(is Empty (to))) (then (if (< (value Player Mover) 1) (and (set Value Mover (+ 1 (value Player Mover))) (moveAgain)) (set Value Mover -1)))) (move Step Adjacent (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (set Value Mover -1)))})) (piece "GreatGeneral" (or (move Hop Adjacent (between (range 1 (count Columns)) if:(not (is In (what at:(between)) (sites {(id "King1") (id "King2") (id "Prince1") (id "Prince2") (id "GreatGeneral1") (id "GreatGeneral2")})))) (to if:(and (is Enemy (who at:(to))) (not (is In (what at:(to)) (sites {(id "King" Next) (id "Prince" Next)})))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide Adjacent (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (piece "BishopGeneral" (or (move Hop Diagonal (between (range 1 (count Columns)) if:(not (is In (what at:(between)) (sites {(id "King1") (id "King2") (id "Prince1") (id "Prince2") (id "GreatGeneral1") (id "GreatGeneral2") (id "ViceGeneral1") (id "ViceGeneral2") (id "BishopGeneral1") (id "BishopGeneral2") (id "RookGeneral1") (id "RookGeneral2")})))) (to if:(and (is Enemy (who at:(to))) (not (is In (what at:(to)) (sites {(id "King" Next) (id "Prince" Next)})))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "RookGeneral" (or (move Hop Orthogonal (between (range 1 (count Columns)) if:(not (is In (what at:(between)) (sites {(id "King1") (id "King2") (id "Prince1") (id "Prince2") (id "GreatGeneral1") (id "GreatGeneral2") (id "ViceGeneral1") (id "ViceGeneral2") (id "BishopGeneral1") (id "BishopGeneral2") (id "RookGeneral1") (id "RookGeneral2")})))) (to if:(and (is Enemy (who at:(to))) (not (is In (what at:(to)) (sites {(id "King" Next) (id "Prince" Next)})))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Lion" (or {(move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) N (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) S (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) E (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) W (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Hop Adjacent (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))} (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "HornedFalcon" (or {(move Step Forward (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) N (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Forward (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) S (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Hop Forward (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (difference Adjacent (directions {Forward})) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))} (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "SoaringEagle" (or {(move Step FL (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step FL (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step FR (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step FR (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Hop (directions {FL FR}) (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (difference Adjacent (directions {FL FR})) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))} (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "DragonHorse" (or (move Step Orthogonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "DragonKing" (or (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Bishop" (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Rook" (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "FerociousLeopard" (move Step (directions {Backward Forward FL FR BR BL}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "GoldGeneral" (move Step (directions {Backward Forward FL FR Rightward Leftward}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "FireDemon" (or (if (not (is Prev Mover)) (move Slide (directions {FL FR BR BL Rightward Leftward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (remove (intersection (sites Around (last To)) (sites Occupied by:Next)))))) (move Step Adjacent (to if:(is Empty (to))) (then (if (!= 0 (count Sites in:(intersection (sites Around (last To)) (sites Occupied by:Next)))) (and (remove (intersection (sites Around (last To)) (sites Occupied by:Next))) (set Value Mover -1)) (if (< (value Player Mover) 1) (and (set Value Mover (+ 1 (value Player Mover))) (moveAgain)) (set Value Mover -1))))))) (piece "HeavenlyTetrarch" (or {(move Step N (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) S (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step E (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) W (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step S (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) N (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step W (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) E (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Slide (directions {FR FL BR BL Forward Backward}) (between if:(or (is Empty (between)) (is In (between) (sites Around (from))))) (to if:(and (not (is In (to) (sites Around (from)))) (is Enemy (who at:(to)))) (apply if:(not (is In (to) (sites Around (from)))) (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (directions {Rightward Leftward}) (between (max 3) if:(or (is Empty (between)) (is In (between) (sites Around (from))))) (to if:(and (not (is In (to) (sites Around (from)))) (is Enemy (who at:(to)))) (apply if:(not (is In (to) (sites Around (from)))) (if (is Enemy (who at:(to))) (remove (to))))))})) (piece "WaterBuffalo" (or (move Slide (directions {FR FL BR BL Rightward Leftward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (directions {Forward Backward}) (between (max 2)) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "ChariotSoldier" (or (move Slide (directions {FR FL BR BL Forward Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (directions {Rightward Leftward}) (between (max 2)) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "SideSoldier" (or {(move Slide (directions {Rightward Leftward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide Forward (between (max 2)) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Step Backward (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))} (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "VerticalSoldier" (or {(move Slide Forward (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (directions {Rightward Leftward}) (between (max 2)) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Step Backward (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))))} (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Knight" (forEach Direction Forward (to if:True (apply (forEach Direction (from (to)) (directions {FR FL}) (if (not (is Friend (who at:(to)))) (move (from) (to (apply (if (is Enemy (who at:(to))) (remove (to)))))))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "IronGeneral" (move Step (directions {Forward FR FL}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "FreeEagle" (or {(move Slide Adjacent (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Step NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))))})) (piece "LionHawk" (or {(move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) N (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) S (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) E (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) W (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) NW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SW (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Step Adjacent (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (step (from (last To)) SE (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))))) (move Hop Adjacent (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))})) (piece "Queen" (move Slide Adjacent (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Phoenix" (or (move Step Orthogonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Hop Diagonal (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "Kirin" (or (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Hop Orthogonal (between if:True) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "FreeBoar" (move Slide (directions {FR FL BR BL Rightward Leftward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "FlyingOx" (move Slide (directions {FR FL BR BL Forward Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "SideMover" (or (move Step (directions {Forward Backward}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Slide (directions {Rightward Leftward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "VerticalMover" (or (move Step (directions {Rightward Leftward}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (move Slide (directions {Forward Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "CopperGeneral" (move Step (directions {Forward Backward FR FL}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "SilverGeneral" (move Step (directions {Forward BR BL FR FL}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "MultiGeneral" (move Slide (directions {Forward BR BL}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "FlyingStag" (or (move Slide (directions {Forward Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Step (directions {Rightward Leftward BR BL FR FL}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))))) (piece "Dog" (move Step (directions {BR BL Forward}) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "BlindTiger" (move Step (difference Adjacent (directions {Forward})) (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "WhiteHorse" (move Slide (directions {Forward FR FL Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Whale" (move Slide (directions {Forward BR BL Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Lance" (move Slide Forward (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (piece "ReverseChariot" (move Slide (directions {Forward Backward}) (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (and (= (state at:(last To)) 0) (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion")))) (moveAgain))))) (regions "Promotion" P1 (expand (sites Top) steps:4)) (regions "Promotion" P2 (expand (sites Bottom) steps:4)) (map "Promoted" {(pair (id "FerociousLeopard" P1) (id "Bishop" P1)) (pair (id "FerociousLeopard" P2) (id "Bishop" P2)) (pair (id "Bishop" P1) (id "DragonHorse" P1)) (pair (id "Bishop" P2) (id "DragonHorse" P2)) (pair (id "DragonHorse" P1) (id "HornedFalcon" P1)) (pair (id "DragonHorse" P2) (id "HornedFalcon" P2)) (pair (id "HornedFalcon" P1) (id "BishopGeneral" P1)) (pair (id "HornedFalcon" P2) (id "BishopGeneral" P2)) (pair (id "BishopGeneral" P1) (id "ViceGeneral" P1)) (pair (id "BishopGeneral" P2) (id "ViceGeneral" P2)) (pair (id "Knight" P1) (id "SideSoldier" P1)) (pair (id "Knight" P2) (id "SideSoldier" P2)) (pair (id "SideSoldier" P1) (id "WaterBuffalo" P1)) (pair (id "SideSoldier" P2) (id "WaterBuffalo" P2)) (pair (id "WaterBuffalo" P1) (id "FireDemon" P1)) (pair (id "WaterBuffalo" P2) (id "FireDemon" P2)) (pair (id "Phoenix" P1) (id "Queen" P1)) (pair (id "Phoenix" P2) (id "Queen" P2)) (pair (id "Queen" P1) (id "FreeEagle" P1)) (pair (id "Queen" P2) (id "FreeEagle" P2)) (pair (id "CopperGeneral" P1) (id "SideMover" P1)) (pair (id "CopperGeneral" P2) (id "SideMover" P2)) (pair (id "SideMover" P1) (id "FreeBoar" P1)) (pair (id "SideMover" P2) (id "FreeBoar" P2)) (pair (id "Dog" P1) (id "MultiGeneral" P1)) (pair (id "Dog" P2) (id "MultiGeneral" P2)) (pair (id "Lance" P1) (id "WhiteHorse" P1)) (pair (id "Lance" P2) (id "WhiteHorse" P2)) (pair (id "DrunkenElephant" P1) (id "Prince" P1)) (pair (id "DrunkenElephant" P2) (id "Prince" P2)) (pair (id "Pawn" P1) (id "GoldGeneral" P1)) (pair (id "Pawn" P2) (id "GoldGeneral" P2)) (pair (id "GoldGeneral" P1) (id "Rook" P1)) (pair (id "GoldGeneral" P2) (id "Rook" P2)) (pair (id "Rook" P1) (id "DragonKing" P1)) (pair (id "Rook" P2) (id "DragonKing" P2)) (pair (id "DragonKing" P1) (id "SoaringEagle" P1)) (pair (id "DragonKing" P2) (id "SoaringEagle" P2)) (pair (id "SoaringEagle" P1) (id "RookGeneral" P1)) (pair (id "SoaringEagle" P2) (id "RookGeneral" P2)) (pair (id "RookGeneral" P1) (id "GreatGeneral" P1)) (pair (id "RookGeneral" P2) (id "GreatGeneral" P2)) (pair (id "IronGeneral" P1) (id "VerticalSoldier" P1)) (pair (id "IronGeneral" P2) (id "VerticalSoldier" P2)) (pair (id "VerticalSoldier" P1) (id "ChariotSoldier" P1)) (pair (id "VerticalSoldier" P2) (id "ChariotSoldier" P2)) (pair (id "ChariotSoldier" P1) (id "HeavenlyTetrarch" P1)) (pair (id "ChariotSoldier" P2) (id "HeavenlyTetrarch" P2)) (pair (id "Kirin" P1) (id "Lion" P1)) (pair (id "Kirin" P2) (id "Lion" P2)) (pair (id "Lion" P1) (id "LionHawk" P1)) (pair (id "Lion" P2) (id "LionHawk" P2)) (pair (id "SilverGeneral" P1) (id "VerticalMover" P1)) (pair (id "SilverGeneral" P2) (id "VerticalMover" P2)) (pair (id "VerticalMover" P1) (id "FlyingOx" P1)) (pair (id "VerticalMover" P2) (id "FlyingOx" P2)) (pair (id "BlindTiger" P1) (id "FlyingStag" P1)) (pair (id "BlindTiger" P2) (id "FlyingStag" P2)) (pair (id "ReverseChariot" P1) (id "Whale" P1)) (pair (id "ReverseChariot" P2) (id "Whale" P2))})}) (rules (start {(place "Lance1" (sites {"A1" "P1"})) (place "Lance2" (sites {"A16" "P16"})) (place "Knight1" (sites {"B1" "O1"})) (place "Knight2" (sites {"B16" "O16"})) (place "FerociousLeopard1" (sites {"C1" "N1"})) (place "FerociousLeopard2" (sites {"C16" "N16"})) (place "IronGeneral1" (sites {"D1" "M1"})) (place "IronGeneral2" (sites {"D16" "M16"})) (place "CopperGeneral1" (sites {"E1" "L1"})) (place "CopperGeneral2" (sites {"E16" "L16"})) (place "SilverGeneral1" (sites {"F1" "K1"})) (place "SilverGeneral2" (sites {"F16" "K16"})) (place "GoldGeneral1" (sites {"G1" "J1"})) (place "GoldGeneral2" (sites {"G16" "J16"})) (place "King1" (sites {"H1"})) (place "King2" (sites {"I16"})) (place "DrunkenElephant1" (sites {"I1"})) (place "DrunkenElephant2" (sites {"H16"})) (place "ReverseChariot1" (sites {"A2" "P2"})) (place "ReverseChariot2" (sites {"A15" "P15"})) (place "ChariotSoldier1" (sites {"C2" "N2" "D2" "M2"})) (place "ChariotSoldier2" (sites {"C15" "N15" "D15" "M15"})) (place "BlindTiger1" (sites {"F2" "K2"})) (place "BlindTiger2" (sites {"F15" "K15"})) (place "Kirin1" (sites {"G2"})) (place "Kirin2" (sites {"J15"})) (place "Lion1" (sites {"H2"})) (place "Lion2" (sites {"I15"})) (place "Queen1" (sites {"I2"})) (place "Queen2" (sites {"H15"})) (place "Phoenix1" (sites {"J2"})) (place "Phoenix2" (sites {"G15"})) (place "SideSoldier1" (sites {"A3" "P3"})) (place "SideSoldier2" (sites {"A14" "P14"})) (place "VerticalSoldier1" (sites {"B3" "O3"})) (place "VerticalSoldier2" (sites {"B14" "O14"})) (place "Bishop1" (sites {"C3" "N3"})) (place "Bishop2" (sites {"C14" "N14"})) (place "DragonHorse1" (sites {"D3" "M3"})) (place "DragonHorse2" (sites {"D14" "M14"})) (place "DragonKing1" (sites {"E3" "L3"})) (place "DragonKing2" (sites {"E14" "L14"})) (place "WaterBuffalo1" (sites {"F3" "K3"})) (place "WaterBuffalo2" (sites {"F14" "K14"})) (place "FireDemon1" (sites {"G3" "J3"})) (place "FireDemon2" (sites {"G14" "J14"})) (place "LionHawk1" (sites {"H3"})) (place "LionHawk2" (sites {"I14"})) (place "FreeEagle1" (sites {"I3"})) (place "FreeEagle2" (sites {"H14"})) (place "SideMover1" (sites {"A4" "P4"})) (place "SideMover2" (sites {"A13" "P13"})) (place "VerticalMover1" (sites {"B4" "O4"})) (place "VerticalMover2" (sites {"B13" "O13"})) (place "Rook1" (sites {"C4" "N4"})) (place "Rook2" (sites {"C13" "N13"})) (place "HornedFalcon1" (sites {"D4" "M4"})) (place "HornedFalcon2" (sites {"D13" "M13"})) (place "SoaringEagle1" (sites {"E4" "L4"})) (place "SoaringEagle2" (sites {"E13" "L13"})) (place "BishopGeneral1" (sites {"F4" "K4"})) (place "BishopGeneral2" (sites {"F13" "K13"})) (place "RookGeneral1" (sites {"G4" "J4"})) (place "RookGeneral2" (sites {"G13" "J13"})) (place "GreatGeneral1" (sites {"H4"})) (place "GreatGeneral2" (sites {"I13"})) (place "ViceGeneral1" (sites {"I4"})) (place "ViceGeneral2" (sites {"H13"})) (place "Pawn1" (sites Row 4)) (place "Pawn2" (sites Row 11)) (place "Dog1" (sites {"E6" "L6"})) (place "Dog2" (sites {"E11" "L11"}))}) (play (if (is Prev Mover) (or (if (= (what at:(last To)) (id "ViceGeneral" Mover)) (forEach Piece "ViceGeneral") (if (= (what at:(last To)) (id "FireDemon" Mover)) (forEach Piece "FireDemon") (move Promote (last To) (piece (mapEntry "Promoted" (what at:(last To)))) (then (set State at:(last To) 1))))) (move Pass (then (set Value Mover -1)))) (forEach Piece) (then (if (!= 0 (count Sites in:(intersection (sites Around (last To)) (sites Occupied by:Next component:"FireDemon")))) (and (remove (last To)) (set Value Mover -1)))))) (end (if (and {(not (is Mover Next)) (= (where "King" Next) -1) (= (where "Prince" Next) -1)}) (result Mover Win))))) 