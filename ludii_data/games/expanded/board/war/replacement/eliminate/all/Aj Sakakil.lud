(game "Aj Sakakil" (players 6) (equipment {(board (rectangle 1 20) {(track "Track1" {19 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P1 directed:True) (track "Track2" {20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P2 directed:True) (track "Track3" {21 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P3 directed:True) (track "Track4" {22 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P4 directed:True) (track "Track5" {23 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P5 directed:True) (track "Track6" {24 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P6 directed:True)} use:Edge) (regions "AllSites" (sites Board Vertex)) (piece "Stick" Each (forEach Value (values Remembered "Throws") (or (if (= 0 (state at:(from) level:(level))) (if (= (trackSite Move from:(from) steps:(value)) -1) (move (from (from) level:(level)) (to (handSite Mover) (apply (forget Value "Throws" (value))))) (move (from (from) level:(level) if:(if (is In (from) (sites Hand Mover)) (< (count Pieces Mover in:(sites Board)) 1) True)) (to (trackSite Move from:(from) steps:(value)) (apply (forget Value "Throws" (value)))) (then (if (is In (last To) (sites Occupied by:Enemy top:False)) (forEach Level (last To) FromTop (and (if (is Enemy (who at:(last To) level:(level))) (set State at:(last To) level:(level) 2)) (if (is Friend (who at:(last To) level:(level))) (set State at:(last To) level:(level) 1))))))))) (if (= 1 (state at:(from) level:(level))) (if (= (trackSite Move from:(from) steps:(value)) -1) (do (forget Value "Throws" (value)) next:(move Remove (from) level:(level) (then (and {(forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0))) (forEach Level (last From) FromTop (if (= 2 (state at:(last From) level:(level))) (remove (last From) level:(level)))) (add (piece (id "Stick" Mover)) (to (handSite Mover)))})))) (move (from (from) level:(level)) (to (trackSite Move from:(from) steps:(value)) (apply (forget Value "Throws" (value)))) (then (and (forEach Level (last From) FromTop (if (= 2 (state at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To))))) (forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0))))))))))) (dice d:2 from:0 num:4) (hand Each)}) (rules (start {(set Team 1 {P1 P2 P3}) (set Team 2 {P4 P5 P6}) (place Stack "Stick1" (handSite P1) count:5) (place Stack "Stick2" (handSite P2) count:5) (place Stack "Stick3" (handSite P3) count:5) (place Stack "Stick4" (handSite P4) count:5) (place Stack "Stick5" (handSite P5) count:5) (place Stack "Stick6" (handSite P6) count:5)}) phases:{(phase "ThrowPhase" (play (do (roll) next:(move Pass (then (if (not (no Pieces Mover)) (and {(if (!= 0 (count Pips)) (do (remember Value "Throws" (count Pips)) ifAfterwards:(can Move (or (forEach Piece container:(mover)) (forEach Piece))))) (moveAgain) (if (is Prev Mover) (set Pending))})))))) (nextPhase (is Pending) "MovePhase")) (phase "MovePhase" (play (or (forEach Piece) (forEach Piece container:(mover)) (then (if (< 0 (size Array (values Remembered "Throws"))) (moveAgain))))) (nextPhase (= 0 (size Array (values Remembered "Throws"))) "ThrowPhase"))} (end (if (no Pieces Enemy) (result TeamMover Win))))) 