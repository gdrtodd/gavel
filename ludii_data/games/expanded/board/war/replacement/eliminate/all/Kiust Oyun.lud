(game "Kiust Oyun" (players 2) (equipment {(board (merge {(scale 2 1 (rectangle 12 2)) (shift 2 0 (scale 4 1 (rectangle 12 2))) (shift 6 0 (scale 2 1 (rectangle 12 2)))}) {(track "Track1" "22,S,E1,N,E1,S" P1 directed:True) (track "Track2" "47,S,W1,N,W1,S" P2 directed:True) (track "LoopTrack1" "1,N,E1,S" loop:True P1) (track "LoopTrack2" "24,N,W1,S" loop:True P2)} use:Vertex) (dice d:2 from:0 num:4) (piece "Marker" Each (if (is In (from) (difference (sites Board) (union (sites Left) (sites Right)))) (move (from (from)) (to (trackSite Move "LoopTrack" steps:(mapEntry "Throw" (count Pips))) if:(and {(if (is Enemy (who at:(to))) (= 2 (mapEntry "Throw" (count Pips))) (is Empty (to))) (if (is In (to) (sites Next "Home")) (= 1 (var "Kiust")) True) (if (or (and (= 2 (mapEntry "Throw" (count Pips))) (is Enemy (who at:(to)))) (= 3 (mapEntry "Throw" (count Pips)))) True (all Sites (sites Track from:(trackSite Move from:(from) "LoopTrack" steps:1) to:(trackSite Move from:(from) "LoopTrack" steps:(- (mapEntry "Throw" (count Pips)) 1))) if:(not (is Enemy (who at:(site))))))}) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move (from (from)) (to (trackSite Move "Track" steps:(mapEntry "Throw" (count Pips))) if:(and {(if (is In (to) (difference (sites Board) (union (sites Left) (sites Right)))) (if (is Enemy (who at:(to))) (= 2 (mapEntry "Throw" (count Pips))) (is Empty (to))) (is Empty (to))) (if (is In (to) (sites Next "Home")) (= 1 (var "Kiust")) True) (if (or (and (= 2 (mapEntry "Throw" (count Pips))) (is Enemy (who at:(to)))) (= 3 (mapEntry "Throw" (count Pips)))) True (all Sites (sites Track from:(trackSite Move from:(from) "Track" steps:1) to:(trackSite Move from:(from) "Track" steps:(- (mapEntry "Throw" (count Pips)) 1))) if:(not (is Enemy (who at:(site))))))}) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (then (and (if (= (count Pips) 4) (and (if (!= 1 (value Player Mover)) (moveAgain)) (if (<= (value Player Mover) 0) (set Value Mover 3) (set Value Mover (- (value Player Mover) 1))))) (set Var "Kiust" 0))))) (map "Throw" {(pair 0 0) (pair 3 6) (pair 2 3) (pair 1 2) (pair 4 6)}) (regions "Home" P1 (expand (sites Left))) (regions "Home" P2 (expand (sites Right)))}) (rules (start {(place "Marker1" (sites Left)) (place "Marker2" (sites Right))}) (play (do (if (or (= (var "Kiust") 1) (not (is Prev Mover))) (roll)) next:(if (= 0 (mapEntry "Throw" (count Pips))) (move Pass (then (and (moveAgain) (set Var "Kiust" 1)))) (forEach Piece)))) (end (if (no Pieces Next) (result Next Loss))))) 