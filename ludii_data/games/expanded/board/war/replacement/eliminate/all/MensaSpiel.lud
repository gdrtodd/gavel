(game "MensaSpiel" (players 2) (equipment {(board (remove (rectangle 5 7) cells:{2 4 7 8 9 11 12 13 17 31})) (regions "Base" P1 {13}) (regions "Base" P2 {17}) (regions "Prison" P1 {0}) (regions "Prison" P2 {4}) (regions "Reserve" P1 {1}) (regions "Reserve" P2 {3}) (regions "HomeRing" P1 {6 7 8 12 14 19 20 21}) (regions "HomeRing" P2 {9 10 11 16 18 22 23 24}) (regions "SitesLastMan" P1 {6 9 16 21 22}) (regions "SitesLastMan" P2 {7 9 14 21 22}) (regions "Rings" {6 7 8 9 10 11 12 14 16 18 19 20 21 22 23 24}) (regions "RingsplusT" {6 7 8 9 10 11 12 14 15 16 18 19 20 21 22 23 24}) (regions "RingsplusBase" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24}) (map "PipsP1" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {4 1 3 2 2 1 2 0 3 0 1 0 1 3 2 2 2 0 3}) (map "PipsP2" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {0 3 1 2 2 3 2 0 1 0 3 0 3 1 2 2 2 4 1}) (map "Attacks1" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 23 9 12 8 6 9 0 16 0 7 0 12 11 11 16 7 21 6}) (map "Attacks2" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 18 22 14 19 19 24 0 23 0 14 0 20 24 22 18 20 21 8}) (map "SameColor" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 24 18 20 21 14 22 0 11 0 19 0 8 16 9 10 12 6 7}) (map "Step1c" {14 16} {15 15}) (map "Step2a" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {19 14 6 22 18 24 20 0 20 0 23 0 23 21 14 19 24 18 11}) (map "Step2b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {8 12 21 11 16 9 7 0 7 0 10 0 10 6 12 8 9 16 22}) (map "Step2c" {8 14 21 16 9 22} {15 16 15 14 15 15}) (map "Step3a" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {20 19 12 23 22 23 21 0 19 0 24 0 9 14 8 12 10 9 10}) (map "Step3b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {14 21 20 18 24 16 8 0 6 0 11 0 22 7 6 7 18 11 16}) (map "Step3c" {7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23} {15 16 14 15 0 0 0 22 0 8 0 0 0 15 16 14 15}) (map "Step3d" {14 16} {9 21}) (map "Step4a" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {21 20 19 24 23 22 14 0 12 0 18 0 16 8 7 6 11 10 9}) (map "Step4b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {15 16 9 8 14 15 0 0 10 0 7 0 0 15 16 9 8 14 15}) (map "Step4c" {8 14 21 9 16 22} {22 23 22 21 20 21}) (map "Step5c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {16 9 10 7 8 14 15 0 11 0 6 0 15 16 9 10 7 8 14}) (map "Step5d" {7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23} {22 23 20 21 0 0 0 24 0 19 0 0 0 22 23 20 21}) (map "Step6c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {9 10 11 6 7 8 16 0 18 0 12 0 14 9 10 11 6 7 8}) (map "Step6d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {22 23 24 19 20 21 0 0 0 0 0 0 0 22 23 24 19 20 21}) (map "Step6e" {6 19 11 24} {15 15 15 15}) (map "Step7a" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {7 8 14 10 11 18 6 0 8 0 9 0 11 12 19 14 16 22 18}) (map "Step7b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {12 6 7 16 9 10 19 0 21 0 22 0 24 20 21 20 23 24 23}) (map "Step7c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 11 18 12 6 7 9 0 11 0 6 0 8 10 11 18 12 6 7}) (map "Step7d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 24 0 0 19 20 22 0 24 0 19 0 21 23 24 0 0 19 20}) (map "Step7e" {6 19 7 20 10 23 11 24} {16 16 15 15 15 15 14 14}) (map "Step8a" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {11 18 11 6 12 6 10 0 10 0 7 0 7 11 18 11 6 12 6}) (map "Step8b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {24 16 24 19 14 19 23 0 23 0 20 0 20 24 16 24 19 14 19}) (map "Step8c" {6 19 8 21 9 22 11 24} {9 9 15 15 15 15 8 8}) (map "Step8d" {6 19 11 24} {22 22 21 21}) (map "Step9c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {18 11 10 7 6 12 11 0 9 0 8 0 6 18 11 10 7 6 12}) (map "Step9d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 24 23 20 19 7 24 0 22 0 21 0 19 23 24 23 20 19 7}) (map "Step9e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 9 16 14 8 20 0 0 15 0 15 0 0 10 9 16 14 8 20}) (map "Step9f" {20 7 10 23} {22 22 21 21}) (map "Step10c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {11 10 9 8 7 6 18 0 16 0 14 0 12 11 10 9 8 7 6}) (map "Step10d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {24 23 22 21 20 19 0 0 0 0 0 0 0 24 23 22 21 20 19}) (map "Step10e" {21 8 9 22} {15 15 15 15}) (map "Step11c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 11 10 7 6 7 11 0 9 0 8 0 6 10 11 10 7 6 7}) (map "Step11d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 24 23 20 19 20 24 0 22 0 21 0 19 23 24 23 20 19 20}) (map "Step11e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {18 9 16 14 8 12 0 0 15 0 15 0 0 18 9 16 14 8 12}) (map "Step11f" {7 10 20 23} {22 21 22 21}) (map "Step11g" {7 10 20 23} {15 15 15 15}) (map "Step12b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {11 18 11 6 12 6 10 0 10 0 7 0 7 11 18 11 6 12 6}) (map "Step12c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {24 16 24 19 14 19 23 0 23 0 20 0 20 24 16 24 19 14 19}) (map "Step12d" {6 19 8 21 9 22 11 24} {9 9 9 9 8 8 8 8}) (map "Step12e" {6 19 8 21 9 22 11 24} {22 22 22 22 21 21 21 21}) (map "Step12f" {6 19 8 21 9 22 11 24} {15 15 15 15 15 15 15 15}) (map "Step12g" {14 16} {11 19}) (map "Step13c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 11 10 7 6 7 9 0 11 0 6 0 8 10 11 10 7 6 7}) (map "Step13d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 24 23 20 19 20 22 0 24 0 19 0 21 23 24 23 20 19 20}) (map "Step13e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {16 9 14 16 8 14 15 0 8 0 9 0 15 16 9 14 16 8 14}) (map "Step13f" {7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23} {22 18 12 21 0 0 0 21 0 22 0 0 0 22 18 12 21}) (map "Step14c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {9 10 11 6 7 8 16 0 18 0 12 0 14 9 10 11 6 7 8}) (map "Step14d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {22 23 24 19 20 21 0 0 0 0 0 0 0 22 23 24 19 20 21}) (map "Step14e" {6 19 11 24} {15 15 15 15}) (map "Step14f" {8 9 21 22} {18 20 10 12}) (map "Step15c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 11 18 12 6 7 9 0 11 0 11 0 8 10 11 18 12 6 7}) (map "Step15d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 24 20 23 19 20 22 0 24 0 24 0 21 23 24 7 10 19 20}) (map "Step15e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {16 21 10 7 22 16 15 0 6 0 6 0 15 16 8 10 7 9 16}) (map "Step15f" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {14 9 23 20 8 14 0 0 19 0 19 0 0 14 9 23 20 8 14}) (map "Step16c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {9 20 15 15 23 8 14 0 12 0 18 0 16 9 7 15 15 10 8}) (map "Step16d" {6 19 8 21 9 22 11 24} {22 22 6 6 11 11 21 21}) (map "Step16e" {6 19 8 21 9 22 11 24} {8 8 9 9 8 8 9 9}) (map "Step16f" {6 19 8 21 9 22 11 24} {21 21 19 19 21 21 22 22}) (map "Step16g" {6 19 8 21 9 22 11 24} {15 15 22 22 24 24 15 15}) (map "Step17c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 11 10 7 6 7 8 0 6 0 11 0 6 10 6 10 7 6 7}) (map "Step17d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 9 12 14 8 12 11 0 9 0 8 0 9 23 9 12 14 8 10}) (map "Step17e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {18 15 16 18 15 16 21 0 15 0 15 0 19 18 11 16 18 11 16}) (map "Step17f" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {14 19 23 20 19 20 24 0 19 0 21 0 22 14 15 23 20 15 12}) (map "Step17g" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {20 22 0 0 21 23 0 0 22 0 24 0 0 7 22 0 0 19 20}) (map "Step17h" {7 10 20 23} {24 24 24 21}) (map "Step18c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {11 10 9 8 7 6 18 0 16 0 14 0 12 8 10 6 8 7 6}) (map "Step18d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {21 23 15 15 20 19 0 0 0 0 0 0 0 11 23 9 11 20 9}) (map "Step18e" {6 19 8 21 22 9 11 24} {24 24 19 15 15 21 22 19}) (map "Step18f" {8 21 22 9} {22 22 21 24}) (map "Step18g" {6 19 11 24} {23 16 14 7}) (map "Step19c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {7 6 7 7 6 7 6 0 8 0 8 0 6 10 9 10 7 6 7}) (map "Step19d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {10 8 10 10 8 10 11 0 9 0 9 0 11 12 11 14 14 8 12}) (map "Step19e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {12 9 14 14 9 12 19 0 15 0 15 0 19 18 15 16 16 15 18}) (map "Step19f" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {18 11 16 16 11 18 24 0 21 0 21 0 24 20 19 20 20 19 20}) (map "Step19g" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {23 15 23 20 15 20 0 0 22 0 22 0 0 23 21 23 23 21 23}) (map "Step19h" {7 10 20 23} {22 19 22 22}) (map "Step19i" {7 10 20 23} {24 21 24 24}) (map "Step20b" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {9 16 9 6 12 6 10 0 10 0 7 0 7 6 16 8 6 12 6}) (map "Step20c" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {11 18 11 8 14 8 23 0 23 0 20 0 20 9 18 9 8 14 8}) (map "Step20d" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {15 0 15 15 0 15 0 0 0 0 0 0 0 11 0 11 9 0 11}) (map "Step20e" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {19 0 21 19 0 19 0 0 0 0 0 0 0 15 0 15 15 0 15}) (map "Step20f" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {22 0 22 21 0 21 0 0 0 0 0 0 0 22 0 22 19 0 19}) (map "Step20g" {6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24} {24 0 24 22 0 24 0 0 0 0 0 0 0 24 0 24 21 0 21}) (piece "Prisoner" Each (if (and (no Pieces in:(sites Mover "Base")) (not (no Pieces in:(sites Mover "Reserve")))) (move (from) (to (sites Mover "Base"))) (then (and {(promote (last To) (piece "Starter") Mover) (remove (sites Mover "Reserve")) (add (piece (id "Reserve" Next)) (to (sites Next "Reserve")) stack:True) (moveAgain)})))) (piece "Starter" Each (if (= 1 (var "StartS")) (move (from (sites Mover "Base")) (to (difference (sites Mover "HomeRing") (mapEntry "SameColor" (last To)))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))}))) (if (and (= 2 (var "StartS")) (= 1 (var "CntrAttack"))) (move (from (sites Mover "Base")) (to (intersection (sites "Rings") (sites Empty))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))}))) (move (from (sites Mover "Base")) (to (intersection (sites Mover "HomeRing") (sites Empty))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))})))))) (piece "Reserve" Each) (piece "Cone" Each (if (and {(no Pieces in:(sites Mover "Base")) (= 1 (count Pieces in:(intersection (sites "Rings") (sites Occupied by:Mover)))) (= 1 (size Stack at:(regionSite (intersection (sites Occupied by:Mover) (sites Mover "SitesLastMan")) index:0))) (not (no Pieces in:(sites Mover "Reserve")))}) (or (move (from) (to 15) (then (and {(set Var "CntrAttack" 0) (set Score Mover 0) (remove 15) (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:2 stack:True)}))) (if (< (score Mover) 16) (if (< (score Mover) 8) (if (< (score Mover) 4) (if (< (score Mover) 2) (if (= (score Mover) 1) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step1c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step1c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 2) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step2c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step3c" (from)) (mapEntry "Step3d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))) (if (< (score Mover) 6) (if (= (score Mover) 4) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step4b" (from)) (mapEntry "Step4c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step5c" (from)) (mapEntry "Step5d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step5c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step5d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 6) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step6c" (from)) (mapEntry "Step6d" (from)) (mapEntry "Step6e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step7c" (from)) (mapEntry "Step7d" (from)) (mapEntry "Step7e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))))) (if (< (score Mover) 12) (if (< (score Mover) 10) (if (= (score Mover) 8) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step8a" (from)) (mapEntry "Step8b" (from)) (mapEntry "Step8c" (from)) (mapEntry "Step8d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step9c" (from)) (mapEntry "Step9d" (from)) (mapEntry "Step9e" (from)) (mapEntry "Step9f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 10) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step10c" (from)) (mapEntry "Step10d" (from)) (mapEntry "Step10e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step11c" (from)) (mapEntry "Step11d" (from)) (mapEntry "Step11e" (from)) (mapEntry "Step11f" (from)) (mapEntry "Step11g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))) (if (< (score Mover) 14) (if (= (score Mover) 12) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step12b" (from)) (mapEntry "Step12c" (from)) (mapEntry "Step12d" (from)) (mapEntry "Step12e" (from)) (mapEntry "Step12f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step12g" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step13c" (from)) (mapEntry "Step13d" (from)) (mapEntry "Step13e" (from)) (mapEntry "Step13f" (from)) (mapEntry "Step11g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 14) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step14c" (from)) (mapEntry "Step14d" (from)) (mapEntry "Step14e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step14f" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step15c" (from)) (mapEntry "Step15d" (from)) (mapEntry "Step15e" (from)) (mapEntry "Step15f" (from)) (mapEntry "Step11f" (from)) (mapEntry "Step11g" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))))) (if (< (score Mover) 20) (if (< (score Mover) 18) (if (= (score Mover) 16) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step8a" (from)) (mapEntry "Step8b" (from)) (mapEntry "Step16c" (from)) (mapEntry "Step16d" (from)) (mapEntry "Step16e" (from)) (mapEntry "Step16f" (from)) (mapEntry "Step16g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step17c" (from)) (mapEntry "Step17d" (from)) (mapEntry "Step17e" (from)) (mapEntry "Step17f" (from)) (mapEntry "Step17g" (from)) (mapEntry "Step17h" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17h" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 18) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step18c" (from)) (mapEntry "Step18d" (from)) (mapEntry "Step18e" (from)) (mapEntry "Step18f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step18g" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (and (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step19c" (from)) (mapEntry "Step19d" (from)) (mapEntry "Step19e" (from)) (mapEntry "Step19f" (from)) (mapEntry "Step19g" (from)) (mapEntry "Step19h" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19h" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step19i" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19i" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))))) (if (= 20 (score Mover)) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step20b" (from)) (mapEntry "Step20c" (from)) (mapEntry "Step20d" (from)) (mapEntry "Step20e" (from)) (mapEntry "Step20f" (from)) (mapEntry "Step20g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))))) (if (< (score Mover) 16) (if (< (score Mover) 8) (if (< (score Mover) 4) (if (< (score Mover) 2) (if (= (score Mover) 1) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step1c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step1c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 2) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step2c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step3c" (from)) (mapEntry "Step3d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))) (if (< (score Mover) 6) (if (= (score Mover) 4) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step4b" (from)) (mapEntry "Step4c" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step5c" (from)) (mapEntry "Step5d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step5c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step5d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 6) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step6c" (from)) (mapEntry "Step6d" (from)) (mapEntry "Step6e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step6e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step7c" (from)) (mapEntry "Step7d" (from)) (mapEntry "Step7e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))))) (if (< (score Mover) 12) (if (< (score Mover) 10) (if (= (score Mover) 8) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step8a" (from)) (mapEntry "Step8b" (from)) (mapEntry "Step8c" (from)) (mapEntry "Step8d" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step9c" (from)) (mapEntry "Step9d" (from)) (mapEntry "Step9e" (from)) (mapEntry "Step9f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step9f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 10) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step10c" (from)) (mapEntry "Step10d" (from)) (mapEntry "Step10e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step10e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step11c" (from)) (mapEntry "Step11d" (from)) (mapEntry "Step11e" (from)) (mapEntry "Step11f" (from)) (mapEntry "Step11g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))) (if (< (score Mover) 14) (if (= (score Mover) 12) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step12b" (from)) (mapEntry "Step12c" (from)) (mapEntry "Step12d" (from)) (mapEntry "Step12e" (from)) (mapEntry "Step12f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step12f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step12g" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step13c" (from)) (mapEntry "Step13d" (from)) (mapEntry "Step13e" (from)) (mapEntry "Step13f" (from)) (mapEntry "Step11g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step13f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 14) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step14c" (from)) (mapEntry "Step14d" (from)) (mapEntry "Step14e" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step14e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step14f" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step15c" (from)) (mapEntry "Step15d" (from)) (mapEntry "Step15e" (from)) (mapEntry "Step15f" (from)) (mapEntry "Step11f" (from)) (mapEntry "Step11g" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step15f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step11g" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))))) (if (< (score Mover) 20) (if (< (score Mover) 18) (if (= (score Mover) 16) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step8a" (from)) (mapEntry "Step8b" (from)) (mapEntry "Step16c" (from)) (mapEntry "Step16d" (from)) (mapEntry "Step16e" (from)) (mapEntry "Step16f" (from)) (mapEntry "Step16g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step8b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step16g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step7a" (from)) (mapEntry "Step7b" (from)) (mapEntry "Step17c" (from)) (mapEntry "Step17d" (from)) (mapEntry "Step17e" (from)) (mapEntry "Step17f" (from)) (mapEntry "Step17g" (from)) (mapEntry "Step17h" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step7b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step17h" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))) (if (= (score Mover) 18) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step2a" (from)) (mapEntry "Step2b" (from)) (mapEntry "Step18c" (from)) (mapEntry "Step18d" (from)) (mapEntry "Step18e" (from)) (mapEntry "Step18f" (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step2b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step18f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "Step18g" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (and (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step3a" (from)) (mapEntry "Step3b" (from)) (mapEntry "Step19c" (from)) (mapEntry "Step19d" (from)) (mapEntry "Step19e" (from)) (mapEntry "Step19f" (from)) (mapEntry "Step19g" (from)) (mapEntry "Step19h" (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step3b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19h" (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step19i" (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step19i" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))})))))) (if (= 20 (score Mover)) (move (from) (to (union {(intersection {(difference (if (= 1 (size Stack at:(from))) (sites "Rings") (sites "RingsplusT")) (from)) (sites Empty) (sites {(mapEntry "Step4a" (from)) (mapEntry "Step20b" (from)) (mapEntry "Step20c" (from)) (mapEntry "Step20d" (from)) (mapEntry "Step20e" (from)) (mapEntry "Step20f" (from)) (mapEntry "Step20g" (from)) (mapEntry (from))})}) (intersection {(sites "Rings") (sites Occupied by:Next) (sites {(mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step4a" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20b" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20c" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20d" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20e" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20f" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry "Step20g" (from))})) index:0)) (mapEntry "SameColor" (arrayValue (intersection (array (sites Empty)) (array {(mapEntry (from))})) index:0)) (mapEntry "SameColor" (from))})})})) stack:True (then (and {(set Var "StartS" 3) (set Var "CntrAttack" 0) (if (= 15 (last To)) (and {(add (piece (id "Starter" Mover)) (to (sites Mover "Base")) count:(count Stack at:(last To) if:(= (id "Cone" Mover) (what at:(to) level:(level)))) stack:True) (add (piece (id "Prisoner" Mover)) (to (sites Mover "Prison")) count:(count Stack at:(last To) if:(= (id "Cone" Next) (what at:(to) level:(level)))) stack:True) (remove 15 count:(count Stack at:(last To)))}) (if (and (is Friend (who at:(mapEntry "SameColor" (last To)))) (not (no Pieces in:(sites Mover "Reserve")))) (and (remove (sites Mover "Reserve")) (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True)))) (set Value at:(last To) (count Stack at:(last To))) (addScore Mover (- (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))) (if (= (id Mover) 1) (mapEntry "PipsP1" (last From)) (mapEntry "PipsP2" (last From))))) (if (> (size Stack at:(last To)) (value Piece at:(last To))) (addScore Next (- 0 (if (= (id Mover) 1) (mapEntry "PipsP2" (last To)) (mapEntry "PipsP1" (last To))))))}))))))))}) (rules (start {(place Stack "Starter1" 13 count:3) (place Stack "Starter2" 17 count:3) (place Stack "Reserve1" 1 count:6) (place Stack "Reserve2" 3 count:6)}) (play (do (if (no Pieces All in:(sites "Rings")) (and {(set Var "StartS" 0) (set Var "CntrAttack" 0)})) next:(if (is Prev Mover) (if (= 1 (var "StartS")) (move (from (sites Mover "Base")) (to (difference (sites Mover "HomeRing") (mapEntry "SameColor" (last To)))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))}))) (if (and (= 2 (var "StartS")) (= 1 (var "CntrAttack"))) (move (from (sites Mover "Base")) (to (intersection (sites "Rings") (sites Empty))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))}))) (move (from (sites Mover "Base")) (to (intersection (sites Mover "HomeRing") (sites Empty))) (then (and {(promote (last To) (piece {"Cone"}) Mover) (set Var "StartS" (+ 1 (var "StartS"))) (if (= 0 (var "StartS")) (set Var "St1Pos" (last To))) (if (and (= 1 (var "StartS")) (or (= (mapEntry "Attacks1" (last To)) (var "St1Pos")) (= (mapEntry "Attacks2" (last To)) (var "St1Pos")))) (set Var "CntrAttack" 1)) (if (> (var "StartS") 2) (set Var "CntrAttack" 0)) (if (and {(is Friend (who at:(mapEntry "SameColor" (last To)))) (!= 1 (var "CntrAttack")) (not (no Pieces in:(sites Mover "Reserve")))}) (and (add (piece (id "Starter" Mover)) (to (sites Mover "Base")) stack:True) (remove (sites Mover "Reserve")))) (set Value at:(last To) 1) (addScore Mover (if (= (id Mover) 1) (mapEntry "PipsP1" (last To)) (mapEntry "PipsP2" (last To))))}))))) (forEach Piece top:True)))) (end {(if (and {(no Moves Next) (= 0 (count Sites in:(intersection (sites Occupied by:Next) (sites "RingsplusBase")))) (< (count Sites in:(sites Occupied by:Next)) 2)}) (result Mover Win)) (if (>= (count Pieces Mover in:(sites "Prison")) 3) (result Mover Win))}))) 