(game "Puluc" (players 2) (equipment {(board (rectangle 1 10) {(track "Track1" {0 1 2 3 4 5 6 7 8} loop:True P1) (track "Track2" {8 7 6 5 4 3 2 1 0} loop:True P2) (track "CaptureTrack1" {8 7 6 5 4 3 2 1 0} P1 directed:True) (track "CaptureTrack2" {0 1 2 3 4 5 6 7 8} P2 directed:True)} use:Edge) (piece "Marker" Each (or (if (= 0 (state at:(from) level:(level))) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(mapEntry "Throw" (count Pips)))) (then (if (is In (last To) (sites Occupied by:Enemy top:False)) (forEach Level (last To) FromTop (and (if (is Enemy (who at:(last To) level:(level))) (set State at:(last To) level:(level) 2)) (if (is Friend (who at:(last To) level:(level))) (set State at:(last To) level:(level) 1)))))))) (if (= 1 (state at:(from) level:(level))) (if (!= (trackSite Move from:(from) "CaptureTrack" steps:(mapEntry "Throw" (count Pips))) -1) (move (from (from) level:(level)) (to (trackSite Move from:(from) "CaptureTrack" steps:(mapEntry "Throw" (count Pips)))) (then (and (forEach Level (last From) FromTop (if (= 2 (state at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To))))) (forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0)))))) (move Remove (from) level:(level) (then (and {(forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0))) (forEach Level (last From) FromTop (if (= 2 (state at:(last From) level:(level))) (remove (last From) level:(level)))) (add (piece (id "Marker" Mover)) (to (handSite Mover)))}))))))) (regions "AllSites" (sites Board Vertex)) (map "Throw" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "Entry" {(pair 1 0) (pair 2 8)}) (dice d:2 from:0 num:4) (hand Each)}) (rules (start {(place Stack "Marker1" (handSite P1) count:5) (place Stack "Marker2" (handSite P2) count:5)}) (play (do (roll) next:(or {(if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" (mover)) "Track" steps:(- (mapEntry "Throw" (count Pips)) 1))))) (forEach Piece)}) (then (if (not (is Prev Mover)) (moveAgain))))) (end {(if (no Pieces P2) (result P2 Loss)) (if (no Pieces P1) (result P1 Loss))}))) 