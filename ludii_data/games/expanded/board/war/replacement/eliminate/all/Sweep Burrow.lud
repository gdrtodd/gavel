(game "Sweep Burrow" (players 2) (equipment {(board (square 8)) (piece "Disc" Each (if (= 0 (count MovesThisTurn)) (or {(move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) N stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to)))) (then (set Var 1))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) E stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to)))) (then (set Var 2))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) S stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to)))) (then (set Var 3))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) W stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to)))) (then (set Var 4))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) E))) if:(and (> (row of:(to)) (row of:(from))) (> (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 5))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) E))) if:(and (< (row of:(to)) (row of:(from))) (> (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 6))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) W))) if:(and (> (row of:(to)) (row of:(from))) (< (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 7))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) W))) if:(and (< (row of:(to)) (row of:(from))) (< (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 8)))}) (if (= 1 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) N stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to))))) (if (= 2 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) E stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to))))) (if (= 3 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) S stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to))))) (if (= 4 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) W stop:(is Occupied (to)) stopIncluded:True) if:(= (next) (who at:(to))) (apply (remove (to))))) (if (= 5 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) E))) (apply (remove (to))))) (if (= 6 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) E))) (apply (remove (to))))) (if (= 7 (var)) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) W))) (apply (remove (to))))) (move (from if:(= (* (from) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 Infinity))) W))) (apply (remove (to)))))))))))) (then (if (< 0 (count Sites in:(if (= 1 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) N stop:(is Occupied (to)) stopIncluded:True)) (if (= 2 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) E stop:(is Occupied (to)) stopIncluded:True)) (if (= 3 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) S stop:(is Occupied (to)) stopIncluded:True)) (if (= 4 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) W stop:(is Occupied (to)) stopIncluded:True)) (if (= 5 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) N) (expand (union (sites {(last To)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) E))) (if (= 6 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) S) (expand (union (sites {(last To)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) E))) (if (= 7 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) N) (expand (union (sites {(last To)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) W))) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) S) (expand (union (sites {(last To)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(last To) (range 1 Infinity))) W)))))))))))) (moveAgain)))))}) (rules (start {(place "Disc1" (forEach (sites Board) if:(or (and (is Even (row of:(site))) (> 2 (% (site) 4))) (and (is Odd (row of:(site))) (< 1 (% (site) 4)))))) (place "Disc2" (forEach (sites Board) if:(or (and (is Odd (row of:(site))) (> 2 (% (site) 4))) (and (is Even (row of:(site))) (< 1 (% (site) 4))))))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss))))) 