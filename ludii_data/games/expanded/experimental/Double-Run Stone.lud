(game "Double-Run Stone" (players 2) (equipment {(board (trim (tri Limping (- 3 1))) use:Vertex) (hand Each size:15) (piece "1Dot" Each) (piece "2Dot" Each) (piece "3Dot" Each)}) (rules (start {(set Score Each 0) (place "3Dot1" (handSite P1 0)) (place "3Dot1" (handSite P1 1)) (place "3Dot1" (handSite P1 2)) (place "2Dot1" (handSite P1 4)) (place "2Dot1" (handSite P1 5)) (place "2Dot1" (handSite P1 6)) (place "2Dot1" (handSite P1 7)) (place "1Dot1" (handSite P1 9)) (place "1Dot1" (handSite P1 10)) (place "1Dot1" (handSite P1 11)) (place "1Dot1" (handSite P1 12)) (place "1Dot1" (handSite P1 13)) (place "3Dot2" (handSite P2 0)) (place "3Dot2" (handSite P2 1)) (place "3Dot2" (handSite P2 2)) (place "2Dot2" (handSite P2 4)) (place "2Dot2" (handSite P2 5)) (place "2Dot2" (handSite P2 6)) (place "2Dot2" (handSite P2 7)) (place "1Dot2" (handSite P2 9)) (place "1Dot2" (handSite P2 10)) (place "1Dot2" (handSite P2 11)) (place "1Dot2" (handSite P2 12)) (place "1Dot2" (handSite P2 13))}) (play (if (= 0 (count Sites in:(sites State 1))) (priority {(or {(move Add (piece (id "1Dot" Mover)) (to (sites Empty) if:(and (< 0 (count Pieces Mover "1Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(= (id "1Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))}))) (move Add (piece (id "2Dot" Mover)) (to (sites Empty) if:(and (< 0 (count Pieces Mover "2Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(= (id "2Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))}))) (move Add (piece (id "3Dot" Mover)) (to (sites Empty) if:(and (< 0 (count Pieces Mover "3Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(= (id "3Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))})))}) (forEach Site (intersection (sites Occupied by:Mover) (sites State 0)) (move Step (from (site)) Orthogonal (to if:(and {(is Empty (to)) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (from)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (from)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (from))))}))})) (then (and (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (set State at:(last To) 2))))) (do (forEach Site (sites State 0) (set State at:(site) 1)) next:(if (no Moves Mover) (move Pass (then (forEach Site (sites State 1) (set State at:(site) 0)))) (move Pass (then (set Score Mover (count Pieces Mover in:(sites Board))))))) (move Pass (then (forEach Site (sites State 0) (set State at:(site) 1))))} (then (and (forEach Group Orthogonal if:(is In (to) (sites Occupied by:Mover)) (if (and {(= 4 (count Sites in:(sites))) (is Within (id "1Dot" Mover) in:(sites)) (is Within (id "2Dot" Mover) in:(sites)) (is Within (id "3Dot" Mover) in:(sites))}) (forEach Site (sites) (and (addScore Mover (if (is Within (id "3Dot" Mover) at:(site)) 3 (if (is Within (id "2Dot" Mover) at:(site)) 1 -1))) (set State at:(site) 1))))) (forEach Group Orthogonal if:(is In (to) (sites Occupied by:Next)) (if (and {(= 4 (count Sites in:(sites))) (is Within (id "1Dot" Next) in:(sites)) (is Within (id "2Dot" Next) in:(sites)) (is Within (id "3Dot" Next) in:(sites))}) (forEach Site (sites) (and (addScore Next (if (is Within (id "3Dot" Next) at:(site)) 6 (if (is Within (id "2Dot" Next) at:(site)) 2 -2))) (set State at:(site) 1)))))))) (if (no Moves Mover) (move Pass (then (forEach Site (sites State 1) (set State at:(site) 0)))) (move Pass (then (set Score Mover (count Pieces Mover in:(sites Board)))))))) (end (if (!= 0 (count Sites in:(sites State 1))) (byScore))))) 