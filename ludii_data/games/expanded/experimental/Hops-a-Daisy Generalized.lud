(game "Hops-a-Daisy Generalized" (players 2) (equipment {(board (hex {4 6 4 6 4}) use:Cell) (piece "Disc" Each) (piece "Hex" Each)}) (rules (start (set Score Each 0)) (play (priority (if (is Prev Mover) (if (is Pending) (or (forEach Piece "Disc" (move Hop (from (last To)) (between if:(is In (between) (difference (intersection (sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Occupied by:All component:"Hex")) (sites (values Remembered)))) (apply (and (addScore (player (who at:(between))) (- 10)) (set Pending (between))))) (to if:(is Empty (to)))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Hex" Mover)) (to (value Pending))) (addScore Mover 10)} (then (and (set Pending) (moveAgain)))))) (forEach Piece "Disc" (move Hop (from (last To)) (between if:(is In (between) (difference (intersection (sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Occupied by:All component:"Disc")) (sites (values Remembered)))) (apply (and (addScore (player (who at:(between))) (- -10)) (set Pending (between))))) (to if:(is Empty (to)))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Disc" Mover)) (to (value Pending))) (addScore Mover -10)} (then (and (set Pending) (moveAgain)))))))) (do (forget Value All) next:(or (forEach Piece "Disc" (move Hop (from) (between if:(is In (between) (difference (intersection (sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Occupied by:All component:"Hex")) (sites (values Remembered)))) (apply (and (addScore (player (who at:(between))) (- 10)) (set Pending (between))))) (to if:(is Empty (to)))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Hex" Mover)) (to (value Pending))) (addScore Mover 10)} (then (and (set Pending) (moveAgain)))))) (forEach Piece "Disc" (move Hop (from) (between if:(is In (between) (difference (intersection (sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Occupied by:All component:"Disc")) (sites (values Remembered)))) (apply (and (addScore (player (who at:(between))) (- -10)) (set Pending (between))))) (to if:(is Empty (to)))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Disc" Mover)) (to (value Pending))) (addScore Mover -10)} (then (and (set Pending) (moveAgain))))))))) (or {(if (is Prev Mover) (or (do (if (= 0 (var "FirstNoPlace")) (set Var "FirstNoPlace" (mover)) (if (= (next) (var "FirstNoPlace")) (and (forEach Player (addScore (player (player)) (% (+ {2 (var "FirstNoPlace") (- (player)) -1}) 2))) (propose "End")))) next:(move Pass)) (move Add (piece (id "Hex" Mover)) (to (forEach (sites Empty) if:(= (count Sites in:(intersection {(sites Occupied by:Mover) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)})) (count Sites in:(intersection {(sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)}))))) (then (and (addScore Mover 10) (set Var "FirstNoPlace" 0))))) (or {(do (if (= 0 (var "FirstNoPlace")) (set Var "FirstNoPlace" (mover)) (if (= (next) (var "FirstNoPlace")) (and (forEach Player (addScore (player (player)) (% (+ {2 (var "FirstNoPlace") (- (player)) -1}) 2))) (propose "End")))) next:(move Pass)) (move Add (piece (id "Hex" Mover)) (to (forEach (sites Empty) if:(= (count Sites in:(intersection {(sites Occupied by:Mover) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)})) (count Sites in:(intersection {(sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)}))))) (then (and (addScore Mover 10) (set Var "FirstNoPlace" 0)))) (if (not (is Prev Mover)) (move Add (piece (id "Disc" Mover)) (to (forEach (difference (sites Empty) (sites To (forEach Site (intersection (sites Occupied by:(player (+ 1 (% (+ (- 2 2) (mover)) 2)))) (sites Occupied by:All component:"Disc")) (select (from (sites Distance from:(site) (exact 2)) if:(is Empty (from))) (to (sites Between from:(from) to:(site))))))) if:(!= (count Sites in:(intersection {(sites Occupied by:Mover) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)})) (count Sites in:(intersection {(sites Occupied by:(player (+ 1 (% (mover) 2)))) (sites Direction from:(site) distance:1) (sites LineOfSight Piece at:(site) Orthogonal)}))))) (then (and (addScore Mover -10) (set Var "FirstNoPlace" 0))))) (forEach Piece "Disc" (move (from (from)) (to (sites Around (from)) if:(is Empty (to))) (then (moveAgain))))}))}))) (end (if (is Proposed "End") (byScore))))) 