(game "N-Mesh" (players 2) (equipment {(board (square 6) use:Cell) (regions "Marked" (forEach (sites Board) if:(= 0 (% (+ {(if (= 0 (% (- 6 1) 5)) 1 0) (site) (* (- 7 6) (/ (site) 6))}) 5)))) (piece "Ball" P1 maxState:1) (piece "Ball" P2 maxState:1) (piece "I" P1 maxState:5) (piece "I" P2 maxState:5)}) (rules (play (or (if (= 0 (counter)) (move Add (to (sites Occupied by:Next) (apply (remove (to)))))) (move Add (piece (id "Ball" Mover)) (to (sites Empty)) (then (and {(if (can Move (leap (from Cell (last To)) {{F F L F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (> 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (forEach Value (results from:(last To) to:(sites To (leap (from Cell (last To)) {{F F L F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (> 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (regionSite (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:1)))) index:0)) (add (piece (id "I" Mover)) (to Edge (value) (apply (set Var "ToEdge" (value)))) stack:True (then (set State Edge at:(var "ToEdge") (+ 1 (if (or (= (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) E)) (= (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) W))) 0 2))))))) (if (can Move (leap (from Cell (last To)) {{F F R F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (> 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (forEach Value (results from:(last To) to:(sites To (leap (from Cell (last To)) {{F F R F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (> 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (regionSite (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:1)))) index:0)) (add (piece (id "I" Mover)) (to Edge (value) (apply (set Var "ToEdge" (value)))) stack:True (then (set State Edge at:(var "ToEdge") (+ 2 (if (or (= (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) E)) (= (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) W))) 0 2))))))) (and {(forEach Site (sites Around Cell (last To) Orthogonal) (apply if:(is Mover (who at:(site))) (remove Edge (regionSite (difference (sites Incident Edge of:Cell at:(site)) (difference (sites Incident Edge of:Cell at:(site)) (sites Incident Edge of:Cell at:(last To)))) index:0) count:2))) (forEach Site (sites Incident Edge of:Cell at:(last To)) (apply if:(= (mover) (who Edge at:(site))) (remove Edge (site) count:2)))}) (and (do (if (or (= 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (last To)))) (= 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Mover (who at:(to)))) (or {(= (to) (from)) (and (is Mover (who at:(from))) (is Mover (who at:(to)))) (not (or (and (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (from) N) (if (= (from) (ahead Cell (to) N)) (sites Around (from) W) (if (= (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (to) N) (if (= (to) (ahead Cell (from) N)) (sites Around (to) W) (if (= (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (to) N) (if (= (from) (ahead Cell (to) N)) (sites Around (to) W) (if (= (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (from) N) (if (= (to) (ahead Cell (from) N)) (sites Around (from) W) (if (= (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (last To) (difference (intersection (sites "Marked") (sites Empty)) (last To))))) (and {(trigger "Enmeshed" Mover) (set State at:(last To) 1) (forEach Value (array (sites Occupied by:Mover on:Cell)) (if (or (= 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (value)))) (= 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Mover (who at:(to)))) (or {(= (to) (from)) (and (is Mover (who at:(from))) (is Mover (who at:(to)))) (not (or (and (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (from) N) (if (= (from) (ahead Cell (to) N)) (sites Around (from) W) (if (= (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (to) N) (if (= (to) (ahead Cell (from) N)) (sites Around (to) W) (if (= (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (to) N) (if (= (from) (ahead Cell (to) N)) (sites Around (to) W) (if (= (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (!= 0 (count Pieces of:(- 3 (id Mover)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (from) N) (if (= (to) (ahead Cell (from) N)) (sites Around (from) W) (if (= (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (value) (difference (intersection (sites "Marked") (sites Empty)) (value))))) (set State at:(value) 1)))})) next:(set Score Mover (- 0 (count Pieces Cell Mover in:(sites State Cell 1))))) (do (forEach Value (array (sites Occupied by:Next on:Cell)) (if (or (= 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (value)))) (= 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Next (who at:(to)))) (or {(= (to) (from)) (and (is Next (who at:(from))) (is Next (who at:(to)))) (not (or (and (!= 0 (count Pieces of:(- 3 (id Next)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (from) N) (if (= (from) (ahead Cell (to) N)) (sites Around (from) W) (if (= (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (!= 0 (count Pieces of:(- 3 (id Next)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (to) N) (if (= (to) (ahead Cell (from) N)) (sites Around (to) W) (if (= (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (!= 0 (count Pieces of:(- 3 (id Next)) in:(if (= (from) (ahead Cell (to) E)) (sites Around (to) N) (if (= (from) (ahead Cell (to) N)) (sites Around (to) W) (if (= (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (!= 0 (count Pieces of:(- 3 (id Next)) in:(if (= (to) (ahead Cell (from) E)) (sites Around (from) N) (if (= (to) (ahead Cell (from) N)) (sites Around (from) W) (if (= (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (value) (difference (intersection (sites "Marked") (sites Empty)) (value))))) (and (trigger "Enmeshed" Next) (set State at:(value) 1)))) next:(set Score Next (- 0 (count Pieces Cell Next in:(sites State Cell 1))))))}))))) (end (if (or (is Triggered "Enmeshed" Mover) (is Triggered "Enmeshed" Next)) {(if (= (score Mover) (score Next)) (result Next Win)) (if (!= (score Mover) (score Next)) (byScore))} (byScore))))) 