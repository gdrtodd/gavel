(game "Polypods" (players 2) (equipment {(board (square 8) use:Vertex) (piece "Disc" Each maxState:1 maxValue:4)}) (rules (play (or (move Pass) (do (do (move Add (to (difference (sites Empty) (sites Around (intersection (sites Occupied by:Next) (sites State 1))))) (then (and (set Value at:(last To) (layer of:(last To))) (if (= 6 (count Sites in:(sites Corners))) (forEach Site (sites Group at:(last To)) (if (or (< 2 (size Array (array (intersection (sites Group at:(last To)) (sites Around (site)))))) (and (= 2 (size Array (array (intersection (sites Group at:(last To)) (sites Around (site)))))) (< 1 (count Steps (min (array (intersection (sites Group at:(last To)) (sites Around (site))))) (max (array (intersection (sites Group at:(last To)) (sites Around (site))))))))) (set State at:(site) 1) (set State at:(site) 0))) (forEach Site (sites Group at:(last To)) (if (< 1 (size Array (array (intersection (sites Group at:(last To)) (sites Around (site)))))) (set State at:(site) 1) (if (is Within (what at:(site)) in:(sites Around (site) N)) (set State at:(site) 2) (if (is Within (what at:(site)) in:(sites Around (site) E)) (set State at:(site) 3) (if (is Within (what at:(site)) in:(sites Around (site) S)) (set State at:(site) 4) (if (is Within (what at:(site)) in:(sites Around (site) W)) (set State at:(site) 5) (set State at:(site) 0))))))))))) ifAfterwards:(<= 0 (+ (results from:(sites Group at:(last To)) to:(from) (if (!= 1 (state at:(to))) 1 (- 1))))) (then (do (forEach Site (intersection (sites Around (intersection (sites Group at:(last To)) (sites State 1))) (difference (sites Occupied by:Next) (sites State 1))) (remember Value "CS" (site) unique:True) (then (forEach Site (sites (results from:(intersection (sites Around (intersection (sites Group at:(last To)) (sites State 1))) (difference (sites Occupied by:Next) (sites State 1))) to:(min (array (difference (sites Group at:(from)) (intersection (sites Around (intersection (sites Group at:(last To)) (sites State 1))) (difference (sites Occupied by:Next) (sites State 1)))))) (to))) (remember Value "KS" (site) unique:True)))) next:(forEach Site (sites (values Remembered "CS")) (remove (site)) (then (forEach Value (values Remembered "KS") (if (= 6 (count Sites in:(sites Corners))) (forEach Site (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (if (or (< 2 (size Array (array (intersection (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (sites Around (site)))))) (and (= 2 (size Array (array (intersection (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (sites Around (site)))))) (< 1 (count Steps (min (array (intersection (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (sites Around (site))))) (max (array (intersection (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (sites Around (site))))))))) (set State at:(site) 1) (set State at:(site) 0))) (forEach Site (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (if (< 1 (size Array (array (intersection (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (sites Around (site)))))) (set State at:(site) 1) (if (is Within (what at:(site)) in:(sites Around (site) N)) (set State at:(site) 2) (if (is Within (what at:(site)) in:(sites Around (site) E)) (set State at:(site) 3) (if (is Within (what at:(site)) in:(sites Around (site) S)) (set State at:(site) 4) (if (is Within (what at:(site)) in:(sites Around (site) W)) (set State at:(site) 5) (set State at:(site) 0))))))))))) (then (and (forEach Value (values Remembered "KS") (if (not (<= 0 (+ (results from:(difference (sites Group at:(value)) (sites (values Remembered "CS"))) to:(from) (if (!= 1 (state at:(to))) 1 (- 1)))))) (forEach Site (difference (sites Group at:(value)) (sites (values Remembered "CS"))) (if (= 1 (state at:(site))) (remove (site)) (add (to (site) (apply (and (set Var "ConvertedFootSite" (to)) (remove (to))))) (then (and {(if (= 6 (count Sites in:(sites Corners))) (forEach Site (sites Group at:(var "ConvertedFootSite")) (if (or (< 2 (size Array (array (intersection (sites Group at:(var "ConvertedFootSite")) (sites Around (site)))))) (and (= 2 (size Array (array (intersection (sites Group at:(var "ConvertedFootSite")) (sites Around (site)))))) (< 1 (count Steps (min (array (intersection (sites Group at:(var "ConvertedFootSite")) (sites Around (site))))) (max (array (intersection (sites Group at:(var "ConvertedFootSite")) (sites Around (site))))))))) (set State at:(site) 1) (set State at:(site) 0))) (forEach Site (sites Group at:(var "ConvertedFootSite")) (if (< 1 (size Array (array (intersection (sites Group at:(var "ConvertedFootSite")) (sites Around (site)))))) (set State at:(site) 1) (if (is Within (what at:(site)) in:(sites Around (site) N)) (set State at:(site) 2) (if (is Within (what at:(site)) in:(sites Around (site) E)) (set State at:(site) 3) (if (is Within (what at:(site)) in:(sites Around (site) S)) (set State at:(site) 4) (if (is Within (what at:(site)) in:(sites Around (site) W)) (set State at:(site) 5) (set State at:(site) 0))))))))} (then (if (not (<= 0 (+ (results from:(sites Group at:(var "ConvertedFootSite")) to:(from) (if (!= 1 (state at:(to))) 1 (- 1)))))) (trigger "IllegalCapture" Mover)))))))))) (forget Value "CS" All (then (forget Value "KS" All)))))))) ifAfterwards:(not (is Triggered "IllegalCapture" Mover))) (then (and (set Score Mover (count Sites in:(intersection (sites Occupied by:Mover) (sites State 1)))) (set Score Next (count Sites in:(intersection (sites Occupied by:Next) (sites State 1)))))))) (end (if (all Passed) {(if (> (score Mover) (score Next)) (result Mover Win)) (if (and (= (score Mover) (score Next)) (>= (count Sites in:(difference (sites Around (sites Occupied by:Mover)) (sites Around (difference (sites Occupied by:All) (sites Occupied by:Mover)) includeSelf:True))) (count Sites in:(difference (sites Around (sites Occupied by:Next)) (sites Around (difference (sites Occupied by:All) (sites Occupied by:Next)) includeSelf:True))))) (result Mover Win)) (if (and (= (score Mover) (score Next)) (= (count Sites in:(difference (sites Around (sites Occupied by:Mover)) (sites Around (difference (sites Occupied by:All) (sites Occupied by:Mover)) includeSelf:True))) (count Sites in:(difference (sites Around (sites Occupied by:Next)) (sites Around (difference (sites Occupied by:All) (sites Occupied by:Next)) includeSelf:True))))) (result Mover Draw))} (result Next Win))))) 