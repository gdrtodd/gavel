(game "Veloop (Square)" (players 2) (equipment {(board (renumber (rotate 90 (square Square 8))) use:Cell) (piece "Disc" Each)}) (rules (start {(place "Disc1" {28}) (place "Disc2" {36})}) (play (priority (move Select (from (sites Empty) if:(> 2 (count Stack at:(from)))) (to (sites (from) {{F R F L F} {F L F R F}}) if:(and {(is In (to) (sites Occupied by:Mover top:True)) (= 2 (count Sites in:(intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)))) (or (= 1 (count Sites in:(intersection (intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)) (sites Occupied by:Mover top:True)))) (= 1 (count Sites in:(intersection (intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)) (sites Occupied by:Next top:True)))))})) (then (and {(add (piece (id "Disc" Mover)) (to (last From)) stack:True) (forEach Site (intersection (sites Around (last To) Adjacent) (sites Around (last From) Adjacent)) (remember Value (site)))}))) (move Select (from (sites Occupied by:Next) if:(> 2 (count Stack at:(from)))) (to (sites (from) {{F R F L F} {F L F R F}}) if:(and {(is In (to) (sites Occupied by:Mover top:True)) (= 2 (count Sites in:(intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)))) (or (= 1 (count Sites in:(intersection (intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)) (sites Occupied by:Mover top:True)))) (= 1 (count Sites in:(intersection (intersection (sites Around (to) Adjacent) (sites Around (from) Adjacent)) (sites Occupied by:Next top:True)))))})) (then (and {(add (piece (id "Disc" Mover)) (to (last From)) stack:True) (forEach Site (intersection (sites Around (last To) Adjacent) (sites Around (last From) Adjacent)) (remember Value (site)))}))) (then (if (is Empty (arrayValue (values Remembered) index:1)) (fromTo (from (arrayValue (values Remembered) index:0)) (to (arrayValue (values Remembered) index:1))) (if (is Empty (arrayValue (values Remembered) index:0)) (fromTo (from (arrayValue (values Remembered) index:1)) (to (arrayValue (values Remembered) index:0))) (set Var "Piece1" (what at:(arrayValue (values Remembered) index:1) level:(topLevel at:(arrayValue (values Remembered) index:1))) (then (add (piece (what at:(arrayValue (values Remembered) index:0) level:(topLevel at:(arrayValue (values Remembered) index:0)))) (to (arrayValue (values Remembered) index:1) (apply (remove (to)))) (then (add (piece (var "Piece1")) (to (arrayValue (values Remembered) index:0) (apply (remove (to)))))))))) (then (and {(set Score Mover (- 0 (count Sites in:(difference (sites Occupied by:Mover) (forEach (sites Board) if:(!= 1000000000 (count Steps Adjacent (step Adjacent (to if:(or (is Empty (to)) (is Mover (who at:(to)))))) (site) (sites Outer)))))))) (set Score Next (- 0 (count Sites in:(difference (sites Occupied by:Next) (forEach (sites Board) if:(!= 1000000000 (count Steps Adjacent (step Adjacent (to if:(or (is Empty (to)) (is Next (who at:(to)))))) (site) (sites Outer)))))))) (forget Value All) (if (and (not (is Prev Mover)) (< -1 (counter))) (moveAgain))})))))) (end (if (!= 0 (+ (score P1) (score P2))) (byScore))))) 