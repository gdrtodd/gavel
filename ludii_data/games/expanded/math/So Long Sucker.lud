(game "So Long Sucker" (players 4) (equipment {(board (rectangle 4 7)) (hand Each size:5) (piece "Marker" Each)}) (rules (start {(place Stack "Marker1" (handSite P1) count:7) (place Stack "Marker2" (handSite P2) count:7) (place Stack "Marker3" (handSite P3) count:7) (place Stack "Marker4" (handSite P4) count:7)}) (play (if (and (!= -1 (var "CanBeDefeated")) (not (is Mover (var "CanBeDefeated")))) (or (move Set NextPlayer (player (next)) (then (note "Fuck You Buddy!"))) (move (from (forEach (sites Hand Mover) if:(and (!= (site) (handSite Mover 0)) (is Occupied (site))))) (to (handSite Player (var "CanBeDefeated"))) (then (and {(set NextPlayer (player (var "CanBeDefeated"))) (set Var "CanBeDefeated" -1) (set Var "PrevWas" -1)})))) (if (= (var "CaptureWasMade") 1) (forEach Level (last To) (move Remove (last To) level:(level)) (then (and {(forEach Level (last To) (fromTo (from (last To) level:(level)) (to (if (is Mover (who at:(last To) level:(level))) (handSite Mover 0) (handSite Mover (who at:(last To) level:(level))))))) (moveAgain) (set Pending) (set Var "CaptureWasMade" 0)}))) (if (and (not (is Pending)) (is Prev Mover)) (if (and {(or (not (is Active P1)) (is In 1 (results from:(last To) to:(forEach Level at:(last To)) (who at:(last To) level:(to))))) (or (not (is Active P2)) (is In 2 (results from:(last To) to:(forEach Level at:(last To)) (who at:(last To) level:(to))))) (or (not (is Active P3)) (is In 3 (results from:(last To) to:(forEach Level at:(last To)) (who at:(last To) level:(to))))) (or (not (is Active P4)) (is In 4 (results from:(last To) to:(forEach Level at:(last To)) (who at:(last To) level:(to)))))}) (move Set NextPlayer (player (if (is Active (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:0)) (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:0) (if (is Active (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:1)) (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:1) (if (is Active (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:2)) (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:2) (arrayValue (results from:(last To) to:(forEach Level at:(last To) FromBottom if:(not (is In (who at:(last To) level:(level)) (results from:(last To) to:(forEach Level at:(last To) FromBottom startAt:(+ 1 (level))) (who at:(last To) level:(to)))))) (who at:(last To) level:(to))) index:3)))))) (forEach Player (if (and (is Active (player)) (not (is In (player) (results from:(last To) to:(forEach Level at:(last To)) (who at:(last To) level:(to)))))) (move Set NextPlayer (player (player))))) (then (set Pending))) (if (and {(is Empty (handSite Mover)) (is Empty (handSite Mover 1)) (is Empty (handSite Mover 2)) (is Empty (handSite Mover 3)) (is Empty (handSite Mover 4))}) (if (= -1 (var "CanBeDefeated")) (move Pass (then (and (set Var "CanBeDefeated" (mover)) (set Var "PrevWas" (prev))))) (move Pass (then (and {(set Var "Defeat" (mover)) (set Var "CanBeDefeated" -1) (if (is Active (var "PrevWas")) (set NextPlayer (player (var "PrevWas"))) (set NextPlayer (player (next)))) (set Var "PrevWas" -1)})))) (or {(move (from (sites Hand Mover)) (to (sites Board)) (then (if (and (> (size Stack at:(last To)) 1) (= (who at:(last To) level:(- (size Stack at:(last To)) 1)) (who at:(last To) level:(- (size Stack at:(last To)) 2)))) (if (is Active (who at:(last To) level:(- (size Stack at:(last To)) 1))) (and (set Var "CaptureWasMade" 1) (set NextPlayer (player (who at:(last To))))) (and {(forEach Level (last To) (remove (last To) level:(level))) (moveAgain) (set Pending)})) (moveAgain)))) (move Remove (forEach (sites Hand Mover) if:(and (!= (site) (handSite Mover 0)) (is Occupied (site))))) (forEach Player (if (not (is Mover Player)) (move (from (forEach (sites Hand Mover) if:(and (!= (site) (handSite Mover 0)) (is Occupied (site))))) (to (handSite Player (who at:(from)))))))})))))) (end (if (is Mover (var "Defeat")) (result Mover Loss))))) 