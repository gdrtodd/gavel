5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats. Initiallly, the tigers are placed at opposite sites of the top and the bottom of the board. Played on a board with the diagonals forming a diamond. The tiger can jump a sequence of pieces to capture.
(game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 diagonals:Alternating) edges:{{{0 0} {1 1}} {{1 1} {2 2}} {{2 2} {3 3}} {{3 3} {4 4}} {{4 0} {3 1}} {{3 1} {2 2}} {{2 2} {1 3}} {{1 3} {0 4}}})) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) counts:{5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
