Boards consist of a grid of 3x4 squares and a continuation of the central row in the grid that extends for 8 further squares. The game is played with two astragals as dice: one from a sheep and one from an ox. The sheep astragal provides the base value for the roll, and the ox astragal serves as a bonus. Rolls of the sheep astragal produce values of 1, 2 ,3 or 4. The ox astragal produces a "yes" or "no" value. If "no" is rolled, the values remain the same. If "yes" is rolled, the value of the first roll is boosted to 5, 6, 7, or 10, respectively. These rules are proposed by Finkel based on the values of moves provided in the cuneiform tablets (Finkel 2007: 21â€“22). Each player starts play on one of the right corners of the 3x4 grid, proceeding left down that row to the opposite corner, and then right down the central track, which both players use, with the goal of moving off the end of the track. If a player lands on a square occupied by the opponent, the opponent's piece is removed from the board and may reenter on a subsequent turn. Rosettes on certain squares in the central track mark spaces where a player is safe from being sent to the beginning. Rosettes in the corners allow a player to roll again when a player lands on them. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one. Rules from Seleucid.
(game "20 Squares" (players 2) (equipment {(board (merge (rectangle 3 4) (shift 0 1 (rectangle 1 12))) {(track "Track1" "20,3,W,N1,E,End" P1 directed:True) (track "Track2" "21,12,W,S1,E,End" P2 directed:True)}) (dice facesByDie:{{1 2 3 4} {0 1}} num:2) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "H2" "L2"})) (piece "UrPiece" Each (if (equals (trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10)))))) -2) (move Remove (from)) (if (notEqual (trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10)))))) -1) (if (or (is Empty (trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10))))))) (and (not (is Friend (who at:(trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10))))))))) (not (is In (trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10)))))) (sites "Replay"))))) (move (from) (to (trackSite Move steps:(if (equals 0 (face 23)) (face 22) (if (equals 1 (face 22)) (add (face 22) 5) (if (equals 2 (face 22)) (add (face 22) 6) (if (equals 3 (face 22)) (add (face 22) 7) (add (face 22) 10)))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))) (then (if (is In (last To) (sites "Replay")) (moveAgain))))))))}) (rules (start {(place "UrPiece1" (handSite P1) count:7) (place "UrPiece2" (handSite P2) count:7)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
