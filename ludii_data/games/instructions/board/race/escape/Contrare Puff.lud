2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto opposite sections of the board, and proceed around the board toward the section where the opponent enters the board, and then bearing pieces off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
(game "Contrare Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die replayDouble:(equals 1 (value Player Mover)) if:(notEqual (pips) 0) (if (equals (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain) (if (equals 1 (value Player Mover)) (if (and (all DiceEqual) (equals 0 (size Array (values Remembered)))) (and (moveAgain) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) count:15) (place Stack "Disc2" (handSite P2) count:15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll)) next:(if (equals 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (equals (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (notEqual 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (forEach Piece container:(mover) (forEach Value (values Remembered "Opposite") (if (equals (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (notEqual 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain)})))}) (do (if (and {(equals 0 (count MovesThisTurn)) (all DiceEqual) (equals 1 (value Player Mover))}) (and (remember Value "Opposite" (sub 7 (face 28))) (remember Value "Opposite" (sub 7 (face 28))))) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))))) (end (if (no Pieces Mover) (result Mover Win))))) 
