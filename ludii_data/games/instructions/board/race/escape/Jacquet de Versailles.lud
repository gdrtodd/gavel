2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Pieces begin on the leftmost point on their opponent's side of the board. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, the player may move the value of one of the die (n), n times (e.g., double sixes allows a player to move 6 six times, double twos allow a player to move 2 twice). Each player progresses in a clockwise direction around the board, to bear off upon reaching the final point on the opposite side of the board from which the player started. This first piece must reach the opposite quadrant of the board from where it started before the player may enter any other pieces. In the quadrant where the players enter their pieces, that player may only have two or more pieces on a point on a maximum of two points. When a piece lands on a point occupied by a single opponent's piece, The opponent's piece is removed from the board and must enter the board again. When all of the player's pieces have entered the opposite quadrant from the one in which they entered, they may begin to bear off. The first player to bear off all their pieces wins. It is considered a double win if the player bears off all their pieces before the opponent bears off any.
(game "Jacquet de Versailles" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 13 14 15 16 17 18 20 21 22 23 24 25 12 11 10 9 8 7 5 4 3 2 1 0} P1 directed:True) (track "Track2" {19 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P2 directed:True)} use:Vertex) (dice num:2) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {13 14 15 16 17 18}) (regions "Home" P2 {12 11 10 9 8 7}) (regions "OppositeQuadrant" P1 {0 1 2 3 4 5}) (regions "OppositeQuadrant" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 13 count:15) (place Stack "Disc2" 12 count:15)}) (play (do (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (forEach Site (sites Occupied by:Mover) (if (and (equals (trackSite Move from:(site) steps:(div (count Pips) 2)) -1) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "OppositeQuadrant")))) (move Remove (site)) (if (or (notEqual (site) (trackSite Move from:(mapEntry (mover)) steps:1)) (and (equals (site) (trackSite Move from:(mapEntry (mover)) steps:1)) (or {(all Sites (difference (sites Board) (trackSite Move from:(mapEntry (mover)) steps:1)) if:(notEqual (who at:(site)) (mover))) (is Occupied (mapEntry (mover))) (lt (size Stack at:(trackSite Move from:(mapEntry (mover)) steps:1)) 14) (not (all Sites (sites Mover "OppositeQuadrant") if:(notEqual (who at:(site)) (mover))))}))) (move (from (site)) (to (trackSite Move from:(site) steps:(div (count Pips) 2)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next))))))))) (then (if (lt (value Player Mover) (sub (div (count Pips) 2) 1)) (and (moveAgain) (if (lt (value Player Mover) 0) (set Value Mover 1) (set Value Mover (add 1 (value Player Mover))))) (set Value Mover 0)))) (forEach Die if:(notEqual (pips) 0) (forEach Site (sites Occupied by:Mover) (if (and (equals (trackSite Move from:(site) steps:(pips)) -1) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "OppositeQuadrant")))) (move Remove (site)) (if (or (notEqual (site) (trackSite Move from:(mapEntry (mover)) steps:1)) (and (equals (site) (trackSite Move from:(mapEntry (mover)) steps:1)) (or {(all Sites (difference (sites Board) (trackSite Move from:(mapEntry (mover)) steps:1)) if:(notEqual (who at:(site)) (mover))) (is Occupied (mapEntry (mover))) (lt (size Stack at:(trackSite Move from:(mapEntry (mover)) steps:1)) 14) (not (all Sites (sites Mover "OppositeQuadrant") if:(notEqual (who at:(site)) (mover))))}))) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))))) (then (if (not (all DiceUsed)) (moveAgain)))))) ifAfterwards:(le (count Sites in:(forEach (intersection (sites Occupied by:Mover) (sites Mover "Home")) if:(ge (size Stack at:(site)) 2))) 2))) (end {(if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (equals (size Stack in:(sites Occupied by:P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (equals (size Stack in:(sites Occupied by:P1)) 15) 2 1) 0))}))}))) 
