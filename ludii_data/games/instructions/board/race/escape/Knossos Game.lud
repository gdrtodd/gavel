Each player begins at the end of one of the "wings" on the board. Two pieces per player. Moves are determined by the throw of two sticks with a rounded side and a flat side. Rolls are as follows: two round sides up= 1, one flat and one round =2, two flat sides =3, plus another throw. Players move their pieces the appropriate number of spaces onto the board. When a piece is in the central four spaces of the main part of the board, pieces may be taken. A piece is taken when the opponent lands on the same space as a piece, sending it back to the beginning. In these central four squares, the player may choose to proceed upward again either on the first or second space, but may not change direction again. A player may cross the "bridge" to the other four spaces by throwing a 3, always stopping on the first space after the bridge, regardless of whether thre . The player then may move to the space closest to them, if a roll allows, where they are safe, and then to the apex point of the board, where they may also be sent to start if the opponent lands there. From there, they must give an exact throw to exit the board. The first player to remove both of their pieces wins. The game is played again, and the first player to win three games is the winner. Rules from Seleucid.
(game "Knossos Game" (players 2) (equipment {(board (merge {(rectangle 1 4) (shift 1 1 (rectangle 1 2)) (shift 0 -2 (rectangle 3 1)) (shift 3 -2 (rectangle 3 1)) (shift 1.5 4 (scale 2 (rectangle 2 1))) (shift 0 5 (scale 3 (rectangle 1 2)))}) {(track "TrackBottom1" "14,6,7,0,1,4") (track "TrackBottom2" "15,8,9,3,2,5") (track "TrackOpposite1" "7,0,1,2,5") (track "TrackOpposite2" "9,3,2,1,4") (track "TrackCross1" "0,1,4,10,12,11") (track "TrackCross2" "3,2,5,10,13,11") (track "TrackTop1" "10,12,11,End") (track "TrackTop2" "10,13,11,End")} use:Vertex) (dice d:2 from:0 num:2) (piece "RoundPawn" Each (or {(if (equals (trackSite Move "TrackBottom1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackBottom1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackBottom1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackBottom1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))) (if (equals (trackSite Move "TrackBottom2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackBottom2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackBottom2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackBottom2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))) (if (equals (trackSite Move "TrackOpposite1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackOpposite1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackOpposite1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackOpposite1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))) (if (equals (trackSite Move "TrackOpposite2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackOpposite2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackOpposite2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackOpposite2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))) (if (is Mover P1) (if (equals (trackSite Move "TrackTop1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackTop1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackTop1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackTop1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))) (if (equals (trackSite Move "TrackTop2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackTop2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackTop2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackTop2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))))) (if (and {(not (is Friend (who at:10))) (equals 3 (if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (not (is In (from) (sites "TopSites")))}) (if (or (can Move (if (equals (trackSite Move "TrackCross1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackCross1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackCross1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackCross1" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))))) (can Move (if (equals (trackSite Move "TrackCross2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -2) (move Remove (from)) (if (and (notEqual (trackSite Move "TrackCross2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) -1) (not (is Friend (who at:(trackSite Move "TrackCross2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))))))) (move (from) (to (trackSite Move "TrackCross2" steps:(if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))))))))) (move (from) (to 10 (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))))})) (hand Each) (regions "TopSites" (sites {10 11 12 13}))}) (rules (start (place "RoundPawn" "Hand" count:2)) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))) (then (if (no Pieces Mover) (and (addScore Mover 1) (if (notEqual (score Mover) 2) (and {(forEach Site (sites Occupied by:All container:"Board") (remove (site))) (if (notEqual 0 (who at:(handSite P1))) (remove (handSite P1))) (if (notEqual 0 (who at:(handSite P2))) (remove (handSite P2))) (add (piece (id "RoundPawn" P1)) (to (handSite P1)) count:2) (add (piece (id "RoundPawn" P2)) (to (handSite P2)) count:2)}))) (if (equals 3 (if (equals 2 (count Pips)) 1 (if (equals 1 (count Pips)) 2 3))) (moveAgain)))))) (end (if (equals (score Mover) 3) (result Mover Win))))) 
