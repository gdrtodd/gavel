Four 3x5 grids, arranged in four corners of a rectangular board. Three pieces per player. Five cowrie shells used as dice; the value of the throw equaling the number of the mouths which land face up. Players begin by entering their pieces onto the board from the square in the central row of the grid to their right. A single piece may be entered with a throw of 1, or all of the player's pieces may be entered with a throw of 5. Throws of 1 and 5 grant the player another throw, and pieces are moved only after all of the players throws are made. Play proceeds down the central row where the pieces entered, in an anti-clockwise direction until reaching the bottom right hand corner of the left grid, at which point the track continues on the opponent's side of the board from the top right corner of the left board (with respect to the current player), proceeding around the opponent's grids in an anti-clockwise direction until reaching the top left square of the opponent's right grid. At this point, the piece returns to the player's own right grid, on the bottom left corner, and proceeding in an anti-clockwise direction into the central row, and off the board once moving past the final space. When a player lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must re-enter as before. Pieces are safe from being sent back when resting on the left two corners of each grid on the left and the right two corners of each grid on the right. The first player to remove all of their pieces from the board wins.
(game "Len Doat" (players 2) (equipment {(board (merge {(rectangle 3 5) (shift 7.5 0 (rectangle 3 5)) (shift 0 3.5 (rectangle 3 5)) (shift 7.5 3.5 (rectangle 3 5))}) {(track "Track1" "20,E,N,W,14,W,S,E,44,W,S,E,45,E,N,W,15,E,N1,W,End" P1 directed:True) (track "Track2" "39,W,S,E,45,E,N,W,15,E,N,W,14,W,S,E,44,W,S1,E,End" P2 directed:True)}) (dice d:2 from:0 num:5) (hand Each) (piece "Marker" Each (if (equals (trackSite Move steps:(value Player Mover)) -2) (move Remove (from)) (if (notEqual (trackSite Move steps:(value Player Mover)) -1) (if (if (not (is Enemy (who at:(trackSite Move steps:(value Player Mover))))) True (not (is In (trackSite Move steps:(value Player Mover)) (sites "Protect")))) (move (from) (to (trackSite Move steps:(value Player Mover)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)) count:(count at:(to))))) (then (if (or (equals 1 (value Player Mover)) (equals 5 (value Player Mover))) (and (moveAgain) (set Value Mover -2))))))))) (map "EntrySite" {(pair P1 (coord "F2")) (pair P2 (coord "E5"))}) (regions "Protect" (sites {"A1" "A3" "A4" "A6" "J1" "J3" "J4" "J6"}))}) (rules (start (place "Marker" "Hand" count:3)) (play (if (can Move (if (lt (value Player Mover) 0) (do (roll) next:(if (equals (value Player Mover) -2) (do (set Value Mover (count Pips)) next:(if (and (equals (value Player Mover) 1) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) (then (and (moveAgain) (set Value Mover -2)))) (if (and (equals (value Player Mover) 5) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) count:(count Cell at:(handSite Mover)) (then (and (moveAgain) (set Value Mover -2)))) (forEach Piece)) (then (if (notEqual (value Player Mover) -2) (set Value Mover -1))))) (move Pass (then (set Value Mover (count Pips)))))) (if (and (equals (value Player Mover) 1) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) (then (and (moveAgain) (set Value Mover -2)))) (if (and (equals (value Player Mover) 5) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) count:(count Cell at:(handSite Mover)) (then (and (moveAgain) (set Value Mover -2)))) (forEach Piece)) (then (if (notEqual (value Player Mover) -2) (set Value Mover -1)))))) (if (lt (value Player Mover) 0) (do (roll) next:(if (equals (value Player Mover) -2) (do (set Value Mover (count Pips)) next:(if (and (equals (value Player Mover) 1) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) (then (and (moveAgain) (set Value Mover -2)))) (if (and (equals (value Player Mover) 5) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) count:(count Cell at:(handSite Mover)) (then (and (moveAgain) (set Value Mover -2)))) (forEach Piece)) (then (if (notEqual (value Player Mover) -2) (set Value Mover -1))))) (move Pass (then (set Value Mover (count Pips)))))) (if (and (equals (value Player Mover) 1) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) (then (and (moveAgain) (set Value Mover -2)))) (if (and (equals (value Player Mover) 5) (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site)))))) (move (from (handSite Mover)) (to (mapEntry "EntrySite" (mover))) count:(count Cell at:(handSite Mover)) (then (and (moveAgain) (set Value Mover -2)))) (forEach Piece)) (then (if (notEqual (value Player Mover) -2) (set Value Mover -1))))) (move Pass (then (and (if (or (equals 1 (value Player Mover)) (equals 5 (value Player Mover))) (and (moveAgain) (set Value Mover -2))) (if (notEqual (value Player Mover) -2) (set Value Mover -1))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
