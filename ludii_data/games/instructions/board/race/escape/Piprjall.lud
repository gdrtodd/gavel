2x12 board, with the spaces rendered as points, divided into half. Fifteen pieces per player, which begin on the rightmost point, with respect to the player, on the opposite side of the board from which they sit. Two six-sided dice. Pieces move according to the throws of the dice, the value of a die being used to move a piece the entire value of the die. A throw of double sixes makes the player play six twice, then five twice, then four twice, and so on down to one. A throw of double fives forces the player to play five twice and then six twice. A throw of double four, three, or two forces the player to play two of that number, down to one. A play of double ones forces the player to play one twice, then two twice, up to six. More than two pieces of the same player may not occupy a point on the starting side of the board. The player cannot move past the penultimate point on the opposite side of the board until five pieces have been moved from the starting point. A single opponent's piece may be removed from the board when a player's piece lands on it, and the opponent's piece must reenter the board. Pieces cannot move to a point occupied by two opponent's piece. A piece cannot reenter the board on a point occupied by another piece, whether belonging to the player or the opponent. When all of a player's pieces have reached the final quadrant of the board, the player may begin to remove them from the table. The player who bears off their pieces scores two points.
(game "Piprjall" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P1 directed:True) (track "Track2" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die replayDouble:True if:(notEqual (pips) 0) (if (equals (trackSite Move from:(from) steps:(pips)) -2) (if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "FinalQuadrant"))) (move Remove (from))) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(and {(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "StartingSide"))) True (gt 2 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "AfterPenultimate"))) True (ge 10 (count Pieces in:(sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (hand Each) (regions "FinalQuadrant" P1 (sites {7 8 9 10 11 12})) (regions "FinalQuadrant" P2 (sites {13 14 15 16 17 18})) (regions "StartingSide" P1 (sites {25 24 23 22 21 20 18 17 16 15 14 13})) (regions "StartingSide" P2 (sites {0 1 2 3 4 5 7 8 9 10 11 12})) (regions "AfterPenultimate" P1 (sites {12})) (regions "AfterPenultimate" P2 (sites {13})) (map "Entry" {(pair P1 25) (pair P2 0)})}) (rules (start {(place Stack "Disc1" 25 count:15) (place Stack "Disc2" 0 count:15)}) (play (if (can Move (if (ge 0 (value Player Mover)) (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (face 28) 1)) if:(is Empty (to))))) (forEach Piece (if (equals (trackSite Move from:(from) steps:(face 28)) -2) (if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "FinalQuadrant"))) (move Remove (from))) (move (from (from)) (to (trackSite Move from:(from) steps:(face 28)) if:(and {(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "StartingSide"))) True (gt 2 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "AfterPenultimate"))) True (ge 10 (count Pieces in:(sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))) top:True) (then (and {(moveAgain) (set Var "FirstPlay" 1) (set Value Mover (face 28)) (set Var "DoubleToPlay" (face 28))}))) (or (if (is Occupied (handSite Mover)) (forEach Die replayDouble:True if:(notEqual (pips) 0) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (pips) 1)) if:(is Empty (to)))) (then (if (not (all DiceUsed)) (moveAgain))))) (forEach Piece top:True)))) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (var "DoubleToPlay") 1)) if:(is Empty (to))))) (forEach Piece (if (equals (trackSite Move from:(from) steps:(var "DoubleToPlay")) -2) (if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "FinalQuadrant"))) (move Remove (from))) (move (from (from)) (to (trackSite Move from:(from) steps:(var "DoubleToPlay")) if:(and {(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "StartingSide"))) True (gt 2 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "AfterPenultimate"))) True (ge 10 (count Pieces in:(sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))) top:True) (then (and {(if (or (equals (value Player Mover) 1) (equals (value Player Mover) 5)) (if (notEqual (var "FirstPlay") 1) (and (set Var "DoubleToPlay" (var "DoubleToPlay")) (moveAgain)) (if (notEqual 6 (var "DoubleToPlay")) (and (set Var "DoubleToPlay" (add (var "DoubleToPlay") 1)) (moveAgain)) (and (set Var "DoubleToPlay" 0) (set Value Mover 0)))) (if (notEqual (var "FirstPlay") 1) (and (set Var "DoubleToPlay" (var "DoubleToPlay")) (moveAgain)) (if (notEqual 1 (var "DoubleToPlay")) (and (set Var "DoubleToPlay" (sub (var "DoubleToPlay") 1)) (moveAgain)) (and (set Var "DoubleToPlay" 0) (set Value Mover 0))))) (if (notEqual (var "FirstPlay") 1) (set Var "FirstPlay" 1) (set Var "FirstPlay" 0))}))) (then (if (no Pieces Mover) (set Score Mover 2))))) (if (ge 0 (value Player Mover)) (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (face 28) 1)) if:(is Empty (to))))) (forEach Piece (if (equals (trackSite Move from:(from) steps:(face 28)) -2) (if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "FinalQuadrant"))) (move Remove (from))) (move (from (from)) (to (trackSite Move from:(from) steps:(face 28)) if:(and {(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "StartingSide"))) True (gt 2 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "AfterPenultimate"))) True (ge 10 (count Pieces in:(sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))) top:True) (then (and {(moveAgain) (set Var "FirstPlay" 1) (set Value Mover (face 28)) (set Var "DoubleToPlay" (face 28))}))) (or (if (is Occupied (handSite Mover)) (forEach Die replayDouble:True if:(notEqual (pips) 0) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (pips) 1)) if:(is Empty (to)))) (then (if (not (all DiceUsed)) (moveAgain))))) (forEach Piece top:True)))) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" Mover) steps:(sub (var "DoubleToPlay") 1)) if:(is Empty (to))))) (forEach Piece (if (equals (trackSite Move from:(from) steps:(var "DoubleToPlay")) -2) (if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "FinalQuadrant"))) (move Remove (from))) (move (from (from)) (to (trackSite Move from:(from) steps:(var "DoubleToPlay")) if:(and {(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "StartingSide"))) True (gt 2 (size Stack at:(to)))) (if (not (is In (to) (sites Mover "AfterPenultimate"))) True (ge 10 (count Pieces in:(sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next))))))) top:True) (then (and {(if (or (equals (value Player Mover) 1) (equals (value Player Mover) 5)) (if (notEqual (var "FirstPlay") 1) (and (set Var "DoubleToPlay" (var "DoubleToPlay")) (moveAgain)) (if (notEqual 6 (var "DoubleToPlay")) (and (set Var "DoubleToPlay" (add (var "DoubleToPlay") 1)) (moveAgain)) (and (set Var "DoubleToPlay" 0) (set Value Mover 0)))) (if (notEqual (var "FirstPlay") 1) (and (set Var "DoubleToPlay" (var "DoubleToPlay")) (moveAgain)) (if (notEqual 1 (var "DoubleToPlay")) (and (set Var "DoubleToPlay" (sub (var "DoubleToPlay") 1)) (moveAgain)) (and (set Var "DoubleToPlay" 0) (set Value Mover 0))))) (if (notEqual (var "FirstPlay") 1) (set Var "FirstPlay" 1) (set Var "FirstPlay" 0))}))) (then (if (no Pieces Mover) (set Score Mover 2)))) (move Pass (then (and {(set Value Mover 0) (set Var "FirstPlay" 0) (set Var "DoubleToPlay" 0)}))))) (end (if (no Pieces Mover) (result Mover Win))))) 
