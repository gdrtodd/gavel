2x12 board, with spaces as points, divided in two. Fifteen or sixteen pieces per player, which begin on one of the points, the furthest to the right of one player and the furthest to the left of the other (they will be opposite each other). The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Doubles are only played once. Pieces may not land on a space occupied by an opponent's piece. Pieces may only move into the twelfth point on their side of the board (Hucke) with a throw that allows two pieces to move there at once. A player cannot move into or hit pieces in the opponent's Hucke. Players may move beyond their Hucke only on a throw that allows them, to move two pieces from the Hucke onto the opposite side of the board. Each player has another piece, placed at the tip of their point. The player moves this piece to mark the score they earn. Points are awarded as follows: When it is possible for a player to land on a space occupied by a single piece belonging to the opponent (a hit), a player gains one point. Hitting the opponent's Hucke is only possible by throwing two 1s with at least four pieces on the player's own Hucke. For a given throw, all possible hits made by any legal move are counted. Players move their pieces after the possible hits are calculated. A player gains two points by bringing all of their pieces into the final section of the board and bearing all of their pieces off by throwing more than the number of remaining spaces. The player who obtains twelve points wins. Each player has 15 pieces.
(game "Tokkadille" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True) (track "ReverseHuckeTrack1" {0 1 2 3 4 5 7} P1 directed:True) (track "ReverseHuckeTrack2" {13 14 15 16 17 18 20} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (if (is In (from) (sites Mover "BeforeHucke")) (forEach Die if:(notEqual (pips) 0) (move (from (from)) (to (trackSite Move from:(from) "Track" steps:(pips)) if:(and (is In (to) (sites Mover "BeforeHucke")) (not (is Enemy (who at:(to))))))) (then (if (not (all DiceUsed)) (moveAgain)))) (if (notEqual (from) (mapEntry "Hucke" (mover))) (forEach Die if:(notEqual (pips) 0) (if (equals (trackSite Move from:(from) "Track" steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) "Track" steps:(pips)) if:(not (is Enemy (who at:(to))))))) (then (if (not (all DiceUsed)) (moveAgain))))))) (regions "BeforeHucke" P1 (sites {12 11 10 9 8 7 5 4 3 2 1})) (regions "BeforeHucke" P2 (sites {25 24 23 22 21 20 18 17 16 15 14})) (map "Hucke" {(pair P1 0) (pair P2 13)})}) (rules (start {(place Stack "Disc1" 12 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(do (if (not (is Prev Mover)) (forEach Site (sites Occupied by:Mover) (if (is In (site) (sites Mover "BeforeHucke")) (and (if (and {(is In (trackSite Move from:(site) "Track" steps:(face 26)) (sites Mover "BeforeHucke")) (is Enemy (who at:(trackSite Move from:(site) "Track" steps:(face 26)))) (equals 1 (size Stack at:(trackSite Move from:(site) "Track" steps:(face 26))))}) (addScore Mover 1)) (if (and {(is In (trackSite Move from:(site) "Track" steps:(face 27)) (sites Mover "BeforeHucke")) (is Enemy (who at:(trackSite Move from:(site) "Track" steps:(face 27)))) (equals 1 (size Stack at:(trackSite Move from:(site) "Track" steps:(face 27))))}) (addScore Mover 1))) (if (notEqual (site) (mapEntry "Hucke" (mover))) (and (if (and (is Enemy (who at:(trackSite Move from:(site) "Track" steps:(face 26)))) (equals 1 (size Stack at:(trackSite Move from:(site) "Track" steps:(face 26))))) (addScore Mover 1)) (if (and (is Enemy (who at:(trackSite Move from:(site) "Track" steps:(face 27)))) (equals 1 (size Stack at:(trackSite Move from:(site) "Track" steps:(face 27))))) (addScore Mover 1))) (if (and {(equals 1 (face 26)) (equals 1 (face 27)) (le 4 (size Stack at:(mapEntry "Hucke" (mover)))) (equals 1 (size Stack at:(trackSite Move from:(site) "Track" steps:(face 26))))}) (addScore Mover 1)))))) next:(or {(if (and (ge 0 (var "MovingFromHucke")) (ge 0 (var "MovingToHucke"))) (forEach Piece)) (if (ge 0 (var "MovingFromHucke")) (if (or (lt 0 (var "MovingToHucke")) (if (equals (face 26) (face 27)) (le 2 (count Pieces Mover in:(sites {(trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 27))}))) (and (le 1 (count Pieces Mover in:(sites {(trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 26))}))) (le 1 (count Pieces Mover in:(sites {(trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 27))})))))) (or (if (and (notEqual 26 (var "MovingToHucke")) (is Friend (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 26))))) (move (from (trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 26))) (to (mapEntry "Hucke" (mover))) (then (if (equals 0 (count MovesThisTurn)) (and (moveAgain) (set Var "MovingToHucke" 26)) (set Var "MovingToHucke" 0))))) (if (and (notEqual 27 (var "MovingToHucke")) (is Friend (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 27))))) (move (from (trackSite Move from:(mapEntry "Hucke" (mover)) "ReverseHuckeTrack" steps:(face 27))) (to (mapEntry "Hucke" (mover))) (then (if (equals 0 (count MovesThisTurn)) (and (moveAgain) (set Var "MovingToHucke" 27)) (set Var "MovingToHucke" 0)))))))) (if (ge 0 (var "MovingToHucke")) (if (or (lt 0 (var "MovingFromHucke")) (if (and (and (notEqual (face 26) 1) (notEqual (face 27) 1)) (le 2 (count Pieces Mover in:(sites {(mapEntry "Hucke" (mover))})))) (if (equals (face 26) (face 27)) (not (is Enemy (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 27))))) (and (not (is Enemy (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 26))))) (not (is Enemy (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 27))))))))) (or (if (and (notEqual 26 (var "MovingFromHucke")) (not (is Enemy (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 26)))))) (move (from (mapEntry "Hucke" (mover))) (to (trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 26))) (then (if (equals 0 (count MovesThisTurn)) (and (moveAgain) (set Var "MovingFromHucke" 26)) (set Var "MovingFromHucke" 0))))) (if (and (notEqual 27 (var "MovingFromHucke")) (not (is Enemy (who at:(trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 27)))))) (move (from (mapEntry "Hucke" (mover))) (to (trackSite Move from:(mapEntry "Hucke" (mover)) "Track" steps:(face 27))) (then (if (equals 0 (count MovesThisTurn)) (and (moveAgain) (set Var "MovingFromHucke" 27)) (set Var "MovingFromHucke" 0))))))))})) (then (if (no Pieces Mover) (addScore Mover 2))))) (end (if (le 12 (score Mover)) (result Mover Win))))) 
