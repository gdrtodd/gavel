2x8 board, with rectangular spaces. Sixteen pieces per player, eight each placed on the two rectangles to each player's left. Each player moves their pieces in an anti-clockwise direction. Two six-sided dice. When a player rolls two 1s, they lose a piece. When a player rolls doubles of another number, the player may move two pieces the full total of the roll, or one piece only moves half the total roll. When consecutive numbers are rolled, the player may move one piece the total of the two dice and the second piece the value of the lower die, or may move one piece the total of the die and another piece the total of the dice minus 1. When the roll is two non-consecutive numbers, the player moves the values of the individual dice. The first player to move their pieces around the board and back to the starting position wins.
(game "Tsun K'i" (players 2) (equipment {(board (scale 10 2 (rectangle 8 2)) {(track "Track1" "1,N,W,S,N,E1,S" P1 directed:True) (track "Track2" "14,S,E,N,S,W1,N" P2 directed:True)}) (piece "Stick" Each) (dice d:6 num:2) (regions "Exit" P1 (sites {"B1" "B2"})) (regions "Exit" P2 (sites {"A7" "A8"}))}) (rules (start {(place Stack "Stick1" (sites {"B1" "B2"}) count:8) (place Stack "Stick2" (sites {"A7" "A8"}) count:8)}) (play (do (if (le (var) 0) (roll)) next:(if (can Move (if (and (equals 2 (count Pips)) (is AnyDie 1)) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (is Friend (who at:(site) level:(level))) (move Remove (site) level:(level))))) (if (equals (face 16) (face 17)) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (le (var) 0) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 16))))) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(count Pips))) (then (if (le (var) 0) (and (moveAgain) (set Var 1)) (set Var 0))))))) (if (or (equals (face 16) (sub (face 17) 1)) (equals (face 16) (add (face 17) 1))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (notEqual (var) (sub (count Pips) 1)) (or (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(if (lt (face 16) (face 17)) (face 16) (face 17))))) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(sub (count Pips) 1)))) (then (if (le (var) 0) (and (moveAgain) (set Var (sub (count Pips) 1))) (set Var 0))))) (if (notEqual (var) (count Pips)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(count Pips))) (then (if (le (var) 0) (and (moveAgain) (set Var (count Pips))) (set Var 0)))))))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (notEqual (var) (face 16)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 16))) (then (if (le (var) 0) (and (moveAgain) (set Var (face 16))) (set Var 0))))) (if (notEqual (var) (face 17)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 17))) (then (if (le (var) 0) (and (moveAgain) (set Var (face 17))) (set Var 0)))))))))))) (if (and (equals 2 (count Pips)) (is AnyDie 1)) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (if (is Friend (who at:(site) level:(level))) (move Remove (site) level:(level))))) (if (equals (face 16) (face 17)) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (le (var) 0) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 16))))) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(count Pips))) (then (if (le (var) 0) (and (moveAgain) (set Var 1)) (set Var 0))))))) (if (or (equals (face 16) (sub (face 17) 1)) (equals (face 16) (add (face 17) 1))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (notEqual (var) (sub (count Pips) 1)) (or (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(if (lt (face 16) (face 17)) (face 16) (face 17))))) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(sub (count Pips) 1)))) (then (if (le (var) 0) (and (moveAgain) (set Var (sub (count Pips) 1))) (set Var 0))))) (if (notEqual (var) (count Pips)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(count Pips))) (then (if (le (var) 0) (and (moveAgain) (set Var (count Pips))) (set Var 0)))))))) (forEach Site (sites Occupied by:Mover top:False) (forEach Level (site) (or (if (notEqual (var) (face 16)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 16))) (then (if (le (var) 0) (and (moveAgain) (set Var (face 16))) (set Var 0))))) (if (notEqual (var) (face 17)) (move (from (site) level:(level)) (to (trackSite Move from:(site) "Track" steps:(face 17))) (then (if (le (var) 0) (and (moveAgain) (set Var (face 17))) (set Var 0))))))))))) (move Pass (then (set Var 0)))) (then (if (and (is In (last To) (sites Mover "Exit")) (not (is In (last From) (sites Mover "Exit")))) (remove (last To) level:(last LevelTo)))))) (end (if (no Pieces Mover) (result Mover Win))))) 
