2x12 board, with spaces as points, divided in two. Fifteen pieces per player, which start stacked, two on the players' first three points and three in the next three points. Two six-sided dice. Players unstack the pieces by moving pieces off of the stack, but remaining on the same point, according to the throws of the dice. The value of the throw indicates the number of the point which can be unstacked. For example, a throw of 1 and 4 allows the player to unstack the pieces on points 1 and 4. When all of a player's pieces are unstacked, they must be restacked, in the same way. When they have been successfully restacked, the player then bears off the pieces from this quadrant of the board. When bearing off, players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The first player to bear off all their pieces wins.
(game "Yahoudieh" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {7 8 9 10 11 12} P1 directed:True) (track "Track2" {18 17 16 15 14 13} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die if:(notEqual (pips) 0) (if (equals (trackSite Move steps:(pips)) -1) (move Remove (from)) (move (from) (to (trackSite Move steps:(pips))))))) (map "StartTrack" {(pair P1 7) (pair P2 18)})}) (rules (start {(place Stack "Disc1" (sites {7 8 9}) count:2) (place Stack "Disc1" (sites {10 11 12}) count:3) (place Stack "Disc2" (sites {13 14 15}) count:3) (place Stack "Disc2" (sites {16 17 18}) count:2)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Die if:(notEqual (pips) 0) (or (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 0) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and (if (equals 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 2))) (if (not (all DiceUsed)) (moveAgain)))))) (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and (forEach Level (last To) (set State at:(last To) level:(level) 2)) (if (not (all DiceUsed)) (moveAgain)))))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (or (equals (state at:(site)) 0) (equals (state at:(site)) 1)))) "Stacking")) (phase "Stacking" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Die if:(notEqual (pips) 0) (or (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 2) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and {(if (equals 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 0))) (if (not (all DiceUsed)) (moveAgain))})))) (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and (forEach Level (last To) (set State at:(last To) level:(level) 0)) (if (not (all DiceUsed)) (moveAgain)))))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (equals (state at:(site)) 2))) "BearingOff")) (phase "BearingOff" (play (do (if (or (all DiceEqual) (not (is Prev Mover))) (roll)) next:(forEach Piece top:True) (then (if (not (all DiceUsed)) (moveAgain))))) (end (if (no Pieces Mover) (result Mover Win))))})) 
