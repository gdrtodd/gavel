1. Agon is played on a hexagonal board made of 91 hexagonal playing spaces. Each concentric layer for hexagons is so coloured that it is easy to see a playing space's distance from the centre of the board. 2. The players each start with a queen and six guards. They are placed in a set configuration at the edge of the board, as shown again in the diagram. 3. In his turn a player moves a piece one space in any direction, except for any direction that leads away from the centre. 5. A piece may not land on or jump over another. 6. A piece may not move adjacent to two enemy pieces such that it is directly between them. 7. Only a queen may move to the central space. 8. If a piece becomes sandwiched between two enemies, it is captured. 9. If the queen is captured, then its owner must, on his next turn, remove the queen from her predicament and place her on any other space on the board. 10. Otherwise if one of his guards is captured, the player must remove the guard from his predicament, but the guard must be placed on a space at the edge of the board. 11. Only one captured piece may be so removed each turn; so a player may arrest his opponent's strategy for a number of turns if he makes multiple captures at once or in quick succession. 12. A player has won the game when his queen rests on the central space, and her six guards are on the six spaces adjacent to her. 13. A player has lost the game if his six guards are adjacent to the central space but his queen is not between them, as this configuration prevents either player from ever winning the game.
(game "Agon" (players 2) (equipment {(board (hex 6)) (piece "Pawn" Each (move Step (to if:(and {(is Empty (to)) (ge (count Steps Orthogonal (from) (centrePoint)) (count Steps Orthogonal (to) (centrePoint))) (notEqual (to) (centrePoint))})) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (set State at:(between) 1))) (to if:(is Friend (who at:(to)))))))) (piece "Queen" Each (move Step (to if:(and (is Empty (to)) (ge (count Steps Orthogonal (from) (centrePoint)) (count Steps Orthogonal (to) (centrePoint))))) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (set State at:(between) 1))) (to if:(is Friend (who at:(to))))))))}) (rules (start {(place "Pawn1" (sites {89 60 20 3 6 51})) (place "Pawn2" (sites {87 84 39 1 30 70})) (place "Queen1" 85) (place "Queen2" 5)}) (play (priority {(forEach Site (forEach (sites Occupied by:Mover component:"Queen") if:(notEqual 0 (state at:(site)))) (move (from (site)) (to (sites Board) if:(is Empty (to))) (then (set State at:(last To) 0)))) (forEach Site (forEach (sites Occupied by:Mover component:"Pawn") if:(notEqual 0 (state at:(site)))) (move (from (site)) (to (sites Outer) if:(is Empty (to))) (then (set State at:(last To) 0)))) (do (forEach Piece) ifAfterwards:(not (can Move (intervene (from (last To)) Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to))))))))})) (end (if (all Sites (difference (sites Around (sites Centre)) (sites Centre)) if:(equals (what at:(site)) (id "Pawn" Mover))) {(if (equals (what at:(centrePoint)) (id "Queen" Mover)) (result Mover Win)) (if (not (equals (what at:(centrePoint)) (id "Queen" Mover))) (result Mover Loss))})))) 
