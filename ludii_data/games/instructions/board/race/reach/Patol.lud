Forty stones are arranged in a circle, with a larger gap between every tenth and eleventh stone. The gaps between the stones are the playing spaces. One piece per player. Any number of players. Three sticks used as dice, marked on one side and blank on the other. Throws are as follows: One marked side up = 3, two marked sides up = 2, three marked sides up = 10; all blank sides up = 5. Players enter their pieces from one of the wider gaps in the board, and chooses to move either clockwise or anti-clockwise. When a player's piece lands on a space occupied by the opponent, the opponent's piece is sent back to the space in which they entered. The first player to complete the circuit wins. The game has 2 players. Captures are possible.
(game "Patol" (players 2) (equipment {(board (add (remove (concentric {44}) vertices:{43 21 0 22}) edges:{{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} loop:True) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} loop:True)} use:Edge) (regions "Gates" (sites {36 37 38 39})) (piece "Marker" Each (if (equals (value Player Mover) -1) (or (if (notEqual (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) -1) (if (or (is In (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (sites Empty)) (is Enemy (who at:(trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips)))))) (move (from (from) level:(level)) (to (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to)))))))) (then (if (equals (value Player Mover) -1) (set Value Mover 1)))) (if (notEqual (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) -1) (if (or (is In (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (sites Empty)) (is Enemy (who at:(trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips)))))) (move (from (from) level:(level)) (to (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to)))))))) (then (if (equals (value Player Mover) -1) (set Value Mover 2))))) (if (notEqual (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips)))) -1) (if (or (is In (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips)))) (sites Empty)) (is Enemy (who at:(if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips))))))) (move (from (from) level:(level)) (to (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "ThrowDiceValue" (count Pips)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to))))))))))) (dice d:2 from:0 num:3) (map "ThrowDiceValue" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 10)}) (hand Each)}) (rules (start (place "Marker" "Hand")) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites "Gates")) (then (set Value at:(last To) (last To))))) (nextPhase Mover "Playing")) (phase "Playing" (play (do (roll) next:(forEach Piece))) (end (if (if (equals 1 (value Player Mover)) (is In (value Piece at:(where "Marker" Mover)) (sites Track "TrackCW" from:(trackSite Move from:(last From) "TrackCW" steps:1) to:(last To))) (is In (value Piece at:(where "Marker" Mover)) (sites Track "TrackCCW" from:(trackSite Move from:(last From) "TrackCCW" steps:1) to:(last To)))) (result Mover Win))))})) 
