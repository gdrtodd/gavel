Spiral board of any number of spaces, rendered as holes in the sand. The first space is a mound. Any number of players. One piece per player, and one piece, the "bankor," all of which begin on the first space on the outer ring of the spiral. Four sticks, with one green and one white side, used as dice. The throws are as follows: One white side up = 1; two white sides up = 0, or 8 when playing as the bankor; three white sides up = 3; four white sides up = 4; four green sides up = 6. A player must throw a 1 to begin moving their piece. Pieces proceed along the spiral toward the central spot. The first player to reach the spot allows the other players three turns, and then begins playing as the bankor. When the bankor overtakes another player's piece, it drags them with it. When the bankor reaches the penultimate spot, the players it is dragging with them loses. The game has 4 players.
(game "Sik" (players 4) (equipment {(board (spiral turns:5 sites:86) {(track "Track" {85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} directed:True)} use:Vertex) (dice d:2 from:0 num:4) (map "Throw" {(pair 0 4) (pair 1 3) (pair 2 0) (pair 3 1) (pair 4 6)}) (piece "Stick" Each (move (from (from) level:(level) if:(or (equals 1 (state at:(from) level:(level))) (equals (mapEntry "Throw" (count Pips)) 1))) (to (trackSite Move "Track" steps:(mapEntry "Throw" (count Pips))) if:True) (then (if (notEqual 1 (state at:(last To) level:(last LevelTo))) (set State at:(last To) level:(last LevelTo) 1))))) (piece "Bankor" Neutral)}) (rules (start {(place Stack items:{"Stick4" "Stick3" "Stick2" "Stick1"} 85) (place Stack "Bankor0" 85)}) (play (do (roll) next:(if (equals 0 (where "Stick" Mover)) (if (lt (value Player Mover) 2) (move Pass (then (set Value Mover (add 1 (value Player Mover))))) (if (or (equals (mover) (state at:(where "Bankor" Neutral) level:(where Level "Bankor" Neutral at:(where "Bankor" Neutral)))) (equals 0 (state at:(where "Bankor" Neutral) level:(where Level "Bankor" Neutral at:(where "Bankor" Neutral))))) (if (notEqual 0 (mapEntry "Throw" (count Pips))) (move (from (where "Bankor" Neutral) level:(where Level "Bankor" Neutral at:(where "Bankor" Neutral))) (to (trackSite Move from:(where "Bankor" Neutral) "Track" steps:(mapEntry "Throw" (count Pips)))) (then (and (if (notEqual (mover) (state at:(where "Bankor" Neutral) level:(where Level "Bankor" Neutral at:(where "Bankor" Neutral)))) (set State at:(where "Bankor" Neutral) level:(where Level "Bankor" Neutral at:(where "Bankor" Neutral)) (mover))) (if (equals (last To) 0) (forEach Site (sites Track "Track" from:(last From) to:(last To)) (if (notEqual (site) (last To)) (forEach Level (site) FromTop (remove (site) level:(level))))) (forEach Site (sites Track "Track" from:(last From) to:(last To)) (if (notEqual (site) (last To)) (forEach Level (site) FromTop (fromTo (from (site) level:(level)) (to (last To))))))))))))) (if (notEqual 0 (mapEntry "Throw" (count Pips))) (forEach Piece))))) (end {(forEach Player if:(no Pieces Player) (result Player Loss)) (forEach Player if:(or (equals (where "Bankor" Neutral) 0) (and (is Occupied 0) (ge 1 (count Sites in:(difference (sites Occupied by:All) (where "Bankor" Neutral)))))) (result Player Win))}))) 
