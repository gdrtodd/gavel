Each player starts with their five pieces in troughs on their side of the game board, with players sitting perpendicular to one another. When you move a piece, you move it a distance based on the strength indicated in the trough that you're leaving. Once the piece has made its way across the board, you move it back based on the strength on the other side. If you pass over an opposing piece while moving, then that opposing piece must return to its last departing base and your moving piece advances one cell further than where the opposing piece was. To win Squadro, you need to be the first player to make a return trip with four of your five pieces.
(game "Squadro" (players {(player E) (player S)}) (equipment {(board (remove (square 7) vertices:{0 6 42 48}) use:Vertex) (piece "Minus" Each (if (equals 3 (state at:(from))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 3)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 3)) (to if:(is Empty (to)))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 2)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 2)) (to if:(is Empty (to))) (then (if (is Enemy (who at:(ahead (last To) (if (equals 1 (value Piece at:(last To))) Forward Backward)))) (moveAgain)))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to))) (then (if (is Enemy (who at:(ahead (last To) (if (equals 1 (value Piece at:(last To))) Forward Backward)))) (moveAgain)))) (move Select (from) (then (moveAgain)))))) (if (equals 2 (state at:(from))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 2)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 2)) (to if:(is Empty (to)))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to))) (then (if (is Enemy (who at:(ahead (last To) (if (equals 1 (value Piece at:(last To))) Forward Backward)))) (moveAgain)))) (move Select (from) (then (moveAgain))))) (if (can Move (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to))))) (move Slide (if (equals 1 (value Piece at:(from))) Forward Backward) (between (exact 1)) (to if:(is Empty (to)))) (move Select (from) (then (moveAgain))))))) (regions "Home" P1 (sites Left)) (regions "Home" P2 (sites Top)) (regions "OppositeHome" P1 (sites Right)) (regions "OppositeHome" P2 (sites Bottom)) (map {(pair 39 1) (pair 32 3) (pair 25 2) (pair 18 3) (pair 11 1) (pair 0 3) (pair 1 1) (pair 2 2) (pair 3 1) (pair 4 3)})}) (rules (start {(place "Minus1" coord:"A2" state:3 value:1) (place "Minus1" coord:"A3" state:1 value:1) (place "Minus1" coord:"A4" state:2 value:1) (place "Minus1" coord:"A5" state:1 value:1) (place "Minus1" coord:"A6" state:3 value:1) (place "Minus2" coord:"B7" state:1 value:1) (place "Minus2" coord:"C7" state:3 value:1) (place "Minus2" coord:"D7" state:2 value:1) (place "Minus2" coord:"E7" state:3 value:1) (place "Minus2" coord:"F7" state:1 value:1)}) (play (if (is Prev Mover) (move Hop (from (last To)) (between (range 1 (count Columns)) if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to (if (is Mover P1) (coord row:(if (equals (value Piece at:(between)) 1) (sub (count Rows) 1) 0) column:(column of:(between))) (coord row:(row of:(between)) column:(if (equals (value Piece at:(between)) 1) 0 (sub (count Columns) 1)))))))) (to if:(is Empty (to)))) (forEach Piece) (then (if (is In (last To) (sites Mover "OppositeHome")) (and (set Value at:(last To) 2) (set State at:(last To) (mapEntry (last To)))) (if (and (notEqual (last From) (last To)) (is In (last To) (sites Mover "Home"))) (remove (last To))))))) (end (if (equals (count Pieces Mover) 1) (result Mover Win))))) 
