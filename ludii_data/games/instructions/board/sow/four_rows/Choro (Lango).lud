4x8 board. Two counters in each hole. Opening play: Two players play simultaneously, lifting and sowing counters from their outer rows. The game must begin from one of the rightmost two holes. Rules for sowing and capturing are the same as in the main phase of the game. The opening ends when both players reach an empty hole, and the first player to do so begins play in the main phase. Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: Holes are in 'opposition' when one player has the inner row hole occupied and the opponent has at least the opposite hole in the inner row occupied; if the outer row hole is also occupied it is also in opposition. However, if the opponent's inner row hole is empty and the outer row is occupied, it is not in opposition. If the last hole in a sowing falls into a hole that is is in opposition, the player takes the counters in the opponent's holes in opposition and places them in the outer row hole next to the hole from which the capture occurred. The player then sows the captured counters from this hole. If the capture is only of one counter, the contents of the appropriate outer row hole on the player's side are sown along with the one captured counter. Further captures in the sowing can occur in the same way. If a player can make a capture on the first sowing they must. Otherwise, they can choose any hole on their side to sow. However, each player has four holes from which clockwise plays can be made: the leftmost two holes in both the inner and outer rows. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, they may, starting from the same hole, also be sown clockwise as long as they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise in the normal way from the outer row hole opposite the hole from which the capture was made. A player is not required to capture in a clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses.
(game "Choro (Lango)" (players 2) (equipment {(mancalaBoard 4 8 store:None {(track "TrackCCW1" "0,E,N1,W" loop:True P1) (track "TrackCCW2" "16,E,N1,W" loop:True P2) (track "TrackCW1" "7,W,N1,E" loop:True P1) (track "TrackCW2" "24,E,S1,W" loop:True P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (regions "FourLeftMost" P1 (intersection (expand (sites Left)) (expand (sites Bottom)))) (regions "FourLeftMost" P2 (intersection (expand (sites Right)) (expand (sites Top)))) (regions "TwoRightMostOuter" P1 (intersection (expand (sites Right)) (sites Bottom))) (regions "TwoRightMostOuter" P2 (intersection (expand (sites Left)) (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 to:(union (sites P1 "Home") (sites P2 "Home")))) phases:{(phase "OuterPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (equals 1 (value Player Mover)) (sites Mover "Outer") (sites Mover "TwoRightMostOuter"))) if:(if (is Prev Mover) (lt 0 (count at:(from))) (and (if (equals 0 (count Sites in:(forEach (sites Mover "Outer") if:(and {(lt 1 (count at:(site))) (is In (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (add (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8) (sub (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8)))})))) True (is In (from) (forEach (sites Mover "Outer") if:(and {(lt 1 (count at:(site))) (is In (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (add (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8) (sub (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8)))})))) (lt 1 (count at:(from)))))) (then (sow count:(if (is Prev Mover) (var "Count") (count at:(last From))) "TrackCCW" owner:(mover) apply:(and (if (lt 1 (count at:(to))) (and (moveAgain) (if (and (is Occupied (if (is Mover P1) (add (to) 8) (sub (to) 8))) (is In (to) (sites Mover "Inner"))) (and {(fromTo (from (if (is Mover P1) (add (to) 8) (sub (to) 8))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) 8) (sub (to) 8)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))) (set Var "Replay" (if (is Mover P1) (sub (to) 8) (add (to) 8))) (if (equals 1 (count at:(if (is Mover P1) (sub (to) 8) (add (to) 8)))) (set Var "Count" (add {1 (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2))))})) (set Var "Count" (add (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))))}) (and (set Var "Replay" (to)) (set Var "Count" (count at:(to))))))) (if (notEqual 1 (value Player Mover)) (set Value Mover 1))))))) (nextPhase Mover (equals 1 (count at:(last To afterConsequence:True))) "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "FourLeftMost")) if:(and {(if (is Prev Mover) (lt 0 (count at:(from))) (lt 1 (count at:(from)))) (is In (from) (sites Mover "FourLeftMost")) (is In (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (add (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8) (sub (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8)))})) (then (sow count:(if (is Prev Mover) (var "Count") (count at:(last From))) "TrackCW" owner:(mover) apply:(if (lt 1 (count at:(to))) (and (moveAgain) (if (and (is Occupied (if (is Mover P1) (add (to) 8) (sub (to) 8))) (is In (to) (sites Mover "Inner"))) (and {(fromTo (from (if (is Mover P1) (add (to) 8) (sub (to) 8))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) 8) (sub (to) 8)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))) (set Var "Replay" (if (is Mover P1) (sub (to) 8) (add (to) 8))) (if (equals 1 (count at:(if (is Mover P1) (sub (to) 8) (add (to) 8)))) (set Var "Count" (add {1 (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2))))})) (set Var "Count" (add (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))))}) (and (set Var "Replay" (to)) (set Var "Count" (count at:(to)))))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) if:(if (is Prev Mover) (lt 0 (count at:(from))) (and (if (equals 0 (count Sites in:(forEach (sites Mover) if:(and {(lt 1 (count at:(site))) (is In (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (add (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8) (sub (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8)))})))) True (is In (from) (forEach (sites Mover) if:(and {(lt 1 (count at:(site))) (is In (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (add (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8) (sub (trackSite Move from:(site) "TrackCCW" steps:(count at:(site))) 8)))})))) (lt 1 (count at:(from)))))) (then (sow count:(if (is Prev Mover) (var "Count") (count at:(last From))) "TrackCCW" owner:(mover) apply:(if (lt 1 (count at:(to))) (and (moveAgain) (if (and {(is Occupied (if (is Mover P1) (add (to) 8) (sub (to) 8))) (is In (to) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (add (to) 8) (sub (to) 8))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) 8) (sub (to) 8)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))) (to (if (is Mover P1) (sub (to) 8) (add (to) 8))) count:(count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))) (set Var "Replay" (if (is Mover P1) (sub (to) 8) (add (to) 8))) (if (equals 1 (count at:(if (is Mover P1) (sub (to) 8) (add (to) 8)))) (set Var "Count" (add {1 (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2))))})) (set Var "Count" (add (count at:(if (is Mover P1) (add (to) 8) (sub (to) 8))) (count at:(if (is Mover P1) (add (to) (mul 8 2)) (sub (to) (mul 8 2)))))))}) (and (set Var "Replay" (to)) (set Var "Count" (count at:(to)))))))))))))} (end (if (no Moves Next) (result Mover Win))))) 
