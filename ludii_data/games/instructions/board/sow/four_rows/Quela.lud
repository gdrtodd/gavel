4x6-7 board. Two counters in each hole; before beginning each player rearranges these as they wish, with the following rules: The leftmost hole in the outer row must have the most counters; holes in the inner row may only have one counter. Initial phase: In this phase, only holes with two or fewer counters may be used to sow. Sowing occurs in an anti-clockwise direction, and when a counter lands in an occupied hole the sowing continues. When the final counter lands in an empty hole, the turn ends. If the empty hole is in the player's inner row, counters in the opponent's inner row opposite are captured, and if there are also counters in the opponent's outer row hole opposite, these are also taken. The initial phase ends for a player when two of the player's counters have been taken. On the next turn they must play from the hole with the largest number of counters, and from that point they may move from any hole. The rules for play remain the same as in the initial phase otherwise. The player who captures all of the opponent's counters wins. Each player has 6 holes by row.
(game "Quela" (players 2) (equipment {(mancalaBoard 4 6 store:None {(track "TrackCCW1" "0,E,N1,W" loop:True P1) (track "TrackCCW2" "12,E,N1,W" loop:True P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map "LeftMost" {(pair P1 0) (pair P2 23)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 to:(union (sites P1 "Home") (sites P2 "Home")))) phases:{(phase "Rearrangement" (play (or (move (from (sites Mover "Home") if:(is Occupied (from))) (to (difference (sites Mover) (from)))) (if (and (all Sites (difference (sites Mover "Home") (mapEntry "LeftMost" Mover)) if:(gt (count at:(mapEntry Mover)) (count at:(site)))) (all Sites (sites Mover "Inner") if:(equals 1 (count at:(site))))) (move Pass)))) (nextPhase (all Passed) "InitialPhase")) (phase "InitialPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (sites Mover "Home")) if:(or (is Prev Mover) (and (gt 3 (count at:(from))) (is Occupied (from))))) (then (sow "TrackCCW" owner:(mover) apply:(if (lt 1 (count at:(to))) (moveAgain) (if (is In (to) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (add (to) 6) (sub (to) 6))) (and (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))))))))))))) {(nextPhase P1 (lt 1 (count Cell at:(handSite P2))) "MiddlePhase") (nextPhase P2 (lt 1 (count Cell at:(handSite P1))) "MiddlePhase")}) (phase "MiddlePhase" (play (move Select (from (forEach (sites Mover "Home") if:(equals (max (results from:(sites Mover "Home") to:(sites Mover "Home") (count at:(to)))) (count at:(site))))) (then (sow "TrackCCW" owner:(mover) apply:(if (lt 1 (count at:(to))) (moveAgain) (if (is In (to) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (add (to) 6) (sub (to) 6))) (and (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))))))))))))) (nextPhase Mover "FinalPhase")) (phase "FinalPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (sites Mover "Home")) if:(is Occupied (from))) (then (sow "TrackCCW" owner:(mover) apply:(if (lt 1 (count at:(to))) (moveAgain) (if (is In (to) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (add (to) 6) (sub (to) 6))) (and (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (if (is Occupied (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))))))))))))) (end (if (no Moves Next) (result Mover Win))))})) 
