2x6 board with two stores. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole the counters are picked up and sowing continues, unless the hole contained three counters, causing it to contain four, in which case the counters are captured. An unbroken sequence of holes with four counters in them behind the hole from which the first capture was made are also captured. In addition, any holes which were sown into during the course of the turn which now contain four counters are captured by the owner of the row. Play continues until there are only eight counters left. The first player to make a capture with these eight counters captures them all. The player with the most counters wins.
(game "Duene" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" loop:True)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 to:(sites Track))) phases:{(phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) if:(lt 0 (count at:(from)))) (then (do (and (set Var "From" (last From)) (sow apply:(and (set Var "To" (to)) (if (equals (count at:(to)) 4) (fromTo (from (to)) (to (mapEntry (mover))) count:(count at:(to))) (if (gt (count at:(to)) 1) (moveAgain)))) backtracking:(equals (count at:(to)) 4))) next:(and {(pass) (forEach Site (forEach (sites Track from:(var "From") to:(var "To")) if:(and (is In (site) (sites P1)) (equals 4 (count at:(site))))) (fromTo (from (site)) (to (mapEntry P1)) count:(count at:(site)))) (forEach Site (forEach (sites Track from:(var "From") to:(var "To")) if:(and (is In (site) (sites P2)) (equals 4 (count at:(site))))) (fromTo (from (site)) (to (mapEntry P2)) count:(count at:(site))))}))))) (nextPhase (le (count in:(sites Track)) 8) "EndGame")) (phase "EndGame" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) if:(lt 0 (count at:(from)))) (then (sow apply:(if (equals (count at:(to)) 4) (forEach Site (sites Track) (if (lt 0 (count at:(site))) (fromTo (from (site)) (to (mapEntry (mover))) count:(count at:(site))))) (if (gt (count at:(to)) 1) (moveAgain))))))))} (end (if (all Sites (sites Track) if:(equals 0 (count at:(site)))) (byScore {(score P1 (add (count at:(mapEntry P1)) (count in:(sites P1)))) (score P2 (add (count at:(mapEntry P2)) (count in:(sites P2))))}))))) 
