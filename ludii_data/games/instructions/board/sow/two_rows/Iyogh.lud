2x8 board. Four counters in each hole. Play begins with both players placing all of the counters in the rightmost three holes in their row into the rightmost hole. Counters are sown in an anti-clockwise fashion, but they can be sown clockwise only if it leads to a capture. Counters are captured when the final counter is sown into a hole opposite a hole containing one or three counters, and those are take. If the hole opposite the next hole also contains one or three, these are also taken, continuing until a hole with any other number of counters is reached. Instead of taking counters from one of their holes, a player may sow any or all of the counters they have captured, beginning from the leftmost hole. The same rules for sowing apply. The game ends when one player has no counters in their holes.
(game "Iyogh" (players 2) (equipment {(mancalaBoard 2 8 store:None {(track "TrackCCW" "0,E,N,W" loop:True) (track "TrackCW" "7,W,N,E" loop:True)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 15)}) (map "RightMost" {(pair P1 7) (pair P2 8)}) (regions "RightMost" P1 (sites {5 6})) (regions "RightMost" P2 (sites {9 10}))}) (rules (start (set Count 4 to:(sites Track))) phases:{(phase "Opening" (play (move (from (sites Mover "RightMost") if:(is Occupied (from))) (to (mapEntry "RightMost" Mover)) count:(count at:(from)))) (nextPhase Mover (all Sites (sites Mover "RightMost") if:(is Empty (site))) "Sowing")) (phase "Sowing" (play (or {(if (is Occupied Cell (handSite Mover)) (forEach Value min:1 max:(count Cell at:(handSite Mover)) (do (set Var "NumToSow" (value)) next:(move (from Cell (handSite Mover)) (to (mapEntry "LeftMost" Mover)) count:(value) (then (and (sow count:(var "NumToSow") "TrackCCW" if:(or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) apply:(if (or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) forward:True) (set Var "NumToSow" 0))))))) (if (is Occupied Cell (handSite Mover)) (forEach Value min:1 max:(count Cell at:(handSite Mover)) (do (set Var "NumToSow" (value)) next:(move (from Cell (handSite Mover) if:(or (equals 1 (count at:(if (is In (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) (sites Bottom)) (add (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) 8) (sub (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) 8)))) (equals 3 (count at:(if (is In (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) (sites Bottom)) (add (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) 8) (sub (trackSite Move from:(mapEntry "LeftMost" Mover) "TrackCW" steps:(value)) 8)))))) (to (mapEntry "LeftMost" Mover)) count:(value) (then (and (sow count:(var "NumToSow") "TrackCW" if:(or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) apply:(if (or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) forward:True) (set Var "NumToSow" 0))))))) (move Select (from (sites Mover) if:(lt 0 (count at:(from)))) (then (sow "TrackCCW" if:(or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) apply:(if (or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) forward:True))) (move Select (from (sites Mover) if:(and (lt 0 (count at:(from))) (or (equals 1 (count at:(if (is In (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) (sites Bottom)) (add (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8) (sub (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8)))) (equals 3 (count at:(if (is In (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) (sites Bottom)) (add (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8) (sub (trackSite Move from:(from) "TrackCW" steps:(count at:(from))) 8))))))) (then (sow "TrackCW" if:(or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) apply:(if (or (equals 1 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8)))) (equals 3 (count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 8) (sub (to) 8))))) forward:True)))})))} (end (forEach Player if:(all Sites (sites Player) if:(equals 0 (count at:(site)))) (result Player Loss))))) 
