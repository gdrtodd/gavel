2x6-9 holes with a store on either end. Play starts with same number of counters in each hole as number of holes in the row (6 counters if 6 holes in a row, etc). Store on either end. A player's store is the store to their left. Stores are included when sowing. Play begins from any hole belonging to the player. Counters are sowed clockwise: if the final counter lands in an empty hole, in player's own row, they take the counters in the opposite hole and place them in the store. If play ends in the store, they can then take counters from any of their holes and sow again. if play ends in an empty hole in the opponent's row, play ends. If play ends in a hole with counters, those are collected and sowing continues. A round ends when there are no counters left in a player's row. The opponent then takes all remaining counters and adds them to their store. Next round begins with each player taking the counters from their store and placing the same number of counters in the holes as when the game began, starting from right to left. Surplus counters are placed in the store. Unfilled holes are excluded from play in this round. Play continues as before. Play continues with as many rounds as needed until one player does not have enough counters to fill a single hole. Each player has 6 holes.
(game "Main Chongkak" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ENE,E,ESE,WSW,W" loop:True)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "RightMost" {(pair P1 6) (pair P2 (add 6 1))})}) (rules (start {(set RememberValue "Playable" (union (sites Top) (sites Bottom))) (set Count 6 to:(union (sites Bottom) (sites Top)))}) phases:{(phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) if:(and (is Occupied (from)) (is In (from) (sites (values Remembered "Playable"))))) (then (sow apply:(if (and (is In (to) (sites Mover)) (equals 1 (count at:(to)))) (if (is Occupied (if (is Mover P1) (add (to) 6) (sub (to) 6))) (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6))))) (if (equals (to) (mapEntry Mover)) (and (set Pending) (moveAgain)) (if (and (lt 1 (count at:(to))) (notEqual (to) (mapEntry Next))) (and (moveAgain) (set Var "Replay" (to)))))) skipIf:(and {(not (is In (to) (sites (values Remembered "Playable")))) (notEqual (to) (mapEntry P1)) (notEqual (to) (mapEntry P2))}))))} (then (if (or (all Sites (sites Bottom) if:(equals 0 (count at:(site)))) (all Sites (sites Top) if:(equals 0 (count at:(site))))) (and {(forEach Site (sites P1) (fromTo (from (site)) (to (mapEntry P1)) count:(count at:(site)))) (forEach Site (sites P2) (fromTo (from (site)) (to (mapEntry P2)) count:(count at:(site)))) (forget Value "Playable" All)}))))) (end (if (all Sites (union (sites Top) (sites Bottom)) if:(equals 0 (count at:(site)))) {(if (gt 6 (count at:(mapEntry P1))) (result P2 Win)) (if (gt 6 (count at:(mapEntry P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) if:(equals 0 (count at:(site)))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) if:(is Occupied (site)))) (if (le 6 (count at:(mapEntry Mover))) (move (from (mapEntry Mover)) (to (trackSite FirstSite from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:6 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))})) 
