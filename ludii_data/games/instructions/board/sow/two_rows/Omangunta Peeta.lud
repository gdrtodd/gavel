2x7 board. Six counters in each hole, except the central hole in each row, which contains one counter. Sowing occurs in an anti-clockwise direction. When the last counter is sown, the player picks up the counters in the next hole in the direction of the sowing and continues sowing with those counters. When the hole after the hole in which the final counter is sown is empty, the counters in the next hole are captured, as well as the counters in the hole opposite this hole, and the turn ends. Sowing cannot begin from the central hole of either row. When a capture would occur from one of these central holes, the counters are not captured until the end of the round. At the end of the round, if both players are eligible to capture from the hole, they split the counters, leaving one in the hole if it is an odd number, or two if it is an even number. If only one player captured from the holes, they leave one counter in each hole. If neither player made a capture from the hole, the counters remain in the hole. When the players can no longer play, a new round begins. Each player then fills up as many holes, not counting the central holes, on their side of the board with six counters if possible. Any holes that do not contain counters are out of play. Play continues until one player captures all the counters, and is the winner.
(game "Omangunta Peeta" (players 2) (equipment {(mancalaBoard 2 7 store:None (track "Track" "0,E,N,W" loop:True)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 6 to:(difference (sites Track) (sites Centre))) (set Count 1 to:(sites Centre)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) phases:{(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (difference (sites Mover) (sites Centre))) if:(and (is Occupied (from)) (is In (from) (sites (values Remembered "Playable"))))) (then (sow apply:(if (is Occupied (trackSite Move from:(to) "Track" steps:1)) (and (moveAgain) (set Var "Replay" (to))) (if (is In (trackSite Move from:(to) "Track" steps:2) (sites Centre)) (set Value Mover 1) (and (if (is Occupied (trackSite Move from:(to) "Track" steps:2)) (fromTo (from (trackSite Move from:(to) "Track" steps:2)) (to (handSite Mover)) count:(count at:(trackSite Move from:(to) "Track" steps:2)))) (if (is Occupied (if (is In (trackSite Move from:(to) "Track" steps:2) (sites Bottom)) (add (trackSite Move from:(to) "Track" steps:2) 7) (sub (trackSite Move from:(to) "Track" steps:2) 7))) (fromTo (from (if (is In (trackSite Move from:(to) "Track" steps:2) (sites Bottom)) (add (trackSite Move from:(to) "Track" steps:2) 7) (sub (trackSite Move from:(to) "Track" steps:2) 7))) (to (handSite Mover)) count:(count at:(if (is In (trackSite Move from:(to) "Track" steps:2) (sites Bottom)) (add (trackSite Move from:(to) "Track" steps:2) 7) (sub (trackSite Move from:(to) "Track" steps:2) 7)))))))) skipIf:(and (not (is In (to) (sites Centre))) (not (is In (to) (sites (values Remembered "Playable"))))))))} (then (if (all Sites (difference (sites Board) (sites Centre)) if:(equals 0 (count at:(site)))) (and {(forget Value "Playable" All) (if (notEqual 0 (add (count at:3) (count at:10))) (if (and (equals 1 (value Player P1)) (equals 1 (value Player P2))) (if (is Even (add (count at:3) (count at:10))) (and {(fromTo (from 3) (to Cell (handSite P1)) count:(sub (count at:3) 1)) (fromTo (from 10) (to Cell (handSite P1)) count:(sub (count at:10) 1)) (fromTo (from Cell (handSite P1)) (to Cell (handSite P2)) count:(div (sub (add (count at:3) (count at:10)) 2) 2))}) (and {(fromTo (from 3) (to Cell (handSite P1)) count:(sub (count at:3) 1)) (fromTo (from 10) (to Cell (handSite P1)) count:(count at:10)) (fromTo (from Cell (handSite P1)) (to Cell (handSite P2)) count:(div (sub (add (count at:3) (count at:10)) 1) 2))})) (if (equals 1 (value Player P1)) (and (fromTo (from 3) (to Cell (handSite P1)) count:(sub (count at:3) 1)) (fromTo (from 10) (to Cell (handSite P1)) count:(sub (count at:10) 1))) (if (equals 1 (value Player P2)) (and (fromTo (from 3) (to Cell (handSite P2)) count:(sub (count at:3) 1)) (fromTo (from 10) (to Cell (handSite P2)) count:(sub (count at:10) 1)))))))}))))) (end (if (all Sites (difference (sites Board) (sites Centre)) if:(equals 0 (count at:(site)))) {(if (equals 0 (count Cell at:(handSite P1))) (result P2 Win)) (if (equals 0 (count Cell at:(handSite P2))) (result P1 Win))})) (nextPhase (all Sites (difference (sites Board) (sites Centre)) if:(equals 0 (count at:(site)))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (difference (sites Mover) (sites Centre)) if:(is Occupied (site)))) (if (le 6 (count Cell at:(handSite Mover))) (move (from Cell (handSite Mover)) (to (difference (sites Mover) (sites Centre)) if:(is Empty (to))) count:6 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))})) 
