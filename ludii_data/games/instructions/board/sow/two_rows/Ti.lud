2x6 board with two stores. Four counters per hole. Sowing occurs in an anti-clockwise direction. In the first and second moves, players may choose to drop as many counters as they wish into the holes they are sowing into. From the third turn on, the players must sow one counter at a time. The hole from which a sowing began is skipped if the sowing goes all the way around the board. When the final counter lands in a hole containing one or two people, thus causing it to contain two or three, these are captured. Any previous holes, in an unbroken sequence, also containing two or three counters, are captured. A move of a single counter cannot capture. When a player's row is empty, the opponent must sow into their row if it is possible to do so. Play ends when one player's row is empty, and the opponent claims all of the remaining counters. The player with the most counters wins.
(game "Ti" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" loop:True)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 to:(sites Track))) phases:{(phase "TwoFirstTurn" (play (if (is Prev Mover) (forEach Value min:1 max:(var "NumCounters") (move Add (piece (id "Seed" Shared)) (to (trackSite Move from:(last To) "Track" steps:1) (apply (set Var "NumCounters" (sub (var "NumCounters") (value))))) count:(value) (then (if (lt 0 (var "NumCounters")) (moveAgain) (set Value Mover (add 1 (value Player Mover))))))) (move Select (from (sites Mover "Home") if:(gt (count at:(from)) 0)) (then (and {(moveAgain) (remove (last To) count:(count at:(last To))) (set Var "NumCounters" (count at:(last To)))}))))) (nextPhase Mover (equals (value Player Mover) 1) "Sowing")) (phase "Sowing" (play (do (or (move Select (from (sites Mover "Home") if:(gt (count at:(from)) 1)) (then (sow if:(or (equals (count at:(to)) 2) (equals (count at:(to)) 3)) apply:(fromTo (from (to)) (to (mapEntry (mover))) count:(count at:(to))) includeSelf:False backtracking:True))) (move Select (from (sites Mover "Home") if:(equals (count at:(from)) 1)) (then (sow)))) ifAfterwards:(lt 0 (count in:(sites Next "Home"))))))} (end (if (no Moves Mover) (byScore {(score P1 (add (count at:(mapEntry P1)) (count in:(sites P1)))) (score P2 (add (count at:(mapEntry P2)) (count in:(sites P2))))}))))) 
