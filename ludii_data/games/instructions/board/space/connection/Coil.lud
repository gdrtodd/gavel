This game is played on a hexagonal board made up of hexagonal cells, usually 7 cells per side, although bigger sizes may also be used. Initially the board is empty except for the six corner cells, upon which black stones are placed. Then the players take it in turns to place 1-3 black stones each turn until one decides to pass; that player then becomes Black, and the other becomes White. After that, players take it in turns to place one stone of their colour on the board on any empty hex. If Black forms a continuous loop composed of their pieces, they win; if the board fills up with no loop of Black pieces being formed, White wins. During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action). Alternatively, you may Pass at the start of your turn to take Black. After that, you and your opponent will alternate playing one stone of your colour per turn, until the board is full or Black forms a loop. Played on a Hexagonal Board, pre-filled corners. The game is played on a board with 7 hexes per side.
(game "Coil" (players 2) (equipment {(board (hex Hexagon 7)) (piece "Disc" Each)}) (rules (start {(place "Disc2" {0 (sub (div (sub (mul {3 7 7}) 7) 2) 1) (add 1 (sub (mul {3 7 7}) (mul 4 7)))}) (place "Disc2" {(sub 7 1) (add 1 (div (sub (mul {3 7 7}) (mul 5 7)) 2)) (sub (mul {3 7 7}) (mul 3 7))})}) phases:{(phase "Opening" (play (or (or (move Add (piece (id "Disc" P2)) (to (sites Empty) if:(not (is Within (id "Disc" P2) in:(sites Around (to))))) (then (if (lt (count MovesThisTurn) 2) (moveAgain)))) (move Set NextPlayer (player (next)))) (if (equals (count MovesThisTurn) 0) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now Black. Player 2 is now White." to:All))) (note "Player 1 remains White. Player 2 remains Black." to:All) (then (do (set NextPlayer (player 1)) next:(set Var 1))))))))) (nextPhase (equals 1 (var)) "Playing")) (phase "Playing" (play (move Add (to (sites Empty)))))} (end (forEach Player if:(and {(equals 1 (var)) (equals (id Player) (mover)) (is Loop)}) (result Player Win))))) 
