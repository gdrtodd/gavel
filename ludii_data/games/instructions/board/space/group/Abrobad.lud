Goal: You try to both reduce the number of your own groups as much as possible, and also to block your opponent's ability to reduce his groups down to fewer than yours. Whoever decides to end the game must fill the empty spaces with opponent's pieces, and only then, wins by having equal or fewer groups. Play: Starting with the board empty, player's take turns placing a piece of their color on an empty position that does not abut any friendly piece. If it is impossible to place a piece, the player, instead, moves a piece to the first empty position in any direction. But whenever a new opportunity for placement is available, the turn must be used for placement. Ending the Game: The game ends at the choice of the player about to move, but only at the beginning of a turn in which there is no forced placement. Before scoring, the empty spaces are filled with the opponent's pieces. The player who ended the game wins unless the opponent has fewer groups. Because the empty spaces are filled with opponent's pieces, a player who ends the game too soon will lose. On the other hand, since ties go to the player who ends the game, it is important to end the game as soon as you can actually win. Variations: Options are available to select the board size, and also to use other movement rules, instead of the standard one. Board & size: Hexhex with edges alternately 2 and 3 Movement: Pieces step or jump once, to the first empty position in that direction.
(game "Abrobad" (players 2) (equipment {(board (hex Limping 2)) (piece "Hex" Each)}) (rules (play (priority (move Add (to (sites Empty) if:(equals 0 (count Sites in:(sites Around (to) Own))))) (or (forEach Piece (move Hop (between (range 0 18) if:(is Occupied (between))) (to if:(is Empty (to))))) (move Propose "Conclude" (then (if (is Proposed "Conclude") (add (piece (next)) (to (sites Empty)) (then (and (set Score Mover (count Groups if:(equals (who at:(to)) (mover)))) (set Score Next (count Groups if:(equals (who at:(to)) (next))))))))))))) (end (if (is Proposed "Conclude") (if (le (score Mover) (score Next)) (result Mover Win)) (result Next Win))))) 
