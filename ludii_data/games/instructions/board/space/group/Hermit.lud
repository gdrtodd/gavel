Hermit is a two player abstract game in which players drop stones to create edgewise connected, owned groups of odd sizes 1, 3 and 5 exclusively. The game ends when neither player can legally place a stone. The player with the most groups on the board at game's end wins. Ties are broken by the most groups of size 1 (hermits), then by the most groups of size 3, and finally, the last player to place a stone wins. Scores are formatted 'aa1133', where aa = count of all groups, 11 = count of size 1 groups, and 33 = count of size 3 groups. It is helpful to turn on 'Show Legal Moves' (Alt-M). Base 5 hexagonal board of triangles
(game "Hermit" (players 2) (equipment {(board (tri Hexagon 5) use:Vertex) (piece "Marker" Each) (piece "Marker" Neutral)}) (rules (start {(set Score P1 0) (set Score P2 0)}) (play (do (move Add (to (sites Empty))) ifAfterwards:(or {(equals 1 (size Group at:(last To) Orthogonal)) (equals 3 (size Group at:(last To) Orthogonal)) (equals 5 (size Group at:(last To) Orthogonal))}) (then (addScore Mover (sub (add {(mul 10000 (count Groups Orthogonal if:(equals (who at:(to)) (mover)))) (mul 100 (sub (count Groups Orthogonal if:(equals (who at:(to)) (mover))) (count Groups Orthogonal if:(equals (who at:(to)) (mover)) min:3))) (sub (sub (count Groups Orthogonal if:(equals (who at:(to)) (mover))) (count Groups Orthogonal if:(equals (who at:(to)) (mover)) min:5)) (sub (count Groups Orthogonal if:(equals (who at:(to)) (mover))) (count Groups Orthogonal if:(equals (who at:(to)) (mover)) min:3)))}) (score Mover)))))) (end (if (all Passed) {(if (gt (add {(mul 10000 (count Groups Orthogonal if:(equals (who at:(to)) P1))) (mul 100 (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:3))) (sub (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:5)) (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:3)))}) (add {(mul 10000 (count Groups Orthogonal if:(equals (who at:(to)) P2))) (mul 100 (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:3))) (sub (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:5)) (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:3)))})) (result P1 Win)) (if (lt (add {(mul 10000 (count Groups Orthogonal if:(equals (who at:(to)) P1))) (mul 100 (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:3))) (sub (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:5)) (sub (count Groups Orthogonal if:(equals (who at:(to)) P1)) (count Groups Orthogonal if:(equals (who at:(to)) P1) min:3)))}) (add {(mul 10000 (count Groups Orthogonal if:(equals (who at:(to)) P2))) (mul 100 (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:3))) (sub (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:5)) (sub (count Groups Orthogonal if:(equals (who at:(to)) P2)) (count Groups Orthogonal if:(equals (who at:(to)) P2) min:3)))})) (result P2 Win))} (result Mover Win))))) 
