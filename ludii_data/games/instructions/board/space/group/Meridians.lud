DEFINITIONS Group: like-colored stones adjacent to each other. Singletons are considered groups of size 1. Path: an empty point, or an uninterrupted straight line of empty points that have a pair of like-colored stones on both ends, which are not part of the same group. Such a pair is said to have a path. Dead group: a group in which all stones belonging to it have no path. If any stone belonging to a group has a path, the group is said to have a path. GAME PLAY (Overview) Decide which player plays as which color (Light or Dark) in any adequate way. Light goes first, then alternate turns. On each player's first turn, players place a stone of their own color on any empty point. On each player's second turn, players place another stone of their color so that their own two stones have a path. Then players take actions below on each turn, in this order. 1. Remove all opponentâ€™s dead groups. This happens automatically in Ludii. 2. Place a stone of their own color on an empty point that is on at least one same straight line with an existing friendly stone, and no opponent's stone in between. Passing is not allowed. After the second turn, the player with no stones of their color on the board at the beginning of their turn loses. A board with side lengths 6 and 7 is currently selected
(game "Meridians" (players 2) (equipment {(board (dual (hex Prism 7 6)) use:Vertex) (piece "Disc" Each)}) (rules phases:{(phase "Opening" (play (move Add (to (if (lt 0 (count Sites in:(sites Occupied by:Mover))) (forEach (sites Empty) if:(and (gt (count Pieces Mover in:(sites LineOfSight at:(site))) 0) (equals (count Sites in:(sites Around (site) Own)) 0))) (sites Empty))))) (nextPhase (equals 4 (count Moves)) "Play")) (phase "Play" (play (if (can Move (move Add (to (forEach (sites Empty) if:(gt (count Pieces Mover in:(sites LineOfSight at:(site))) 0))))) (move Add (to (forEach (sites Empty) if:(gt (count Pieces Mover in:(sites LineOfSight at:(site))) 0))) (then (forEach Group (if (all Sites (sites) if:(equals 0 (count Sites in:(difference (intersection (sites Occupied by:Mover) (sites Direction from:(site) stop:(is Occupied (to)) stopIncluded:True)) (sites))))) (remove (sites)))))) (move Pass (then (forEach Group (if (all Sites (sites) if:(equals 0 (count Sites in:(difference (intersection (sites Occupied by:Mover) (sites Direction from:(site) stop:(is Occupied (to)) stopIncluded:True)) (sites))))) (remove (sites)))))))))} (end (if (and (lt 4 (count Moves)) (or (equals 0 (count Sites in:(sites Occupied by:P1))) (equals 0 (count Sites in:(sites Occupied by:P2))))) (result Mover Loss))))) 
