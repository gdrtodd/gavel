Players complete two actions in turns: 1. Place a disc of their colour inside any ring. 2. Pick up the ring in which they placed their disc and move it somewhere else: – It must be placed horizontally or vertically adjacent to at least another ring. – It must be placed on an empty space (i.e. not over a disc or ring that was placed before). - If a player has used up his/her stock of discs, he/she continues by removing one of his/her discs from anywhere on the table and places it in a ring as usual. However rings and discs must always remain (orthogonally or diagonally) connected to form one unique group. The winner is the first player who succeeds in placing four of his/her discs or four of his/her rings in a horizontal, vertical or diagonal row.
(game "Ringo" (players 2) (equipment {(boardless Square) (piece "Disc" Each (move (from (from) level:(level)) (to (sites Occupied by:All component:"Ring") level:0 if:(equals 1 (size Stack at:(to)))) (then (moveAgain)))) (piece "Ring" Each)}) (rules (start {(place "Ring1" (ahead (centrePoint) NE)) (place "Ring1" (ahead (centrePoint) SE)) (place "Ring1" (ahead (centrePoint) SW)) (place "Ring1" (ahead (centrePoint) NW)) (place "Ring2" (ahead (centrePoint) N)) (place "Ring2" (ahead (centrePoint) E)) (place "Ring2" (ahead (centrePoint) S)) (place "Ring2" (ahead (centrePoint) W))}) phases:{(phase "PlacePhase" (play (do (if (not (is Prev Mover)) (move Add (piece (id "Disc" Mover)) (to (sites Occupied by:All component:"Ring") level:0 if:(equals 1 (size Stack at:(to)))) stack:True (then (moveAgain))) (move (from (last To)) (to (sites Around (difference (sites Occupied by:All component:"Ring") (last To)) Orthogonal if:(is Empty (to)))))) ifAfterwards:(equals 1 (count Groups)))) (nextPhase Mover (and (not (is Prev Mover)) (ge (count Turns) (sub (mul (count Players) 10) 1))) "MovePhase")) (phase "MovePhase" (play (do (if (not (is Prev Mover)) (forEach Piece) (move (from (last To)) (to (sites Around (difference (sites Occupied by:All component:"Ring") (last To)) Orthogonal if:(is Empty (to)))))) ifAfterwards:(equals 1 (count Groups)))))} (end {(if (is Line 4 what:(id "Disc" P1)) (result P1 Win)) (if (is Line 4 what:(id "Ring" P1)) (result P1 Win)) (if (is Line 4 what:(id "Disc" P2)) (result P2 Win)) (if (is Line 4 what:(id "Ring" P2)) (result P2 Win))}))) 
