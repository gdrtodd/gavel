2 players. Each plays Discs. - --- Goal: Most friendly-stone adjacencies at the end of the game. Ties are broken by comparing piece counts. If it is still a tie, the last player to move loses. --- Play. On your turn you may do one of the following: 1. Pass 2. Place one of your stones on an empty cell of the board is not adjacent to your existing stones. 3. Move to a location with fewer adjacent enemies than the starting location. Moves are made in one of the following ways while keeping the above restriction: -- A. Step to an adjacent empty location. -- B. Hop your opponent's stone and replace it with a mutual enemy piece. -- C. Hop a mutual enemy piece and replace it with a stone from your supply. Note that the number of enemies is based on a count of both the opponent's stones and the mutual-enemy stones combined. Board & size: Hexhex (27) with edges alternating 3 and 4 Brown Background
(game "Refugia" (players 2) (equipment {(board (hex {3 4 3 4 3})) (piece "Disc" P1) (piece "Disc" P2) (piece "Fan" Neutral)}) (rules (start (set Score Each 0)) (play (or {(forEach Piece (move Step (to (sites Around (from)) if:(and (is Empty (to)) (lt (count Sites in:(intersection (sites Around (to)) (union (sites Occupied by:Next) (sites Occupied by:Neutral)))) (count Sites in:(intersection (sites Around (from)) (union (sites Occupied by:Next) (sites Occupied by:Neutral))))))) (then (set Score Mover (div (add (results from:(sites Occupied by:Mover) to:(sites Around (from) if:(is Mover (who at:(to)))) 1)) 2)))) Mover) (forEach Piece (move Hop (between if:(is Within (id "Fan" Neutral) at:(between)) (apply (and (remove (between)) (add (piece (id "Disc" Mover)) (to (between)))))) (to if:(and (is Empty (to)) (lt (count Sites in:(intersection (sites Around (to)) (union (sites Occupied by:Next) (sites Occupied by:Neutral)))) (count Sites in:(intersection (sites Around (from)) (union (sites Occupied by:Next) (sites Occupied by:Neutral))))))) (then (and (set Score Mover (div (add (results from:(sites Occupied by:Mover) to:(sites Around (from) if:(is Mover (who at:(to)))) 1)) 2)) (set Score Next (div (add (results from:(sites Occupied by:Next) to:(sites Around (from) if:(is Next (who at:(to)))) 1)) 2))))) Mover) (forEach Piece (move Hop (between if:(is Next (who at:(between))) (apply (and (remove (between)) (add (piece (id "Fan" Neutral)) (to (between)))))) (to if:(and (is Empty (to)) (lt (count Sites in:(intersection (sites Around (to)) (union (sites Occupied by:Next) (sites Occupied by:Neutral)))) (count Sites in:(intersection (sites Around (from)) (union (sites Occupied by:Next) (sites Occupied by:Neutral))))))) (then (and (set Score Mover (div (add (results from:(sites Occupied by:Mover) to:(sites Around (from) if:(is Mover (who at:(to)))) 1)) 2)) (set Score Next (div (add (results from:(sites Occupied by:Next) to:(sites Around (from) if:(is Next (who at:(to)))) 1)) 2))))) Mover) (move Add (piece (id "Disc" Mover)) (to (sites Empty) if:(not (is Within (id "Disc" Mover) in:(sites Around (to)))))) (move Pass)})) (end (if (all Passed) {(if (gt (score Mover) (score Next)) (result Mover Win)) (if (lt (score Mover) (score Next)) (result Next Win)) (if (gt (count Pieces Mover) (count Pieces Next)) (result Mover Win)) (if (lt (count Pieces Mover) (count Pieces Next)) (result Next Win))} (result Next Win))))) 
