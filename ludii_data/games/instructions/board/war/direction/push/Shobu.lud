Your turn is in two parts. First, a player may move one of their stones up to two spaces in any direction, including diagonally, in what is called a passive (or set up) move. Second, they take a more aggressive move, which must be the same direction and number of spaces as the first move. It is this second move that allows you to push stones across the board - or off the board's edge. A passive move can be done only if it can be followed by an aggressive move. Remove all four of your opponent's stones from just one of the four boards to win.
(game "Shobu" (players 2) (equipment {(board (merge {(square 4) (shift 5 0 (square 4)) (shift 0 5 (square 4)) (shift 5 5 (square 4))})) (piece "Ball" Each) (regions "BottomDark" (expand origin:(coord "A1") steps:3)) (regions "TopDark" (expand origin:(coord "A5") steps:3)) (regions "BottomLight" (expand origin:(coord "E1") steps:3)) (regions "TopLight" (expand origin:(coord "E5") steps:3)) (regions "Home" P1 (union (sites "BottomDark") (sites "BottomLight"))) (regions "Home" P2 (union (sites "TopLight") (sites "TopDark"))) (regions "Light" (expand (sites Right) steps:3)) (regions "Dark" (expand (sites Left) steps:3))}) (rules (start {(place "Ball1" (union (sites Bottom) (sites Row 4))) (place "Ball2" (union (sites Top) (sites Row 3)))}) phases:{(phase "Passive" (play (do (forEach Piece (if (is In (from) (sites Mover "Home")) (move Slide (between (max 2) if:(is Empty (between))))) (then (moveAgain))) ifAfterwards:(can Move (forEach Piece (if (is In (from) (if (is In (last To) (sites "Dark")) (sites "Light") (sites "Dark"))) (or (move Slide (directions Cell from:(last From) to:(last To)) (between (exact (count Steps (last From) (last To))) if:(is Empty (between))) (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (or (is Empty (ahead (to) (directions Cell from:(last From) to:(last To)))) (equals (ahead (to) (directions Cell from:(last From) to:(last To))) (to))))) (apply (if (is Enemy (who at:(to))) (if (equals (ahead (to) (directions Cell from:(last From) to:(last To))) (to)) (remove (to)) (fromTo (from (to)) (to (ahead (to) (directions Cell from:(last From) to:(last To)))))))))) (if (and {(equals (count Steps (last From) (last To)) 2) (is Enemy (who at:(ahead (from) (directions Cell from:(last From) to:(last To))))) (is Empty (ahead (from) steps:2 (directions Cell from:(last From) to:(last To)))) (if (equals (from) (ahead (from) steps:3 (directions Cell from:(last From) to:(last To)))) True (is Empty (ahead (from) steps:3 (directions Cell from:(last From) to:(last To)))))}) (move (from (from)) (to (ahead (from) steps:2 (directions Cell from:(last From) to:(last To)))) (then (if (equals (ahead (last To) (directions Cell from:(last From) to:(last To))) (last To)) (remove (ahead (last From) (directions Cell from:(last From) to:(last To)))) (fromTo (from (ahead (last From) (directions Cell from:(last From) to:(last To)))) (to (ahead (last To) (directions Cell from:(last From) to:(last To))))))))))))))) (nextPhase Mover "Agressive")) (phase "Agressive" (play (forEach Piece (if (is In (from) (if (is In (last To) (sites "Dark")) (sites "Light") (sites "Dark"))) (or (move Slide (directions Cell from:(last From) to:(last To)) (between (exact (count Steps (last From) (last To))) if:(is Empty (between))) (to if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (or (is Empty (ahead (to) (directions Cell from:(last From) to:(last To)))) (equals (ahead (to) (directions Cell from:(last From) to:(last To))) (to))))) (apply (if (is Enemy (who at:(to))) (if (equals (ahead (to) (directions Cell from:(last From) to:(last To))) (to)) (remove (to)) (fromTo (from (to)) (to (ahead (to) (directions Cell from:(last From) to:(last To)))))))))) (if (and {(equals (count Steps (last From) (last To)) 2) (is Enemy (who at:(ahead (from) (directions Cell from:(last From) to:(last To))))) (is Empty (ahead (from) steps:2 (directions Cell from:(last From) to:(last To)))) (if (equals (from) (ahead (from) steps:3 (directions Cell from:(last From) to:(last To)))) True (is Empty (ahead (from) steps:3 (directions Cell from:(last From) to:(last To)))))}) (move (from (from)) (to (ahead (from) steps:2 (directions Cell from:(last From) to:(last To)))) (then (if (equals (ahead (last To) (directions Cell from:(last From) to:(last To))) (last To)) (remove (ahead (last From) (directions Cell from:(last From) to:(last To)))) (fromTo (from (ahead (last From) (directions Cell from:(last From) to:(last To)))) (to (ahead (last To) (directions Cell from:(last From) to:(last To))))))))))))) (nextPhase Mover "Passive"))} (end (if (or {(all Sites (sites Occupied by:Next) if:(not (is In (site) (sites "BottomDark")))) (all Sites (sites Occupied by:Next) if:(not (is In (site) (sites "TopDark")))) (all Sites (sites Occupied by:Next) if:(not (is In (site) (sites "BottomLight")))) (all Sites (sites Occupied by:Next) if:(not (is In (site) (sites "TopLight"))))}) (result Mover Win))))) 
