10x10 checkered board. Twenty pieces per player, arranged on the four rows closest to the player. Pieces move orthogonally or diagonally in any direction, only on the white spaces. Pieces may capture by jumping over an enemy piece to an empty space on the other side of it. Multiple captures in one turn are allowed. The player to capture all of the opponent's pieces wins.
(game "The Babylonian" (players 2) (equipment {(board (square 10)) (piece "Counter" Each (or {(move Step Diagonal (to if:(is Empty (to)))) (move Slide Orthogonal (between (exact 2))) (move Hop (from) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1))))) (moveAgain)))) (do (move Hop (from) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1))))) (moveAgain))))})) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) steps:(sub 4 1)) (sites Phase 0))) (place "Counter2" (difference (expand (sites Top) steps:(sub 4 1)) (sites Phase 0)))}) (play (if (is Prev Mover) (or {(move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1))))) (moveAgain)))) (do (move Hop (from (last To)) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:2 after:2 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 1))))) (moveAgain)))) (move Pass)}) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss))))) 
