8x8 board. One player plays as one Shah, which can move like any of the other pieces. The other player has the usual complement of pieces, as in Chess. Pawns (x8): can move one space forward and capture one space forward diagonally; Rook (x2): can move any number of spaces orthogonally; Elephant (x2): can move any number of spaces diagonally; Horse (2): moves in any direction, one space orthogonally with one space forward diagonally; Vizier (x1): can move any number of spaces orthogonally or diagonally; Shah (x1): can move one space orthogonally or diagonally, but can also move like the horse on its first move, if it has not yet been checked. The pieces are arranged as in Chess, with the Vizier is place to the left of the Shah. Players capture pieces by moving onto a space occupied by an opponent's piece. When a pawn reaches the opposite edge of the board from where it started, it may be promoted to the more powerful piece that begins the game in that position, but only if one of these belonging to the player has already been captured. If this has not happened, the pawn cannot move to the final row. When a player can capture the opponent's Shah on the next turn, the Shah is in check, the opponent's next move must free the Shah from check. If the opponent cannot, it is checkmate and the player wins.
(game "Shatranj Diwana Shah" (players 2) (equipment {(board (square 8)) (piece "Pawn" P2 S (do (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))}) ifAfterwards:(if (is In (last To) (sites Mover "Promotion")) (notEqual -1 (if (and (is In (last To) (sites Corners)) (notEqual 2 (count Pieces Mover "Boat"))) (id "Boat" Mover) (if (and (or (equals (column of:(last To)) 1) (equals (column of:(last To)) 6)) (notEqual 2 (count Pieces Mover "Knight"))) (id "Knight" Mover) (if (and (or (equals (column of:(last To)) 2) (equals (column of:(last To)) 5)) (notEqual 2 (count Pieces Mover "Elephant"))) (id "Elephant" Mover) (if (and (equals (column of:(last To)) 3) (notEqual 1 (count Pieces Mover "Queen"))) (id "Queen" Mover) -1))))) True) (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece (if (and (is In (last To) (sites Corners)) (notEqual 2 (count Pieces Mover "Boat"))) (id "Boat" Mover) (if (and (or (equals (column of:(last To)) 1) (equals (column of:(last To)) 6)) (notEqual 2 (count Pieces Mover "Knight"))) (id "Knight" Mover) (if (and (or (equals (column of:(last To)) 2) (equals (column of:(last To)) 5)) (notEqual 2 (count Pieces Mover "Elephant"))) (id "Elephant" Mover) (if (and (equals (column of:(last To)) 3) (notEqual 1 (count Pieces Mover "Queen"))) (id "Queen" Mover) -1))))) Mover))))) (piece "Boat" P2 (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "King_noCross" Each (if (is Mover P1) (or (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (or (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to))))) (if (equals (state at:(from)) 1) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0)))))) (piece "Elephant" P2 (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Knight" P2 (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Queen" P2 (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn2" (sites Row 6)) (place "King_noCross1" coord:"D1") (place "Boat2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King_noCross2" coord:"E8" state:1)}) (play (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King_noCross" Mover))) (then (if (and (equals (what at:(last To)) (id "King_noCross" P1)) (equals (state at:(where "King_noCross" P2)) 1)) (if (is Threatened (id "King_noCross" P2)) (set State at:(where "King_noCross" P2) 0)))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win))))) 
