Rules are the same as Chess except pawns may move up to four squares on their first move and kings may only castle on their own half of the board. The player that checkmates one of the opposing kings wins.
(game "Double Chess" (players {(player N) (player S)}) (equipment {(board (rectangle 12 16)) (piece "Pawn" Each (or {(if (is In (from) (sites Start (piece (what at:(from))))) (forEach Value min:2 max:4 (move Slide Forward (between (exact (value)) if:(is Empty (between)) (apply (set Pending (between)))) (to if:(is Empty (to))) (then (set Var (last To)))))) (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (move Step (directions {FR FL}) (to if:(is In (to) (sites Pending))) (then (remove (var))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (map "KingLeft" {(pair 1 "E1") (pair 2 "E12")}) (map "RookLeftLeft" {(pair 1 "A1") (pair 2 "A12")}) (map "RookLeftRight" {(pair 1 "H1") (pair 2 "H12")}) (map "KingRight" {(pair 1 "M1") (pair 2 "M12")}) (map "RookRightLeft" {(pair 1 "I1") (pair 2 "I12")}) (map "RookRightRight" {(pair 1 "P1") (pair 2 "P12")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 10)) (place "Rook1" {"A1" "H1" "I1" "P1"} state:1) (place "Knight1" {"B1" "G1" "J1" "O1"}) (place "Bishop1" {"C1" "F1" "K1" "N1"}) (place "Queen1" {"D1" "L1"}) (place "King1" {"E1" "M1"} state:1) (place "Rook2" {"A12" "H12" "I12" "P12"} state:1) (place "Knight2" {"B12" "G12" "J12" "O12"}) (place "Bishop2" {"C12" "F12" "K12" "N12"}) (place "Queen2" {"D12" "L12"}) (place "King2" {"E12" "M12"} state:1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (or (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King" Mover) in:(sites Occupied by:Mover component:"King")))) (or (if (and {(equals (what at:(mapEntry "KingLeft" (mover))) (id "King" Mover)) (equals (state at:(mapEntry "KingLeft" (mover))) 1) (not (is Threatened (id "King" Mover) at:(mapEntry "KingLeft" (mover))))}) (or (if (and (equals (state at:(mapEntry "RookLeftLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeftLeft" (mover))) E (between (exact 3) if:(is Empty (to)))))) (move Slide (from (mapEntry "KingLeft" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeftLeft" (mover))) E (between (exact 3) if:True)))))) (if (and (equals (state at:(mapEntry "RookLeftRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeftRight" (mover))) W (between (exact 2) if:(is Empty (to)))))) (move Slide (from (mapEntry "KingLeft" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeftRight" (mover))) W (between (exact 2) if:True)))))))) (if (and {(equals (what at:(mapEntry "KingRight" (mover))) (id "King" Mover)) (equals (state at:(mapEntry "KingRight" (mover))) 1) (not (is Threatened (id "King" Mover) at:(mapEntry "KingRight" (mover))))}) (or (if (and (equals (state at:(mapEntry "RookRightLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRightLeft" (mover))) E (between (exact 3) if:(is Empty (to)))))) (move Slide (from (mapEntry "KingRight" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRightRight" (mover))) E (between (exact 3) if:True)))))) (if (and (equals (state at:(mapEntry "RookRightRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRightRight" (mover))) W (between (exact 2) if:(is Empty (to)))))) (move Slide (from (mapEntry "KingRight" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRightRight" (mover))) W (between (exact 2) if:True)))))))))))) (end {(if (or (no Moves Mover) (equals (counter) 100)) (result Mover Draw)) (if (and (is Threatened (id "King" Next) in:(sites Occupied by:Next component:"King")) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next) in:(sites Occupied by:Next component:"King"))))))) (result Mover Win))}))) 
