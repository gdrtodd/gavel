Once a player is checkmated their king is removed, but all their other pieces remain on the board as neutral obstacles. Neutral pieces cannot help checkmate other players. If a player cannot make a move when there are more than two players remaining, they skip their turn rather than giving a stalemate. Four Players.
(game "Four-Player Chess" (players {(player N) (player S) (player E) (player W)}) (equipment {(board (merge (shift 0 3 (rectangle 8 14)) (shift 3 0 (rectangle 14 8)))) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (or (if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (equals (to) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (map "King" {(pair 1 "H1") (pair 2 "H14") (pair 3 "A7") (pair 4 "N7")}) (map "RookLeft" {(pair 1 "D1") (pair 2 "K14") (pair 3 "A11") (pair 4 "N4")}) (map "RookRight" {(pair 1 "K1") (pair 2 "D14") (pair 3 "A4") (pair 4 "N11")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (regions "Promotion" P3 (sites Right)) (regions "Promotion" P4 (sites Left))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 12)) (place "Pawn3" (sites Column 1)) (place "Pawn4" (sites Column 12)) (place "Rook1" {"D1" "K1"} state:1) (place "Knight1" {"E1" "J1"}) (place "Bishop1" {"F1" "I1"}) (place "Queen1" coord:"G1") (place "King1" coord:"H1" state:1) (place "Rook2" {"D14" "K14"} state:1) (place "Knight2" {"E14" "J14"}) (place "Bishop2" {"F14" "I14"}) (place "Queen2" coord:"G14") (place "King2" coord:"H14" state:1) (place "Rook3" {"A11" "A4"} state:1) (place "Knight3" {"A10" "A5"}) (place "Bishop3" {"A6" "A9"}) (place "Queen3" coord:"A8") (place "King3" coord:"A7" state:1) (place "Rook4" {"N4" "N11"} state:1) (place "Knight4" {"N5" "N10"}) (place "Bishop4" {"N6" "N9"}) (place "Queen4" coord:"N8") (place "King4" coord:"N7" state:1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (or (forEach Piece) (if (and (equals (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))) (or {(if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) S (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) N (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) S (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) N (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) S (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) N (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0)))))))}))) ifAfterwards:(not (is Threatened (id "King" Mover)))) (then (and {(if (and (is Active P1) (not (is Mover P1))) (if (and (is Threatened (id "King" P1)) (not (can Move (do (and (forEach Piece P1) (set NextPlayer (player 1))) ifAfterwards:(not (is Threatened (id "King" P1))))))) (remove (where (id "King" P1))))) (if (and (is Active P2) (not (is Mover P2))) (if (and (is Threatened (id "King" P2)) (not (can Move (do (and (forEach Piece P2) (set NextPlayer (player 2))) ifAfterwards:(not (is Threatened (id "King" P2))))))) (remove (where (id "King" P2))))) (if (and (is Active P3) (not (is Mover P3))) (if (and (is Threatened (id "King" P3)) (not (can Move (do (and (forEach Piece P3) (set NextPlayer (player 3))) ifAfterwards:(not (is Threatened (id "King" P3))))))) (remove (where (id "King" P3))))) (if (and (is Active P4) (not (is Mover P4))) (if (and (is Threatened (id "King" P4)) (not (can Move (do (and (forEach Piece P4) (set NextPlayer (player 4))) ifAfterwards:(not (is Threatened (id "King" P4))))))) (remove (where (id "King" P4)))))})))) (end {(forEach NonMover if:(equals (where "King" Player) -1) (result Player Loss)) (if (and (le (count Active) 2) (or (no Moves Mover) (equals (counter) (mul 50 (count Active))))) (result Mover Draw))}))) 
