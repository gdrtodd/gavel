Phase Chess is a variant of Chess played on standard Chess board and Chess set, with same rules as Chess except the next player must move from a cell of the same colour just moved to if they can. It they can not, they can move any piece.
(game "Phase Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (or (if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (equals (to) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (map "King" {(pair 1 "E1") (pair 2 "E8")}) (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")}) (map "RookRight" {(pair 1 "H1") (pair 2 "H8")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (priority {(if (notEqual 0 (count Moves)) (do (or {(forEach Piece "Queen" (if (equals (phase of:(from)) (phase of:(last To))) (move Slide (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (forEach Piece "Knight" (if (equals (phase of:(from)) (phase of:(last To))) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (forEach Piece "Bishop" (if (equals (phase of:(from)) (phase of:(last To))) (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter))))))))) (forEach Piece "King" (if (equals (phase of:(from)) (phase of:(last To))) (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0)))))) (forEach Piece "Rook" (if (equals (phase of:(from)) (phase of:(last To))) (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0)))))) (forEach Piece "Pawn" (if (equals (phase of:(from)) (phase of:(last To))) (or {(if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (equals (to) (value Pending)))) (then (remove (ahead (last To) Backward))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter)))))) (if (equals 0 (phase of:(last To))) (if (and {(equals (what at:(mapEntry "King" (mover))) (id "King" Mover)) (equals (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))}) (or (if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True)))))) (if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True)))))))))}) ifAfterwards:(not (is Threatened (id "King" Mover) (forEach Piece))))) (do (or (forEach Piece) (if (and {(equals (what at:(mapEntry "King" (mover))) (id "King" Mover)) (equals (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))}) (or (if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True)))))) (if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True))))))))) ifAfterwards:(not (is Threatened (id "King" Mover))))}))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next) (forEach Piece))))))) (result Mover Win)) (if (or (no Moves Mover) (equals (counter) 100)) (result Mover Draw))}))) 
