The rules are identical to those of standard Shogi, except that it is played with a reduced number of pieces on a 5x5 board, and each player's promotion zone consists only of the rank furthest from the player.
(game "Minishogi" (players {(player N) (player S)}) (equipment {(board (square 5)) (piece "Osho" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))))) (piece "Fuhyo" Each (move Step Forward (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))) (then (if (is In (last To) (sites Mover "Promotion")) (move Promote (last To) (piece (mapEntry "Promoted" (what at:(last To))))))))) (piece "Ginsho" Each (move Step (directions {Forward BL BR FL FR}) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))) (then (if (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion"))) (moveAgain))))) (piece "Hisha" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))) (then (if (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion"))) (moveAgain))))) (piece "Kakugyo" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))) (then (if (or (is In (last To) (sites Mover "Promotion")) (is In (last From) (sites Mover "Promotion"))) (moveAgain))))) (piece "Kinsho" Each (move Step (directions {Forward Backward Rightward Leftward FL FR}) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))))) (piece "Tokin" Each (move Step (directions {Forward Backward Rightward Leftward FL FR}) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))))) (piece "Narigin" Each (move Step (directions {Forward Backward Rightward Leftward FL FR}) (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to)))))))))) (piece "Ryuo" Each (or (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to))))))))) (move Step Diagonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to))))))))))) (piece "Ryuma" Each (or (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to))))))))) (move Step Orthogonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (add (piece (mapEntry "Captured" (what at:(to)))) (to (mapEntry "Where" (what at:(to))))))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (map "Where" {(pair (id "Fuhyo" P1) (handSite P2)) (pair (id "Fuhyo" P2) (handSite P1)) (pair (id "Ginsho" P1) (handSite P2 1)) (pair (id "Ginsho" P2) (handSite P1 1)) (pair (id "Hisha" P1) (handSite P2 2)) (pair (id "Hisha" P2) (handSite P1 2)) (pair (id "Kakugyo" P1) (handSite P2 3)) (pair (id "Kakugyo" P2) (handSite P1 3)) (pair (id "Kinsho" P1) (handSite P2 4)) (pair (id "Kinsho" P2) (handSite P1 4)) (pair (id "Tokin" P1) (handSite P2)) (pair (id "Tokin" P2) (handSite P1)) (pair (id "Narigin" P1) (handSite P2 1)) (pair (id "Narigin" P2) (handSite P1 1)) (pair (id "Ryuo" P1) (handSite P2 2)) (pair (id "Ryuo" P2) (handSite P1 2)) (pair (id "Ryuma" P1) (handSite P2 3)) (pair (id "Ryuma" P2) (handSite P1 3))}) (map "Captured" {(pair (id "Fuhyo" P1) (id "Fuhyo" P2)) (pair (id "Fuhyo" P2) (id "Fuhyo" P1)) (pair (id "Ginsho" P1) (id "Ginsho" P2)) (pair (id "Ginsho" P2) (id "Ginsho" P1)) (pair (id "Hisha" P1) (id "Hisha" P2)) (pair (id "Hisha" P2) (id "Hisha" P1)) (pair (id "Kakugyo" P1) (id "Kakugyo" P2)) (pair (id "Kakugyo" P2) (id "Kakugyo" P1)) (pair (id "Kinsho" P1) (id "Kinsho" P2)) (pair (id "Kinsho" P2) (id "Kinsho" P1)) (pair (id "Tokin" P1) (id "Fuhyo" P2)) (pair (id "Tokin" P2) (id "Fuhyo" P1)) (pair (id "Narigin" P1) (id "Ginsho" P2)) (pair (id "Narigin" P2) (id "Ginsho" P1)) (pair (id "Ryuo" P1) (id "Hisha" P2)) (pair (id "Ryuo" P2) (id "Hisha" P1)) (pair (id "Ryuma" P1) (id "Kakugyo" P2)) (pair (id "Ryuma" P2) (id "Kakugyo" P1))}) (map "Promoted" {(pair (id "Fuhyo" P1) (id "Tokin" P1)) (pair (id "Fuhyo" P2) (id "Tokin" P2)) (pair (id "Ginsho" P1) (id "Narigin" P1)) (pair (id "Ginsho" P2) (id "Narigin" P2)) (pair (id "Hisha" P1) (id "Ryuo" P1)) (pair (id "Hisha" P2) (id "Ryuo" P2)) (pair (id "Kakugyo" P1) (id "Ryuma" P1)) (pair (id "Kakugyo" P2) (id "Ryuma" P2))}) (hand Each size:5)}) (rules (start {(place "Osho1" coord:"A1") (place "Kinsho1" coord:"B1") (place "Ginsho1" coord:"C1") (place "Kakugyo1" coord:"D1") (place "Hisha1" coord:"E1") (place "Fuhyo1" coord:"A2") (place "Osho2" coord:"E5") (place "Kinsho2" coord:"D5") (place "Ginsho2" coord:"C5") (place "Kakugyo2" coord:"B5") (place "Hisha2" coord:"A5") (place "Fuhyo2" coord:"E4")}) (play (if (is Prev Mover) (or (move Promote (last To) (piece (mapEntry "Promoted" (what at:(last To))))) (move Pass)) (do (or {(move (from (sites Occupied by:Mover container:"Hand" components:{"Kakugyo" "Ginsho" "Hisha" "Kinsho"})) (to (sites Empty))) (do (move (from (sites Occupied by:Mover container:"Hand" component:"Fuhyo")) (to (difference (sites Empty) (sites Mover "Promotion")) if:(equals (count Sites in:(sites Occupied by:Mover container:"Board" component:"Fuhyo")) (count Sites in:(difference (sites Occupied by:Mover container:"Board" component:"Fuhyo") (sites Column (column of:(to)))))))) ifAfterwards:(not (and (is Threatened (id "Osho" Next)) (not (can Move (do (or {(move (from (sites Occupied by:Next container:"Hand" components:{"Kakugyo" "Ginsho" "Hisha" "Kinsho"})) (to (sites Empty))) (do (move (from (sites Occupied by:Next container:"Hand" component:"Fuhyo")) (to (difference (sites Empty) (sites Next "Promotion")) if:(equals (count Sites in:(sites Occupied by:Next container:"Board" component:"Fuhyo")) (count Sites in:(difference (sites Occupied by:Next container:"Board" component:"Fuhyo") (sites Column (column of:(to)))))))) ifAfterwards:(not (is Threatened (id "Osho" Mover)))) (forEach Piece Next)}) ifAfterwards:(not (is Threatened (id "Osho" Next))))))))) (forEach Piece)}) ifAfterwards:(not (is Threatened (id "Osho" Mover)))))) (end {(if (and (is Threatened (id "Osho" Next)) (not (can Move (do (or {(move (from (sites Occupied by:Next container:"Hand" components:{"Kakugyo" "Ginsho" "Hisha" "Kinsho"})) (to (sites Empty))) (do (move (from (sites Occupied by:Next container:"Hand" component:"Fuhyo")) (to (difference (sites Empty) (sites Next "Promotion")) if:(equals (count Sites in:(sites Occupied by:Next container:"Board" component:"Fuhyo")) (count Sites in:(difference (sites Occupied by:Next container:"Board" component:"Fuhyo") (sites Column (column of:(to)))))))) ifAfterwards:(not (is Threatened (id "Osho" Mover)))) (forEach Piece Next)}) ifAfterwards:(not (is Threatened (id "Osho" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))}))) 
