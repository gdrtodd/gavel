Played on a standard Backgammon board. Six pieces per player. Pieces begin the game, one on each point on the left half of the player's side of the board. Pieces move in an anti-clockwise direction for both players. Two six-sided dice are rolled. When a 6 is rolled, the player moves two pieces six places. If this is on the player's first turn it must be the two pieces furthest to the left. If a 1 is rolled, the player moves one piece one spot. If doubles are rolled, the player moves twice the normal roll, and plays again. When one player is reduced to a single piece, it moves only to a consecutive corner space with the roll of each 1, or two corner spaces with the roll of each 6, doubling still applies. The first player to capture all of the opponent's pieces wins.
(game "Ad elta stelpur" (players 2) (equipment {(board (rectangle 2 13) {(track "NormalTrack" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} loop:True) (track "CornerTrack" {0 5 7 12 25 20 18 13} loop:True)} use:Vertex) (regions "LeftMost" P1 {0 1}) (regions "LeftMost" P2 {24 25}) (dice num:2) (piece "Disc" Each)}) (rules (start {(place "Disc1" {0 1 2 3 4 5}) (place "Disc2" {20 21 22 23 24 25})}) (play (do (if (not (is Prev Mover)) (roll) (if (and (not (is Pending)) (not (or (is AnyDie 6) (is AnyDie 1)))) (roll))) next:(if (is Pending) (forEach Piece (or (move (from) (to (trackSite Move steps:(value Pending)) if:(and (not (is Friend (who at:(to)))) (if (ge (count Turns) 2) True (if (and (or (equals 6 (value Pending)) (equals 12 (value Pending))) (notEqual 0 (count in:(sites Mover)))) (is In (from) (sites Mover)) True))) (apply if:(is Enemy (who at:(to))) (remove (to))))) (if (equals 1 (count Pieces Mover)) (move (from) (to (trackSite Move "CornerTrack" steps:(if (equals (value Pending) 12) 4 (if (equals (value Pending) 6) 2 (value Pending)))) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (remove (to)))))))) (forEach Die if:(or (equals 6 (pips)) (equals 1 (pips))) (if (equals 1 (pips)) (forEach Piece (or (move (from) (to (trackSite Move steps:(if (all DiceEqual) 2 1)) if:(and (not (is Friend (who at:(to)))) (if (ge (count Turns) 2) True (if (and (or (equals 6 (if (all DiceEqual) 2 1)) (equals 12 (if (all DiceEqual) 2 1))) (notEqual 0 (count in:(sites Mover)))) (is In (from) (sites Mover)) True))) (apply if:(is Enemy (who at:(to))) (remove (to))))) (if (equals 1 (count Pieces Mover)) (move (from) (to (trackSite Move "CornerTrack" steps:(if (equals (if (all DiceEqual) 2 1) 12) 4 (if (equals (if (all DiceEqual) 2 1) 6) 2 (if (all DiceEqual) 2 1)))) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (remove (to)))))))) (forEach Piece (or (move (from) (to (trackSite Move steps:(if (all DiceEqual) 12 6)) if:(and (not (is Friend (who at:(to)))) (if (ge (count Turns) 2) True (if (and (or (equals 6 (if (all DiceEqual) 12 6)) (equals 12 (if (all DiceEqual) 12 6))) (notEqual 0 (count in:(sites Mover)))) (is In (from) (sites Mover)) True))) (apply if:(is Enemy (who at:(to))) (remove (to))))) (if (equals 1 (count Pieces Mover)) (move (from) (to (trackSite Move "CornerTrack" steps:(if (equals (if (all DiceEqual) 12 6) 12) 4 (if (equals (if (all DiceEqual) 12 6) 6) 2 (if (all DiceEqual) 12 6)))) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (remove (to))))))) (then (and (set Pending (if (all DiceEqual) 12 6)) (moveAgain)))))) (then (if (or (or (is AnyDie 6) (is AnyDie 1)) (all DiceEqual)) (moveAgain)))))) (end (if (no Pieces Next) (result Next Loss))))) 
