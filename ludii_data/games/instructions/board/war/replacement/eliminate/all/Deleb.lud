Board of intersecting lines: four horizontal and up to 100 vertical. Twenty is typical. Played on two teams with even-numbered players. One piece per vertical line, lined up on the outer rows. Four sticks, white on one side and black on the other, used as dice. The value of the throw is the number of white sides that land face up, when only black are face up, the value is 6. Each player must progress through the following three stages of throws to begin playing. In the first stage, they throw four sticks. A throw of 2 or 3 ends the turn, a throw of 4 or 6 gives another throw. A throw of 1 allows the player to progress to the next stage and to add 1 to their score. In the second stage, the player throws three sticks. If the player throws two or three black, they add 1 to their score and keep throwing, three white up allows the player to add 4 to their score and keep playing; one black face up allows the player to pass to the third stage. In the third stage, the player throws two sticks. If two black are thrown, all of the previously tabulated score is lost, the turn ends and the player must start again from the first stage in their next turn. If the player throws two white, the player scores 4 and reverts back to the second phase. When the player scores one white and one black, the player enters the game and plays the pieces according to their accumulated score. Each piece must be unlocked with a throw of 1 before being moved normally. From this point, players throw all four sticks. Throws of 2 or 3 end the turn, players continue to throw until they receive one of these values. Each throw must be assigned to move a piece and a single throw cannot be subdivided, though separate throws can be assigned to different pieces. Players may choose not to play a throw if they wish. Throws of 1 must be used to unlock a piece if there are any which are locked. Pieces move from left to right in their home row, right to left in the second row, left to right in the third row, right to left in their opponent's home row, returning to the third row and progressing from left to right, then to the second row progressing from right to left, and then back into the home row, proceeding from left to right, and so in a loop. Pieces may not pass the pieces of the opposing team. When a piece lands on the same space occupied by an opponent's piece, the opponent's piece is removed from the board. The team that captures all the pieces of the opposing team wins. The board has 20 columns.
(game "Deleb" (players 4) (equipment {(board (rectangle 4 20) {(track "Track1" "0,E,N1,W,N1,E,N1,W,S1,E,S1,W" loop:True P1) (track "Track2" "79,W,S1,E,S1,W,S1,E,N1,W,N1,E" loop:True P2) (track "Track3" "0,E,N1,W,N1,E,N1,W,S1,E,S1,W" loop:True P3) (track "Track4" "79,W,S1,E,S1,W,S1,E,N1,W,N1,E" loop:True P3)} use:Vertex) (dice d:2 from:0 num:4) (piece "Marker" P1 (move (from (from) if:(or (equals (mapEntry "Throw" (count Pips)) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(mapEntry "Throw" (count Pips))) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (mapEntry "Throw" (count Pips))) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (mapEntry "Throw" (count Pips)) 1)))))))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) (piece "Marker" P2 (move (from (from) if:(or (equals (mapEntry "Throw" (count Pips)) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(mapEntry "Throw" (count Pips))) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (mapEntry "Throw" (count Pips))) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (mapEntry "Throw" (count Pips)) 1)))))))) (apply (if (is Enemy (who at:(to))) (remove (to))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) (map "Throw" {(pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)})}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) phases:{(phase "StageOne" (play (do (roll) next:(move Pass) (then (if (or (equals (mapEntry "Throw" (count Pips)) 6) (equals (mapEntry "Throw" (count Pips)) 4)) (moveAgain) (if (equals (mapEntry "Throw" (count Pips)) 1) (if (is Mover P1) (remember Value "ScoreP1" 1) (if (is Mover P2) (remember Value "ScoreP2" 1) (if (is Mover P3) (remember Value "ScoreP3" 1) (remember Value "ScoreP4" 1))))))))) (nextPhase Mover (equals (mapEntry "Throw" (count Pips)) 1) "StageTwo")) (phase "StageTwo" (play (do (roll) next:(move Pass) (then (if (or (equals 0 (add (add (face 80) (face 81)) (face 82))) (equals 1 (add (add (face 80) (face 81)) (face 82)))) (and (moveAgain) (if (is Mover P1) (remember Value "ScoreP1" 1) (if (is Mover P2) (remember Value "ScoreP2" 1) (if (is Mover P3) (remember Value "ScoreP3" 1) (remember Value "ScoreP4" 1))))) (if (equals 3 (add (add (face 80) (face 81)) (face 82))) (and (moveAgain) (if (is Mover P1) (remember Value "ScoreP1" 4) (if (is Mover P2) (remember Value "ScoreP2" 4) (if (is Mover P3) (remember Value "ScoreP3" 4) (remember Value "ScoreP4" 4)))))))))) (nextPhase Mover (equals (add (add (face 80) (face 81)) (face 82)) 2) "StageThree")) (phase "StageThree" (play (do (roll) next:(move Pass) (then (if (equals 0 (add (face 80) (face 81))) (if (is Mover P1) (forget Value "ScoreP1" All) (if (is Mover P2) (forget Value "ScoreP2" All) (if (is Mover P3) (forget Value "ScoreP3" All) (forget Value "ScoreP4" All)))) (if (equals 1 (add (face 80) (face 81))) (moveAgain) (and (moveAgain) (if (is Mover P1) (remember Value "ScoreP1" 4) (if (is Mover P2) (remember Value "ScoreP2" 4) (if (is Mover P3) (remember Value "ScoreP3" 4) (remember Value "ScoreP4" 4)))))))))) {(nextPhase Mover (equals 0 (add (face 80) (face 81))) "StageOne") (nextPhase Mover (equals 2 (add (face 80) (face 81))) "StageTwo") (nextPhase Mover (equals 1 (add (face 80) (face 81))) "PlayingScore")}) (phase "PlayingScore" (play (if (can Move (if (or (is Mover P1) (is Mover P3)) (forEach Piece (forEach Value (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))) (move (from (from) if:(or (equals (value) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(value)) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (value)) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (value) 1)))))))) (apply (and (if (is Mover P1) (forget Value "ScoreP1" (value)) (if (is Mover P2) (forget Value "ScoreP2" (value)) (if (is Mover P3) (forget Value "ScoreP3" (value)) (forget Value "ScoreP4" (value))))) (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) P1) (forEach Piece (forEach Value (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))) (move (from (from) if:(or (equals (value) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(value)) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (value)) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (value) 1)))))))) (apply (and (if (is Mover P1) (forget Value "ScoreP1" (value)) (if (is Mover P2) (forget Value "ScoreP2" (value)) (if (is Mover P3) (forget Value "ScoreP3" (value)) (forget Value "ScoreP4" (value))))) (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) P2))) (if (or (is Mover P1) (is Mover P3)) (forEach Piece (forEach Value (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))) (move (from (from) if:(or (equals (value) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(value)) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (value)) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (value) 1)))))))) (apply (and (if (is Mover P1) (forget Value "ScoreP1" (value)) (if (is Mover P2) (forget Value "ScoreP2" (value)) (if (is Mover P3) (forget Value "ScoreP3" (value)) (forget Value "ScoreP4" (value))))) (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) P1) (forEach Piece (forEach Value (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))) (move (from (from) if:(or (equals (value) 1) (equals 1 (state at:(from))))) (to (trackSite Move from:(from) steps:(value)) if:(and (not (is Friend (who at:(to)))) (or (equals 1 (value)) (equals 0 (count Sites in:(intersection (sites Occupied by:Enemy) (sites Track Mover from:(trackSite Move from:(from) steps:1) to:(trackSite Move from:(from) steps:(sub (value) 1)))))))) (apply (and (if (is Mover P1) (forget Value "ScoreP1" (value)) (if (is Mover P2) (forget Value "ScoreP2" (value)) (if (is Mover P3) (forget Value "ScoreP3" (value)) (forget Value "ScoreP4" (value))))) (if (is Enemy (who at:(to))) (remove (to)))))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1))))) P2)) (move Pass (then (if (is Mover P1) (forget Value "ScoreP1" All) (if (is Mover P2) (forget Value "ScoreP2" All) (if (is Mover P3) (forget Value "ScoreP3" All) (forget Value "ScoreP4" All)))))) (then (if (notEqual 0 (size Array (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))))) (moveAgain))))) (nextPhase Mover (equals 0 (size Array (if (is Mover P1) (values Remembered "ScoreP1") (if (is Mover P2) (values Remembered "ScoreP2") (if (is Mover P3) (values Remembered "ScoreP3") (values Remembered "ScoreP4")))))) "Playing")) (phase "Playing" (play (do (roll) next:(or (if (or (is Mover P1) (is Mover P3)) (forEach Piece P1) (forEach Piece P2)) (move Pass)) (then (if (and (notEqual 2 (mapEntry "Throw" (count Pips))) (notEqual 3 (mapEntry "Throw" (count Pips)))) (moveAgain))))))} (end (if (no Pieces Enemy) (result TeamMover Win))))) 
