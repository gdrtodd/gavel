By far the easiest of the variants so far, Sweep Burrow's template is simply the two orthogonal directions involved in making the initial capture. The only further convention here is that if the capture was made with just movement in one direction, you cannot employ a second direction. The player may not end his turn until the capturing piece have no further captures available.
(game "Sweep Burrow" (players 2) (equipment {(board (square 8)) (piece "Disc" Each (if (equals 0 (count MovesThisTurn)) (or {(move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) N stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to)))) (then (set Var 1))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) E stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to)))) (then (set Var 2))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) S stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to)))) (then (set Var 3))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) W stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to)))) (then (set Var 4))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) E))) if:(and (gt (row of:(to)) (row of:(from))) (gt (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 5))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) E))) if:(and (lt (row of:(to)) (row of:(from))) (gt (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 6))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) W))) if:(and (gt (row of:(to)) (row of:(from))) (lt (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 7))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) W))) if:(and (lt (row of:(to)) (row of:(from))) (lt (column of:(to)) (column of:(from)))) (apply (remove (to)))) (then (set Var 8)))}) (if (equals 1 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) N stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to))))) (if (equals 2 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) E stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to))))) (if (equals 3 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) S stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to))))) (if (equals 4 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction from:(from) W stop:(is Occupied (to)) stopIncluded:True) if:(equals (next) (who at:(to))) (apply (remove (to))))) (if (equals 5 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) E))) (apply (remove (to))))) (if (equals 6 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) E))) (apply (remove (to))))) (if (equals 7 (var)) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) N) (expand (union (sites {(from)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) W))) (apply (remove (to))))) (move (from if:(equals (mul (from) (if (lt 0 (count MovesThisTurn)) 1 0)) (mul (last To) (if (lt 0 (count MovesThisTurn)) 1 0)))) (to (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) S) (expand (union (sites {(from)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(from) (range 1 1000000000))) W))) (apply (remove (to)))))))))))) (then (if (lt 0 (count Sites in:(if (equals 1 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) N stop:(is Occupied (to)) stopIncluded:True)) (if (equals 2 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) E stop:(is Occupied (to)) stopIncluded:True)) (if (equals 3 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) S stop:(is Occupied (to)) stopIncluded:True)) (if (equals 4 (var)) (intersection (sites Occupied by:Enemy) (sites Direction from:(last To) W stop:(is Occupied (to)) stopIncluded:True)) (if (equals 5 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) N) (expand (union (sites {(last To)}) (sites Distance (step (directions {N E}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) E))) (if (equals 6 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) S) (expand (union (sites {(last To)}) (sites Distance (step (directions {S E}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) E))) (if (equals 7 (var)) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) N) (expand (union (sites {(last To)}) (sites Distance (step (directions {N W}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) W))) (intersection (sites Occupied by:Enemy) (union (expand (union (sites {(last To)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) S) (expand (union (sites {(last To)}) (sites Distance (step (directions {S W}) (to if:(is Empty (to)))) from:(last To) (range 1 1000000000))) W)))))))))))) (moveAgain)))))}) (rules (start {(place "Disc1" (forEach (sites Board) if:(or (and (is Even (row of:(site))) (gt 2 (mod (site) 4))) (and (is Odd (row of:(site))) (lt 1 (mod (site) 4)))))) (place "Disc2" (forEach (sites Board) if:(or (and (is Odd (row of:(site))) (gt 2 (mod (site) 4))) (and (is Even (row of:(site))) (lt 1 (mod (site) 4))))))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss))))) 
