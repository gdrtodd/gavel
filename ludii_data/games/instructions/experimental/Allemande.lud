Goal: To Win, connect the groups of stones at opposite edges. On your turn place up to 4 stones. Restriction: You may not place a stone diagonally from another stone of your color, UNLESS the stone is connected through othogonal links after you have placed your next stone in the same turn. If you place in the wrong sequence use the Undo button to go back. Do not select the stone to reverse the move as this limits your options to move elsewhere. That option is just there as a work-around for the Ludii system. There are 2 versions: 1. Placing pieces on any empty spaces allowed in the above rules. 2. Restricting successive placements in the turn to locations around the previous placement. This keeps all the pieces played in one turn, as a group. Both the pieces must be placed together (touching) and leave all crosscuts connected Order 7 Board
(game "Allemande" (players 2) (equipment {(board (remove (square (add 2 7)) cells:{0 (add 7 1) (mul (add 7 2) (add 7 1)) (sub (pow (add 7 2) 2) 1)}) use:Cell) (regions "EW" P1 (union (sites Column (add 7 1)) (sites Column 0))) (regions "NS" P2 (union (sites Row (add 7 1)) (sites Row 0))) (piece "Square" Each) (hand Each size:4)}) (rules (start {(place "Square1" (union (sites Column (add 7 1)) (sites Column 0))) (place "Square2" (union (sites Row (add 7 1)) (sites Row 0)))}) (play (if (not (is Prev Mover)) (do (or {(move Add (piece (id "Square" Mover)) (to (sites Empty)) (then (if (not (is Prev Mover)) (remember Value (last To))))) (move Select (from Edge (sites Board Edge) if:(no Pieces All in:(sites Incident Cell of:Edge at:(from)))) (then (forEach Site (sites Incident Cell of:Edge at:(last From)) (and (add (piece (id "Square" Mover)) (to (site))) (if (not (is Prev Mover)) (remember Value (site))))))) (if (is Prev Mover) (move Pass))}) ifAfterwards:(or {(equals (size Array (sizes Group Orthogonal Mover)) (size Array (sizes Group All Mover))) (can Move (do (or {(move Add (piece (id "Square" Mover)) (to Cell (intersection (sites Around (sites (values Remembered)) Orthogonal) (sites Empty)))) (move Select (from Edge (forEach of:(intersection (sites Around (sites (values Remembered)) Orthogonal) (sites Empty)) (sites Incident Edge of:Cell at:(site))) if:(no Pieces All in:(sites Incident Cell of:Edge at:(from)))) (then (add (piece (id "Square" Mover)) (to Cell (sites Incident Cell of:Edge at:(last From))))))}) ifAfterwards:(equals (size Array (sizes Group Orthogonal Mover)) (size Array (sizes Group All Mover)))))}) (then (moveAgain))) (do (or {(move Add (piece (id "Square" Mover)) (to Cell (intersection (sites Around (sites (values Remembered)) Orthogonal) (sites Empty)))) (move Select (from Edge (forEach of:(intersection (sites Around (sites (values Remembered)) Orthogonal) (sites Empty)) (sites Incident Edge of:Cell at:(site))) if:(no Pieces All in:(sites Incident Cell of:Edge at:(from)))) (then (add (piece (id "Square" Mover)) (to Cell (sites Incident Cell of:Edge at:(last From))))))}) ifAfterwards:(equals (size Array (sizes Group Orthogonal Mover)) (size Array (sizes Group All Mover))) (then (forget Value All))))) (end (if (or (is Connected at:(regionSite (sites Column Cell 0) index:0) Orthogonal {(sites Column (add 7 1)) (sites Column 0)}) (is Connected at:(regionSite (sites Row Cell 0) index:0) Orthogonal {(sites Row (add 7 1)) (sites Row 0)})) (result Mover Win))))) 
