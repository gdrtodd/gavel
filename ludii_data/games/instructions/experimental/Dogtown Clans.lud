Structure of Play: There is no passing. Maroon chooses to remove up to two nodes of the board before passing to White. Then White places an initial stone onto a remaining node on the board. After this play alternates, two turns per player, until one player cannot complete both turns. That player loses On each of the turns, the current player must either: - - place a stone on an empty node that the opponent does not control, or - - remove an opponent's stone that the current player controls. A player controls a node and any stone on it when the count of his stones that are adjacent to the node, exceed those of his opponent by the node-control value chosen for the game, or more. (default is 3) -- For example 4 is 3 greater than 1, so a node surrounded by 4 White and 1 Maroon is controlled by White if 3 was chosen as the game parameter (also if 1 or 2 were chosen). There are options for the board size and type, and the number of surplus stones needed to control a node. Order 3 board Hex N/N+2 grid w/even nodes, no center Strategic. Control a site with a surplus of 3 on lines of sight.
(game "Dogtown Clans" (players 2) (equipment {(board (dual (hex (div 6 2) (add 2 (div 6 2)))) use:Vertex) (piece "Counter" P1) (piece "Counter" P2) (piece "X" Neutral) (piece "Counter" Neutral)}) (rules (meta (passEnd NoEnd)) (play (if (and (equals -1 (var "DoubleTurnPhase")) (equals 1 (mover))) (or (move Pass) (move Add (piece "X0") (to (sites Empty)) (then (if (gt 2 (count Pieces in:(sites Occupied by:Neutral))) (moveAgain))))) (or {(move Add (to (sites Empty) if:(not (le (add 3 (count Pieces in:(sites Around (to) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Next in:(sites Around (to) Orthogonal)))))) (then (if (equals -1 (var "DoubleTurnPhase")) (set Var "DoubleTurnPhase" 1) (if (is Prev Next) (moveAgain) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Mover in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Next in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))) (move Remove (forEach (sites Occupied by:Next) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Mover in:(sites Around (site) Orthogonal))))) (then (if (is Prev Next) (moveAgain) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Mover in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Next in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))}) (then (if (no Moves Next) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Mover in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(sites Around (site) Orthogonal if:(notEqual 0 (who at:(to)))))) (mul 2 (count Pieces Next in:(sites Around (site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))) (end (if (no Moves Mover) (result Mover Loss))))) 
