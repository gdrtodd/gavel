Setup: Pieces of each color start distributed symmetrically on every 3rd cell of the board. (For a game on an order 4 board, the outer cells are not used.) Play - Decide which player will play with which color (Dark or Light). - Light is the first player to play. - Passing is not allowed. - The game ends when a player cannot move. On each turn, the mover chooses a piece and slides it over empty cells towards a friendly piece in the same line (but not necessarily visible from the moving piece's point of view.) The sliding piece must either: - stop on an empty cell next to a friendly piece to form a group of friendly pieces that is larger than the group it started in, or - stop at the first opponent's piece and remove it. The Last Scavenger. A piece must slide toward a friendly piece, either to reach a location where it forms a group larger than where it started, or to reach an opponent's piece, which is then removed. Last to move wins. Order 4 board
(game "Don't Mosey and The Last Scavenger" (players 2) (equipment {(board (hex Hexagon 5) use:Cell) (piece "Disc" Each)}) (rules (start {(place "Disc1" {7 12 15 21 24 28 31 38 41 44 47 52}) (place "Disc2" {8 13 16 19 22 29 32 36 39 45 48 53})}) (play (forEach Piece (or {(do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step NNE (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step NNE (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to)))))) (do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step E (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step E (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to)))))) (do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step SSE (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step SSE (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to)))))) (do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step SSW (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step SSW (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to)))))) (do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step W (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step W (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to)))))) (do (set Var "OriginGroupSize" (size Group at:(from)) (then (set Var "From" (from)))) next:(move (from (from)) (to (sites Distance (step NNW (to if:True)) from:(from) (min 1)) if:(and {(all Sites (sites Between from:(from) to:(to)) if:(is Empty (site))) (is In (to) (difference (sites Inner) (sites Occupied by:Mover))) (lt 0 (count Pieces Mover in:(sites Distance (step NNW (to if:True)) from:(to) (min 1)))) (or (is Next (who at:(to))) (le (var "OriginGroupSize") (count Sites in:(sites Distance Orthogonal (step (to if:(and (notEqual (var "From") (to)) (is Mover (who at:(to)))))) from:(to) (min 0)))))}) (apply (remove (to))))))}))) (end (if (no Moves Next) (result Mover Win))))) 
