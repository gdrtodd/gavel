Structure of Play: There is no passing. Maroon chooses to remove up to two nodes of the board before passing to White. Then White places an initial stone onto a remaining node on the board. After this play alternates, two turns per player, until one player cannot complete both turns. That player loses On each of the turns, the current player must either: - - place a stone on an empty node that the opponent does not control, or - - remove an opponent's stone that the current player controls. A player controls a node and any stone on it when the count of his stones in line-of-sight of the node, exceed those of his opponent by the node-control value chosen for the game, or more. (default is 3) ('in line-of-site of the node' refers to the first stone in each radial grid direction.) There are options for the board size and type, and the number of surplus stones needed to control a node. Order 2 board Hex N/N+2 grid w/even nodes, no center Strategic. Control a site with a surplus of 3 on lines of sight.
(game "Double-Move Situ" (players 2) (equipment {(board (dual (hex (div 4 2) (add 2 (div 4 2)))) use:Vertex) (piece "Counter" P1) (piece "Counter" P2) (piece "X" Neutral) (piece "Counter" Neutral)}) (rules (meta (passEnd NoEnd)) (play (if (and (equals -1 (var "DoubleTurnPhase")) (equals 1 (mover))) (or (move Pass) (move Add (piece "X0") (to (sites Empty)) (then (if (gt 2 (count Pieces in:(sites Occupied by:Neutral))) (moveAgain))))) (or {(move Add (to (sites Empty) if:(not (le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(to) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Next in:(sites LineOfSight Piece at:(to) Orthogonal)))))) (then (if (equals -1 (var "DoubleTurnPhase")) (set Var "DoubleTurnPhase" 1) (if (is Prev Next) (moveAgain) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Mover in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Next in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))) (move Remove (forEach (sites Occupied by:Next) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Mover in:(sites LineOfSight Piece at:(site) Orthogonal))))) (then (if (is Prev Next) (moveAgain) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Mover in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Next in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))}) (then (if (no Moves Next) (and (set Score Mover (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Mover)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Mover in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2)))) (set Score Next (add (results from:(forEach (difference (difference (sites Board) (sites Occupied by:Next)) (sites Occupied by:Neutral)) if:(le (add 3 (count Pieces in:(difference (sites LineOfSight Piece at:(site) Orthogonal) (sites Occupied by:Neutral)))) (mul 2 (count Pieces Next in:(sites LineOfSight Piece at:(site) Orthogonal))))) to:(from) (if (is Empty (to)) 1 2))))))))) (end (if (no Moves Mover) (result Mover Loss))))) 
