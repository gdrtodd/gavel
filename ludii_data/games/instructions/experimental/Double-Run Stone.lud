Dual Goals: A) Create an isolated group of 4 that contains a single pair. This is called a double-run, but it only scores for the pair depending on its value: (1+1) (2+2) or (3+3); B) Force the opponent to stalemate you. This scores one point for each of your pieces on the board, with out regard to their value. Keep score and play 2 or more sets of 2 games each. Play Overview: The board starts empty. Turns consist of placement or movement, followed by consequential removals. Placement has priority over movement. The destinations for both placement and movement are restricted. Movement has an additional limitation. The game ends when a player cannot take a turn, or when, at the end of a turn, a distinctly connected group of 4 of either player's pieces forms double-run of values (1123, 1223, 1233) in any order. Turns: --- if possible: --- A) a player must place a piece from his supply onto an empty location, -- but never onto a location that is simultaneously adjacent to pieces of every value (1, 2 and 3) without respect to ownership. --- Otherwise:--- B) if the previous player has played in a way that prevents placement, then instead, a piece must be moved to an adjacent empty location that meets the same destination restriction as for placement. However, a player may not be deprived of placement moves for more turns in a row than he has pieces in play at the start of his turn. If the number of his pieces at the start of his turn is equal to or less than the number of movement turns that he has already taken since his last placement, then he has been stalemated and the game ends in his favor. He would also be stalemated if there were no legal step moves available on the board. Removals: After the placement or movement, simultaneously remove every piece on the board that is adjacent to pieces of all 3 values without respect to ownership of the pieces and of their neighbors. These removed pieces are 'consumed'; they are not returned to the players' supply. Scoring: A player who stalemates the opponent loses: the player who is unable to move scores one point for each piece of his color in play. Otherwise, each Double-run that is owned by the player who just completed the turn scores the value of the pair in that double-run. A double-run belong to the opponent is scored by the opponent, and has twice the value. Hex N / N-1 Grid Order 3 board
(game "Double-Run Stone" (players 2) (equipment {(board (trim (tri Limping (sub 3 1))) use:Vertex) (hand Each size:15) (piece "1Dot" Each) (piece "2Dot" Each) (piece "3Dot" Each)}) (rules (start {(set Score Each 0) (place "3Dot1" (handSite P1 0)) (place "3Dot1" (handSite P1 1)) (place "3Dot1" (handSite P1 2)) (place "2Dot1" (handSite P1 4)) (place "2Dot1" (handSite P1 5)) (place "2Dot1" (handSite P1 6)) (place "2Dot1" (handSite P1 7)) (place "1Dot1" (handSite P1 9)) (place "1Dot1" (handSite P1 10)) (place "1Dot1" (handSite P1 11)) (place "1Dot1" (handSite P1 12)) (place "1Dot1" (handSite P1 13)) (place "3Dot2" (handSite P2 0)) (place "3Dot2" (handSite P2 1)) (place "3Dot2" (handSite P2 2)) (place "2Dot2" (handSite P2 4)) (place "2Dot2" (handSite P2 5)) (place "2Dot2" (handSite P2 6)) (place "2Dot2" (handSite P2 7)) (place "1Dot2" (handSite P2 9)) (place "1Dot2" (handSite P2 10)) (place "1Dot2" (handSite P2 11)) (place "1Dot2" (handSite P2 12)) (place "1Dot2" (handSite P2 13))}) (play (if (equals 0 (count Sites in:(sites State 1))) (priority {(or {(move Add (piece (id "1Dot" Mover)) (to (sites Empty) if:(and (lt 0 (count Pieces Mover "1Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(equals (id "1Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))}))) (move Add (piece (id "2Dot" Mover)) (to (sites Empty) if:(and (lt 0 (count Pieces Mover "2Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(equals (id "2Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))}))) (move Add (piece (id "3Dot" Mover)) (to (sites Empty) if:(and (lt 0 (count Pieces Mover "3Dot" in:(sites Hand Mover))) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (to)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (to))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (to))))})))) (then (and {(remove (min (array (forEach (sites Hand Mover) if:(equals (id "3Dot" Mover) (what at:(site))))))) (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (forEach Site (sites Occupied by:Mover) (set State at:(site) 0))})))}) (forEach Site (intersection (sites Occupied by:Mover) (sites State 0)) (move Step (from (site)) Orthogonal (to if:(and {(is Empty (to)) (not (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "1Dot" P2) in:(difference (sites Around (to) Orthogonal) (from)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "2Dot" P2) in:(difference (sites Around (to) Orthogonal) (from)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (to) Orthogonal) (from))) (is Within (id "3Dot" P2) in:(difference (sites Around (to) Orthogonal) (from))))}))})) (then (and (forEach Site (sites Around (last To) Orthogonal) (if (and {(or (is Within (id "1Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "1Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "2Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "2Dot" P2) in:(difference (sites Around (site) Orthogonal) (site)))) (or (is Within (id "3Dot" P1) in:(difference (sites Around (site) Orthogonal) (site))) (is Within (id "3Dot" P2) in:(difference (sites Around (site) Orthogonal) (site))))}) (remove (site)))) (set State at:(last To) 2))))) (do (forEach Site (sites State 0) (set State at:(site) 1)) next:(if (no Moves Mover) (move Pass (then (forEach Site (sites State 1) (set State at:(site) 0)))) (move Pass (then (set Score Mover (count Pieces Mover in:(sites Board))))))) (move Pass (then (forEach Site (sites State 0) (set State at:(site) 1))))} (then (and (forEach Group Orthogonal if:(is In (to) (sites Occupied by:Mover)) (if (and {(equals 4 (count Sites in:(sites))) (is Within (id "1Dot" Mover) in:(sites)) (is Within (id "2Dot" Mover) in:(sites)) (is Within (id "3Dot" Mover) in:(sites))}) (forEach Site (sites) (and (addScore Mover (if (is Within (id "3Dot" Mover) at:(site)) 3 (if (is Within (id "2Dot" Mover) at:(site)) 1 -1))) (set State at:(site) 1))))) (forEach Group Orthogonal if:(is In (to) (sites Occupied by:Next)) (if (and {(equals 4 (count Sites in:(sites))) (is Within (id "1Dot" Next) in:(sites)) (is Within (id "2Dot" Next) in:(sites)) (is Within (id "3Dot" Next) in:(sites))}) (forEach Site (sites) (and (addScore Next (if (is Within (id "3Dot" Next) at:(site)) 6 (if (is Within (id "2Dot" Next) at:(site)) 2 -2))) (set State at:(site) 1)))))))) (if (no Moves Mover) (move Pass (then (forEach Site (sites State 1) (set State at:(site) 0)))) (move Pass (then (set Score Mover (count Pieces Mover in:(sites Board)))))))) (end (if (notEqual 0 (count Sites in:(sites State 1))) (byScore))))) 
