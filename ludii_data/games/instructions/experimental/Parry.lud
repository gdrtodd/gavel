Goal: Most territory, counted when one player cannot make a required placement. Definitions: -- Site Power: For a given player, each site's power is equal to the amount by which the adjacent friendly pieces exceed the amount of all the rest of the adjacent pieces. If a site is occupied, the piece at the site is also counted as an adjacent piece. -- Territory: A player's 'Territory' is all the sites where he has positive power, plus all the sites he occupies where no other player has positive power. -- Uncontrolled site: An empty site which is not part of any player's territory is called an 'uncontrolled site'. Play: Turns alternate starting with White. To begin the turn, a player places a piece on an empty site. -- The piece must be placed on a site the mover controls, if possible. -- If this placement is not possible, the piece is placed onto an uncontrolled site. -- If placement is still not possible, the game ends. After the initial placement, the player is allowed to make bonus step moves using any combination of his pieces in any order, other than the one just placed. -- The total number of steps must not exceed the power of the placement site before placement. -- These step moves are all optional. -- Unused bonus moves may not be saved for use in future turns. Jumping over other pieces is not allowed. ------------------------------------------ The game can optionally be played with multiple players. This application shows the territories with player-coloured rings. Three Players Board & size: Equiversi Hexhex with edges alternating 3 and 5
(game "Parry" (players 3) (equipment {(board (tri {3 5 3 5 3}) use:Vertex) (piece "Ball" Each)}) (rules (meta (no Repeat PositionalInTurn)) (start {(set Score Each 1)}) (play (if (is Prev Mover) (or (move Pass (then (forEach Player (set Score (player (player)) (max 0 (size Array (array (forEach (sites Board) if:(or (lt 0 (sub (mul 2 (count Pieces of:(player) in:(sites Around (site) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (site) Orthogonal includeSelf:True)))) (and {(equals (player) (who at:(site))) (is In (site) (difference (sites Occupied by:(player (player))) (sites (results from:(difference (sites Occupied by:All) (sites Occupied by:(player (player)))) to:(sites Around (from) if:(and (equals (player) (who at:(to))) (lt 0 (sub (mul 2 (count Pieces of:(who at:(from)) in:(sites Around (to) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (to) Orthogonal includeSelf:True)))))) (to)))))})))))))))) (do (set Value Mover (sub (value Player Mover) 1)) next:(forEach Piece (move Step (from if:(notEqual (from) (var "PlacedPiece"))) Orthogonal (to if:(is Empty (to))) (then (if (ge 0 (value Player Mover)) (forEach Player (set Score (player (player)) (max 0 (size Array (array (forEach (sites Board) if:(or (lt 0 (sub (mul 2 (count Pieces of:(player) in:(sites Around (site) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (site) Orthogonal includeSelf:True)))) (and {(equals (player) (who at:(site))) (is In (site) (difference (sites Occupied by:(player (player))) (sites (results from:(difference (sites Occupied by:All) (sites Occupied by:(player (player)))) to:(sites Around (from) if:(and (equals (player) (who at:(to))) (lt 0 (sub (mul 2 (count Pieces of:(who at:(from)) in:(sites Around (to) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (to) Orthogonal includeSelf:True)))))) (to)))))})))))))) (moveAgain))))))) (priority (move Add (to (forEach (sites Empty) if:(lt 0 (sub (mul 2 (count Pieces of:(mover) in:(sites Around (site) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (site) Orthogonal includeSelf:True))))) (apply (set Var "PlacedPiece" (to))))) (move Add (to (difference (sites Empty) (sites (results from:(difference (sites Board) (sites Empty)) to:(sites Around (from) if:(and (is Empty (to)) (lt 0 (sub (mul 2 (count Pieces of:(who at:(from)) in:(sites Around (to) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (to) Orthogonal includeSelf:True)))))) (to)))) (apply (set Var "PlacedPiece" (to))))) (then (set Value Mover (max 0 (sub (sub (mul 2 (count Pieces of:(mover) in:(sites Around (last To) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (last To) Orthogonal includeSelf:True))) 1)) (then (if (ge 0 (value Player Mover)) (forEach Player (set Score (player (player)) (max 0 (size Array (array (forEach (sites Board) if:(or (lt 0 (sub (mul 2 (count Pieces of:(player) in:(sites Around (site) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (site) Orthogonal includeSelf:True)))) (and {(equals (player) (who at:(site))) (is In (site) (difference (sites Occupied by:(player (player))) (sites (results from:(difference (sites Occupied by:All) (sites Occupied by:(player (player)))) to:(sites Around (from) if:(and (equals (player) (who at:(to))) (lt 0 (sub (mul 2 (count Pieces of:(who at:(from)) in:(sites Around (to) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (to) Orthogonal includeSelf:True)))))) (to)))))})))))))) (and (forEach Player (set Score (player (player)) (max 0 (size Array (array (forEach (sites Board) if:(or (lt 0 (sub (mul 2 (count Pieces of:(player) in:(sites Around (site) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (site) Orthogonal includeSelf:True)))) (and {(equals (player) (who at:(site))) (is In (site) (difference (sites Occupied by:(player (player))) (sites (results from:(difference (sites Occupied by:All) (sites Occupied by:(player (player)))) to:(sites Around (from) if:(and (equals (player) (who at:(to))) (lt 0 (sub (mul 2 (count Pieces of:(who at:(from)) in:(sites Around (to) Orthogonal includeSelf:True))) (count Pieces All in:(sites Around (to) Orthogonal includeSelf:True)))))) (to)))))})))))))) (moveAgain))))))))) (end {(if (and {(or (no Moves Next) (all Passed)) (equals 2 3) (equals (score P1) (score P2)) (equals (id P1) (what at:(var "PlacedPiece")))}) (result P1 Win)) (if (and {(or (no Moves Next) (all Passed)) (equals 2 3) (equals (score P1) (score P2)) (notEqual (id P1) (what at:(var "PlacedPiece")))}) (result P2 Win)) (if (or (no Moves Next) (all Passed)) (byScore))}))) 
