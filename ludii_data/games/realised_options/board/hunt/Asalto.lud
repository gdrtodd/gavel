(define "RememberSiteWithPossibleCapture" 
    (forEach Site
        (sites From
            (forEach Piece "Marker" 
                ("HopCapture")
            )
        )
        (remember Value "From" (site))
    )
)

(game "Asalto" 
    (players 2) 
    (equipment { 
        ("CrossBoard" 3 7 use:Vertex diagonals:Alternating)
        (piece "Marker" P1 (or ("HopCapture") "StepToEmpty"))
        (piece "Marker" P2 "StepToEmpty") 
    }) 
    (rules 
        (start {
            (place "Marker1" (sites {"C6" "E6"}))
            (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) steps:3)))
        })
        
        (play
            (if (is Mover P1)
                (do
                    ("RememberSiteWithPossibleCapture") 
                    next:(forEach Piece)
                    (then 
                        (and
                            (if (!= 0 (count Sites in:(sites (values Remembered "From")))) 
                                (if (= 1 (count Steps (last From) (last To)))
                                    (and
                                        (forEach Site (sites (values Remembered "From"))
                                            (remove (site))
                                        )
                                        (if (is In (last From) (sites (values Remembered "From")))
                                            (remove (last To))
                                        )
                                    )
                                )
                            )
                            (forget Value All)
                        )
                    )
                )
                (forEach Piece)
            )
        )
        
        (end {
            (if (no Pieces P2) (result P1 Win))
            (if
                (or
                    (or (no Pieces P1) (no Moves P1))
                    (all Sites (expand (sites Top) steps:2) if:(= (who at:(site)) P2))
                )
                (result P2 Win)
            )
        }) 
    )
)

