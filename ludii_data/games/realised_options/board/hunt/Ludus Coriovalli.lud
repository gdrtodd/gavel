
(define "NoExtensionJoinedDiagonal"
    (board
        (add
            (merge {
                (scale 2 1 (rectangle 1 3))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (scale 2 1 (shift 0 2.5 (rectangle 1 3)))
            })
            edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}
        )
        use:Vertex
    )	
)

(define "TopExtensionJoinedDiagonal"
    (board
        (add
            (merge {
                (scale 2 1 (rectangle 1 3))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (scale 2 1 (shift 0 2.5 (rectangle 1 3)))
                (scale 2 1 (shift 0 3 (rectangle 1 3)))
            })
            edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11}}
        )
        use:Vertex
    )	
)

(define "BothExtensionJoinedDiagonal"
    (board
        (add
            (merge {
                (scale 2 1 (rectangle 1 3))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (scale 2 1 (shift 0 2.5 (rectangle 1 3)))
                (scale 2 1 (shift 0 3 (rectangle 1 3)))
                (scale 2 1 (shift 0 -0.5 (rectangle 1 3)))
            })
            edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} {1 14}}
        )
        use:Vertex
    )	
)

(define "NoExtensionNoJoinedDiagonal"
    (board
        (add
            (merge {
                (rectangle 1 2)
                (shift 1 0 (rectangle 1 3))
                (shift 3 0 (rectangle 1 2))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (shift 0 2.5 (rectangle 1 2))
                (shift 1 2.5 (rectangle 1 3))
                (shift 3 2.5 (rectangle 1 2))
            })
            edges:{{9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7}}
        )
        use:Vertex
    )	
)

(define "TopExtensionNoJoinedDiagonal"
    (board
        (add
            (merge {
                (rectangle 1 2)
                (shift 1 0 (rectangle 1 3))
                (shift 3 0 (rectangle 1 2))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (shift 0 2.5 (rectangle 1 2))
                (shift 1 2.5 (rectangle 1 3))
                (shift 3 2.5 (rectangle 1 2))
                (scale 2 1 (shift 0 3 (rectangle 1 3)))
            })
            edges:{{9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12}}
        )
        use:Vertex
    )
)

(define "BothExtensionNoJoinedDiagonal"
    (board
        (add
            (merge {
                (rectangle 1 2)
                (shift 1 0 (rectangle 1 3))
                (shift 3 0 (rectangle 1 2))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (shift 0 2.5 (rectangle 1 2))
                (shift 1 2.5 (rectangle 1 3))
                (shift 3 2.5 (rectangle 1 2))
                (scale 2 1 (shift 0 3 (rectangle 1 3)))
                (scale 2 1 (shift 0 -0.5 (rectangle 1 3)))
            })
            edges:{{9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} {18 2}}
        )
        use:Vertex
    )	
)

(define "HaretavlEquipment"
    (hand Each)
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlEquipmentStartingPositions"
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlEquipmentStartingPositionsSwitchPlayers"
    (piece "Dog" P2 "StepToEmpty")
    (piece "Hare" P1 "StepToEmpty")	
)

(define "HaretavlRules"
    (rules 
        (start {
            (place "Dog1" (handSite P1) count:3)
            (place "Hare2" (handSite P2))
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlRulesStartingPosition"
    (rules 
        #1
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlRulesStartingPositionSwitchPlayers"
    (rules 
        #1
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentSwitchPlayers"
    (hand Each)
    (piece "Dog" P2 "StepToEmpty")
    (piece "Hare" P1 "StepToEmpty")	
)

(define "HaretavlRulesSwitchPlayers"
    (rules 
        (start {
            (place "Dog2" (handSite P2) count:3)
            (place "Hare1" (handSite P1))
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentTwoDogs"
    (hand Each)
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlRulesTwoDogs"
    (rules 
        (start {
            (place "Dog1" (handSite P1) count:2)
            (place "Hare2" (handSite P2))
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentSwitchPlayersTwoDogs"
    (hand Each)
    (piece "Dog" P2 "StepToEmpty")
    (piece "Hare" P1 "StepToEmpty")	
)

(define "HaretavlRulesSwitchPlayersTwoDogs"
    (rules 
        (start {
            (place "Dog2" (handSite P2) count:2)
            (place "Hare1" (handSite P1))
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentThreeDogsTwoHares"
    (hand Each)
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlRulesThreeDogsTwoHares"
    (rules 
        (start {
            (place "Dog1" (handSite P1) count:3)
            (place "Hare2" (handSite P2) count:2)
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentFourDogsTwoHares"
    (hand Each)
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlRulesFourDogsTwoHares"
    (rules 
        (start {
            (place "Dog1" (handSite P1) count:4)
            (place "Hare2" (handSite P2) count:2)
        })
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentFourDogsTwoHaresStartingPosition"
    (piece "Dog" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")	
)

(define "HaretavlRulesFourDogsTwoHaresStartingPosition"
    (rules 
        #1
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
    )		
)

(define "HaretavlRulesFourDogsTwoHaresStartingPositionSwitchPlayers"
    (rules 
        #1
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
    )		
)

(define "HaretavlEquipmentFourDogsTwoHaresStartingPositionSwitchPlayers"
    (piece "Dog" P2 "StepToEmpty")
    (piece "Hare" P1 "StepToEmpty")	
)

(define "BlockingGameEquipmentFourPieces"
    (hand Each)
    (piece "Marker" Each "StepToEmpty")
)

(define "BlockingGameRulesFourPieces"
    (rules 
        (start (place "Marker" "Hand" count:4))
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end ("BlockWin"))
    )		
)

(define "LineGameEquipmentThreePieces"
    (hand Each)
    (piece "Marker" Each "StepToEmpty")
)

(define "LineGameRulesThreePieces"
    (rules 
        (start (place "Marker" "Hand" count:3))
        
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        
        (end ("Line3Win"))
    )		
)

(define "JeuMilitaireEquipmentNoExtensionJoinedDiagonal"
    (board
        (add
            (merge {
                (scale 2 1 (rectangle 1 3))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (scale 2 1 (shift 0 2.5 (rectangle 1 3)))
            })
            edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}
        )
        use:Vertex
    )
    (piece "Marker" P1 "StepToEmpty")
    (piece "Marker" P2 
        (move Step
            (to if:(and 
                    (is Empty (to))
                    (<= (count Steps (to) 0) (count Steps (from) 0))
                )
            )
        )
    )
    (regions "Home" P2 (sites {6 9 5}))
    (regions "Home" P1 (sites {0}))
)

(define "JeuMilitaireEquipmentNoExtensionNoJoinedDiagonal"
    (board
        (add
            (merge {
                (rectangle 1 2)
                (shift 1 0 (rectangle 1 3))
                (shift 3 0 (rectangle 1 2))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (shift 0 2.5 (rectangle 1 2))
                (shift 1 2.5 (rectangle 1 3))
                (shift 3 2.5 (rectangle 1 2))
            })
            edges:{{9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7}}
        )
        use:Vertex
    )	
    (piece "Marker" P1 "StepToEmpty")
    (piece "Marker" P2 "StepToEmpty")
    (regions "Home" P2 (sites {8 13 7}))
    (regions "Home" P1 (sites {0}))
)

(define "JeuMilitaireRules"
    (rules 
        (start {
            (place "Marker1" (sites P1 "Home"))
            (place "Marker2" (sites P2 "Home"))
        })
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P1) (result P2 Win))
            (if (is In (where "Marker" P1) (sites P2)) (result P1 Win))
        }) 
    )		
)

(define "JeuMilitaireEquipmentNoExtensionJoinedDiagonalSwitchedPlayers"
    (board
        (add
            (merge {
                (scale 2 1 (rectangle 1 3))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (scale 2 1 (shift 0 2.5 (rectangle 1 3)))
            })
            edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}
        )
        use:Vertex
    )
    (piece "Marker" P2 "StepToEmpty")
    (piece "Marker" P1 
        (move Step
            (to if:(and 
                    (is Empty (to))
                    (<= (count Steps (to) 0) (count Steps (from) 0))
                )
            )
        )
    )
    (regions "Home" P1 (sites {6 9 5}))
    (regions "Home" P2 (sites {0}))
)

(define "JeuMilitaireEquipmentNoExtensionNoJoinedDiagonalSwitchedPlayers"
    (board
        (add
            (merge {
                (rectangle 1 2)
                (shift 1 0 (rectangle 1 3))
                (shift 3 0 (rectangle 1 2))
                (rectangle 2 1)
                (shift 4 0 (rectangle 2 1))
                (shift 4 1.5 (rectangle 2 1))
                (shift 0 1.5 (rectangle 2 1))
                (shift 0 2.5 (rectangle 1 2))
                (shift 1 2.5 (rectangle 1 3))
                (shift 3 2.5 (rectangle 1 2))
            })
            edges:{{9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7}}
        )
        use:Vertex
    )	
    (piece "Marker" P2 "StepToEmpty")
    (piece "Marker" P1 
        (move Step
            (to if:(and 
                    (is Empty (to))
                    (<= (count Steps (to) 0) (count Steps (from) 0))
                )
            )
        )		
    )
    (regions "Home" P1 (sites {8 13 7}))
    (regions "Home" P2 (sites {0}))
)

(define "JeuMilitaireRulesSwitchedPlayers"
    (rules 
        (start {
            (place "Marker2" (sites P2 "Home"))
            (place "Marker1" (sites P1 "Home"))
        })
        
        (play (forEach Piece))
        
        (end {
            (if (no Moves P2) (result P1 Win))
            (if (is In (where "Marker" P2) (sites P1)) (result P2 Win))
        }) 
    )		
)

(define "JanesSoppiGameEquipment"
    (hand Each)
    (piece "Hound" P1 "StepToEmpty")
    (piece "Hare" P2 "StepToEmpty")
)

(define "JanesSoppiGameRules"
    (rules 
        (start {
            (place "Hound1" (handSite P1) count:3)
            (place "Hare2" (handSite P2) count:3)
        })
        
        phases:{
        (phase "Placement"
            (play (move (from (handSite Mover)) (to (sites Empty))))
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        
        ("PhaseMovePiece" "Movement")
        }
        (end ("BlockWin"))
    )		
)

(game "Ludus Coriovalli"
    
    (players 2)
    (equipment {
        ("NoExtensionJoinedDiagonal")
        ("HaretavlEquipment")
    })
    ("HaretavlRules")
    
)

