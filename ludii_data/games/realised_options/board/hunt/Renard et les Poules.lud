(define "RememberSiteWithPossibleCapture" 
    (set Pending 
        (sites To
            (forEach Piece "Fox" 
                #1
            ) 
        )
    )
)

(define "RememberSiteWithPossibleMultiCapture" 
    (set Pending 
        (sites To
            (if ("SameTurn")
                #1
                (forEach Piece "Fox" 
                    #2
                ) 
            )
        )
    )
)

(define "SitesWithPossibleCaptureInPreviousTurn" (sites Pending))

(define "ShouldCapturedButMoved" 
    (and
        (is Pending)
        (not (is In (last To) ("SitesWithPossibleCaptureInPreviousTurn"))) 
    )
)

(define "HopCustomSequenceCapture" 
    (move Hop
        #1
        #2
        (between 
            if:("IsEnemyAt" (between)) 
            (apply (remove (between) #3))
        )
        (to if:(is Empty (to)))
        (then 
            (if (can Move 
                    (hop 
                        (from (last To)) 
                        #2
                        (between 
                            if:(and 
                                (not (is In (between) (sites ToClear))) 
                                ("IsEnemyAt" (between))
                            )
                            (apply (remove (between) #3))
                        )
                        (to if:(is Empty (to)))
                    )
                ) 
                (moveAgain)
            )
        )
    )
)

(define "HasNotCaptured" 
    (if (< (value Player Mover) 0)
        (set Value Mover 1)
        (set Value Mover (+ 1 (value Player Mover)))
    )
)

(define "DidNotCaptured" (> (value Player Prev) 0))

(define "HenAdded" (set Value Prev (- (value Player Prev) 1)))

(define "BottomEmptySites" (intersection (sites Empty) (sites Bottom)))

(game "Renard et les Poules" 
    (players 2) 
    (equipment { 
        ("CrossBoard" 3 7 use:Vertex diagonals:Alternating)
        (hand P1)
        (piece "Fox" P1 S
            (or 
                ("HopCapture") 
                ("StepToEmpty")
            ) 
        )
        (piece "Hen" P2 N ("StepToEmpty" (directions {Forwards Rightward Leftward}))) 
    }) 
    (rules 
        (start { 
            (place "Fox1" (centrePoint))
            (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))
        })
        
        phases:{
        (phase "FoxPhase" P1 
            (play 
                
                (do 
                    ("RememberSiteWithPossibleCapture" ("HopCapture")) 
                    next:(forEach Piece
                        (then 
                            (if ("ShouldCapturedButMoved")
                                ("HasNotCaptured")
                            )
                        )
                    )
                )
                
            )
        )
        (phase "HenPhase" P2
            (play 
                (if (and ("DidNotCaptured") (!= 0 (count Sites in:("BottomEmptySites"))))
                    (move Add 
                        (to ("BottomEmptySites")) 
                        (then (and ("HenAdded") (moveAgain)))
                    )
                    (forEach Piece)
                )
            )
        )
        }
        
        (end {
            (if (no Moves P1) (result P1 Loss))
            (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))
        }) 
    )
)

