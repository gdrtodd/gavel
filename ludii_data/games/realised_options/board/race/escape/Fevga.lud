(define "NotAnEnemy" (not ("IsEnemyAt" (to))))

(define "NextSiteFrom" ("NextSiteOnTrack" (pips) from:#1))

(define "AllPieceInHome" ("AllOwnedPiecesIn" (sites Mover "Home")))

(define "RemoveAPiece" (move Remove (site)))

(define "DieNotUsedAndNoEscapeAndNotOffTheTrack" 
    (and { 
        ("DieNotUsed") 
        ("IsNotOffBoard" ("NextSiteFrom" (from))) 
        ("IsNotEndTrack" ("NextSiteFrom" (from)))
    })		
)

(define "MoveAPiece" 
    (move 
        (from #1)
        (to 
            ("NextSiteFrom" #1) 
            if:("NotAnEnemy") 
        )
    )
)

(define "MoveAPieceIf" 
    (forEach Die 
        replayDouble:True 
        if:#1
        (if (or {
                (not ("InTheStartingPosition"))
                (and ("InTheStartingPosition") ("Not14PiecesInThePosition"))
                ("PieceInOpponentSide")
            })
            ("MoveAPiece" #2)
        )
    )		
)

(define "AllPieceEscaped" (no Pieces Mover))

(define "NumPiece" (size Stack in:(sites Occupied by:#1)))

(define "CanEscape" ("IsEndTrack" ("NextSiteFrom" (site))))

(define "NotEmptyAndNotOffTheBoard" 
    (and 
        (is Occupied (site))
        ("IsNotOffBoard" ("NextSiteFrom" (site)))
    )
)

(define "SetScoreOf" 
    (score 
        #1 
        (if (is Mover #1) 
            (if 
                (= ("NumPiece" #2) 15) 
                2 
                1
            ) 
            0
        )
    )
)

(define "HaveAPieceAndCanEscape" 
    (and 
        ("IsFriendAt" (site)) 
        (< ("NextSiteOnTrack" (pips) from:(site)) 0)
    )
)

(define "PieceInOpponentSide" (not ("AllOwnedPiecesIn" (sites Mover "Side"))))

(define "InTheStartingPosition" (= (from) (mapEntry (mover))))

(define "Not14PiecesInThePosition" (!= (topLevel at:(from)) 13))

(game "Fevga" 
    (players 2) 
    (equipment { 
        ("BackgammonBoard" ("BackgammonTracksSameDirectionOppositeCorners" End)) 
        (dice num:2)
        (regions "Home" P1 { 20..25 }) 
        (regions "Home" P2 { 7..12 }) 
        (regions "Side" P1 { 0..12 }) 
        (regions "Side" P2 { 13..25 }) 
        (map {(pair 1 0) (pair 2 25)}) 
        (piece "Disc" Each ("MoveAPieceIf" "DieNotUsedAndNoEscapeAndNotOffTheTrack" (from))) 
    })
    
    (rules
        (start { 
            (place Stack "Disc1" 0 count:15)
            (place Stack "Disc2" 25 count:15)
        })
        
        (play 
            ("RollEachNewTurnMove"
                (if "AllPieceInHome"
                    (forEach Die 
                        replayDouble:True 
                        if:("DieNotUsed")
                        (forEach Site 
                            (sites Occupied by:Mover)
                            (if ("NotEmptyAndNotOffTheBoard") 
                                (if ("CanEscape")
                                    ("RemoveAPiece")
                                    ("MoveAPiece" (site))
                                )
                            )
                            noMoveYet:(firstMoveOnTrack "Track" Mover
                                (if "HaveAPieceAndCanEscape"
                                    "RemoveAPiece"
                                )
                            )
                            (then "ReplayNotAllDiceUsed")
                        )
                    )
                    (max Distance "Track" Mover
                        (forEach Piece top:True
                            (then "ReplayNotAllDiceUsed")
                        )
                    )
                )
            )
        )
        
        (end 
            (if ("AllPieceEscaped") 
                (byScore { 
                    ("SetScoreOf" P1 P2)
                    ("SetScoreOf" P2 P1)
                })
            )
        )
    )
)

