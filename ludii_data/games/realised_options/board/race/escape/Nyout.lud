(define "ThrowValue" (mapEntry "Throw" (count Pips)))
(define "SpecialThrows" (is In ("ThrowValue") (sites {4 5})))

(define "NextSiteFrom" ("NextSiteOnTrack" #3 from:#1 #2))

(define "Move" 
    (or (forEach Piece top:True) (forEach Piece container:(mover) top:True))	
)

(define "MoveOnTrack" 
    (if (is In (from) (sites Track #2 #1))
        (forEach Value (values Remembered "Throws")
            (or
                (if ("IsOffBoard" ("NextSiteFrom" (from) #1 (value)))
                    (do
                        (forget Value "Throws" (value))
                        next:(move Remove (from) level:(level))
                    )
                )
                (move
                    (from (from) level:(level))
                    (to ("NextSiteFrom" (from) #1 (value))
                        if:("NoEnemyOrOnlyOne" (to))	
                        (apply 
                            (and	
                                (if ("IsEnemyAt" (to))
                                    (fromTo
                                        (from (to))
                                        (to (handSite (who at:(to))))
                                    )
                                )
                                (forget Value "Throws" (value))
                            )
                        )
                    )
                    (then
                        (if (and (!= (last From) (handSite Mover)) (is Occupied (last From)))
                            (forEach Level (last From) FromTop
                                (fromTo
                                    (from (last From) level:(level))
                                    (to (last To))
                                )
                            )
                        )
                    )
                )
                (then (if (!= 0 (size Array (values Remembered "Throws")))	(moveAgain)))
            )
        )
    )		
)

(game "Nyout" 
    (players 2) 
    (equipment { 
        (board (concentric {1 -4 -4 20}) 
            {
            
            (track "Track1" {29 9..28} P1 directed:True)
            (track "Track2" {30 9..28} P2 directed:True)
            
            (track "HorizontalTrack" {13 5 1 0 3 7 23..28} directed:True)
            (track "VerticalTrack" {18 6 2 0 4 8 28} directed:True)
            }
            use:Vertex
        )
        (piece "Counter" Each
            (or {
                ("MoveOnTrack" "Track" Mover)
                ("MoveOnTrack" "HorizontalTrack")
                ("MoveOnTrack" "VerticalTrack")
            })
        )
        (dice d:2 from:0 num:4)
        (hand Each)
        (map "Throw" {(pair 0 4) (pair 1 3) (pair 2 2) (pair 3 1) (pair 4 5)})
    }) 
    
    (rules 
        (start { 
            
            (set Team 1 {P1})
            (set Team 2 {P2})
            (place Stack "Counter1" (handSite P1) count:4)
            (place Stack "Counter2" (handSite P2) count:4)
            
        })
        phases:{
        (phase "Throwing" 
            (play 
                ("RollMove"
                    (move Pass (then (remember Value "Throws" ("ThrowValue"))))
                    (then (moveAgain))
                )
            )
            (nextPhase Mover (not ("SpecialThrows")) "Moving")
        )
        (phase "Moving"
            (play 
                (if (can Move ("Move"))
                    ("Move")
                    (move Pass (then (forget Value "Throws" All)))
                )
            )
            (nextPhase Mover (= 0 (size Array (values Remembered "Throws"))) "Throwing")
        )
        }
        
        (end ("EscapeTeamWin"))
    )
) 

