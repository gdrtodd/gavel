(define "Die1" (face 16))
(define "Die2" (face 17))

(define "LowerDie"
    (if (< ("Die1") ("Die2"))
        ("Die1")
        ("Die2")
    )
)

(define "Double1" 
    (and 
        (= 2 (count Pips)) 
        (is AnyDie 1)
    )
)

(define "DoubleOfAnother" 
    (= ("Die1") ("Die2"))
)

(define "ConsecutiveNumber" 
    (or 
        (= ("Die1") (- ("Die2") 1))
        (= ("Die1") (+ ("Die2") 1))
    )
)

(define "TrackMove" ("NextSiteOnTrack" #3 #1 #2))

(define "Double1Move"
    (forEach Site (sites Occupied by:Mover top:False) 
        (forEach Level (site) 
            (if ("IsFriendAt" (site) level:(level))
                (move Remove (site) level:(level))
            )
        )	
    )	
)

(define "MoveAPiece" 
    (move 
        (from (site) level:(level)) 
        (to ("TrackMove" from:(site) "Track" #1)) 
        #2
    )	
)

(define "NotReplayMove" (<= (var) 0))

(define "ReplayConsequences" 
    (then
        (if ("NotReplayMove")
            (and
                (moveAgain)
                (set Var #1)
            )
            (set Var 0)
        )
    )
)

(define "DoubleOfAnotherMove"
    (forEach Site (sites Occupied by:Mover top:False) 
        (forEach Level (site) 
            (or
                (if (<= (var) 0) ("MoveAPiece" ("Die1")))
                ("MoveAPiece" (count Pips) ("ReplayConsequences" 1))
            )
        )
    )
)

(define "ConsecutiveNumberMove"
    (forEach Site (sites Occupied by:Mover top:False) 
        (forEach Level (site) 
            (or
                (if (!= (var) (- (count Pips) 1))
                    (or
                        ("MoveAPiece" ("LowerDie"))
                        ("MoveAPiece" (- (count Pips) 1))
                        ("ReplayConsequences" (- (count Pips) 1))
                    )
                )
                (if (!= (var) (count Pips))
                    ("MoveAPiece" (count Pips) ("ReplayConsequences" (count Pips)))
                )
            )
        )
    )
)

(define "NonConsecutiveNumber"
    (forEach Site (sites Occupied by:Mover top:False) 
        (forEach Level (site) 
            (or
                (if (!= (var) ("Die1")) ("MoveAPiece" ("Die1") ("ReplayConsequences" ("Die1"))))
                (if (!= (var) ("Die2")) ("MoveAPiece" ("Die2") ("ReplayConsequences" ("Die2"))))
            )
        )
    )	
)

(define "Move" 
    (if ("Double1")
        ("Double1Move")
        (if ("DoubleOfAnother")
            ("DoubleOfAnotherMove")
            (if ("ConsecutiveNumber")
                ("ConsecutiveNumberMove")
                ("NonConsecutiveNumber")
            )
        )
    )
)

(game "Tsun K'i" 
    (players 2)
    (equipment {
        (board 
            (scale 10 2 (rectangle 8 2))
            {
            (track "Track1" "1,N,W,S,N,E1,S" P1 directed:True)
            (track "Track2" "14,S,E,N,S,W1,N" P2 directed:True)
            }
        )
        (piece "Stick" Each)
        (dice d:6 num:2)
        (regions "Exit" P1 (sites {"B1" "B2"}))
        (regions "Exit" P2 (sites {"A7" "A8"}))
    })
    (rules
        (start {
            (place Stack "Stick1" (sites {"B1" "B2"}) count:8)
            (place Stack "Stick2" (sites {"A7" "A8"}) count:8)
        })
        (play 
            (do
                (if ("NotReplayMove") (roll))
                next:(if (can Move ("Move")) ("Move") (move Pass (then (set Var 0))))
                (then
                    (if (and (is In (last To) (sites Mover "Exit")) (not (is In (last From) (sites Mover "Exit"))))
                        (remove (last To) level:(last LevelTo))
                    )
                )
            )
        )
        (end ("EscapeWin"))
    )
)

