(define "SlideMove"
    (move Slide #1
        (to
            (apply if:(all Sites (sites Around (to)) if:(!= (what at:(site)) (id #2 Next))))
        )
    )	
)
(define "MouseMove" ("SlideMove" Orthogonal "Lion"))
(define "ElephantMove" ("SlideMove" All "Mouse"))
(define "LionMove" ("SlideMove" Diagonal "Elephant"))

(define "IsAround" (is In (from) (sites Around (sites Occupied by:Next component:#1))))

(define "ThreePiecesInWater" (= 3 (count Sites in:(intersection (sites Occupied by:Mover) (sites "Water")))))

(game "Barca" 
    (players 2) 
    (equipment { 
        (board (square 10)) 
        (piece "Mouse" Each ("MouseMove"))
        (piece "Elephant" Each ("ElephantMove"))
        (piece "Lion" Each ("LionMove"))
        (regions "Water" (sites {"D4" "D7" "G4" "G7"}))
    }) 
    (rules
        (start {
            (place "Elephant1" (sites {"E1" "F1"}))
            (place "Lion1" (sites {"D2" "G2"}))
            (place "Mouse1" (sites {"E2" "F2"}))
            (place "Elephant2" (sites {"E10" "F10"}))
            (place "Lion2" (sites {"D9" "G9"}))
            (place "Mouse2" (sites {"E9" "F9"}))
        })
        
        (play
            (priority {
                (and {
                    (forEach Piece "Mouse" (if ("IsAround" "Lion") ("MouseMove")))
                    (forEach Piece "Elephant" (if ("IsAround" "Mouse") ("ElephantMove")))
                    (forEach Piece "Lion" (if ("IsAround" "Elephant") ("LionMove")))
                })
                (forEach Piece)
            })
        )
        
        (end (if ("ThreePiecesInWater") (result Mover Win)))
    )
)

