(define "FromIsOnTheRegionToFill" (is In #1 (sites (player (mapEntry (mover))))))

(define "ToIsOnTheRegionToFill" (is In #1 (sites (player (mapEntry (mover))))))

(define "Hop" 
    (move Hop
        (from #1)
        (between if:(is Occupied (between)))
        (to 
            if:(and
                ("IsEmptyAndNotVisited" (to))
                (or
                    (not ("FromIsOnTheRegionToFill" #1))
                    ("ToIsOnTheRegionToFill" (to)) 
                )
            )
        )
        #2		
    )
) 

(define "HopSequence" ("Hop" #1 (then (if (can Move ("Hop" (last To))) (moveAgain)))))

(game "Grasshopper" 
    (players 2) 
    (equipment { 
        (board (square 8)) 
        (piece "Counter" Each)
        
        (regions "Home" P1 (expand origin:(coord "A1") steps:3 Orthogonal))
        (regions "Home" P2 (expand origin:(coord "H8") steps:3 Orthogonal))
        
        (map {(pair P1 P2) (pair P2 P1)})
    }) 
    (rules 
        (start { 
            (place "Counter1" (sites P1))
            (place "Counter2" (sites P2))
        })
        
        phases:{
        (phase "Movement" 
            (play 
                (forEach Piece 
                    (or 
                        ("HopSequence" (from)) 
                        (move Step 
                            (to 
                                if:(and
                                    (is Empty (to))
                                    (or
                                        (not (is In (from) (sites Next)))
                                        (is In (to) (sites Next)) 
                                    )
                                )
                            )
                        )
                    )
                )
            ) 
            (nextPhase (is Mover (next)) "MultiJump")
        ) 
        (phase "MultiJump" 
            (play 
                (or 
                    ("HopSequence" (last To)) 
                    (move Pass)
                )
            ) 
            (nextPhase (not (is Mover (next))) "Movement")
        ) 
        }
        
        (end ("FillWin" (sites (player (mapEntry (mover))))))
    )
)

