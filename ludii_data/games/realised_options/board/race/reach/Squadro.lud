(define "Direction" 
    (if (= 1 (value Piece at:#1)) Forward Backward)
)

(define "MoveAgainIsJumpEnemy"
    (then 
        (if ("IsEnemyAt" (ahead (last To) ("Direction" (last To))))
            (moveAgain)
        )
    ) 
)

(define "Slide" 
    (move Slide
        ("Direction" (from))
        (between (exact #1))
        (to if:(is Empty (to)))
        #2
    ) 
)

(define "MoveThree"
    (if (can Move ("Slide" 3))
        ("Slide" 3)
        (if (can Move ("Slide" 2))
            ("Slide" 2 ("MoveAgainIsJumpEnemy"))
            (if (can Move ("Slide" 1))
                ("Slide" 1 ("MoveAgainIsJumpEnemy"))
                (move Select (from) (then (moveAgain)))
            )
        )
    )
)

(define "MoveTwo"
    (if (can Move ("Slide" 2))
        ("Slide" 2)
        (if (can Move ("Slide" 1))
            ("Slide" 1 ("MoveAgainIsJumpEnemy"))
            (move Select (from) (then (moveAgain)))
        )
    )
)

(define "MoveOne"
    (if (can Move ("Slide" 1))
        ("Slide" 1)
        (move Select (from) (then (moveAgain)))
    )
)

(game "Squadro"
    (players {(player E) (player S)}) 
    (equipment {
        (board 
            (remove 
                (square 7) 
                vertices:{0 6 42 48}
            )
            use:Vertex
        )
        (piece "Minus" Each
            (if (= 3 (state at:(from)))
                "MoveThree"
                (if (= 2 (state at:(from)))
                    "MoveTwo"
                    "MoveOne"
                )
            )
        )
        (regions "Home" P1 (sites Left))
        (regions "Home" P2 (sites Top))
        (regions "OppositeHome" P1 (sites Right))
        (regions "OppositeHome" P2 (sites Bottom))
        (map {
            (pair 39 1) (pair 32 3) (pair 25 2) (pair 18 3) (pair 11 1)
            (pair 0 3) (pair 1 1) (pair 2 2) (pair 3 1) (pair 4 3)
        })
    })
    (rules 
        (start {
            (place "Minus1" coord:"A2" state:3 value:1)
            (place "Minus1" coord:"A3" state:1 value:1)
            (place "Minus1" coord:"A4" state:2 value:1)
            (place "Minus1" coord:"A5" state:1 value:1)
            (place "Minus1" coord:"A6" state:3 value:1)
            (place "Minus2" coord:"B7" state:1 value:1)
            (place "Minus2" coord:"C7" state:3 value:1)
            (place "Minus2" coord:"D7" state:2 value:1)
            (place "Minus2" coord:"E7" state:3 value:1)
            (place "Minus2" coord:"F7" state:1 value:1)
        })
        
        (play 
            (if ("SameTurn") 
                (move Hop
                    (from (last To))
                    (between 
                        (range 1 (count Columns)) 
                        if:("IsEnemyAt" (between))
                        (apply
                            (fromTo
                                (from (between))
                                (to 
                                    (if (is Mover P1)
                                        (coord row:(if (= (value Piece at:(between)) 1) (- (count Rows) 1) 0) column:(column of:(between)))
                                        (coord row:(row of:(between)) column:(if (= (value Piece at:(between)) 1) 0 (- (count Columns) 1)))
                                    )
                                )
                            )
                        )
                    )
                    (to if:(is Empty (to)))
                )
                (forEach Piece)
                (then 
                    (if (is In (last To) (sites Mover "OppositeHome"))
                        (and
                            (set Value at:(last To) 2)
                            (set State at:(last To) (mapEntry (last To)))
                        )
                        (if (and (!= (last From) (last To)) (is In (last To) (sites Mover "Home")))
                            (remove (last To))
                        )
                    )
                )
            )
        )
        
        (end (if (= (count Pieces Mover) 1) (result Mover Win)))
    )
)

