(define "Columns" 6)

(define "OwnedHoles" 
    (if (is Mover P1)
        (sites (values Remembered "OwnedP1"))
        (sites (values Remembered "OwnedP2"))
    )
)

(define "RemmemberOwnedHoles" 
    (if (is Mover P1)
        (remember Value "OwnedP1" #1)
        (remember Value "OwnedP2" #1)
    )
)

(define "OnlyPiecesInMarked" 
    (all Sites (forEach (sites Board) if:(= 0 (state at:(site)))) if:(= 0 (count at:(site))))
)

(define "SitesMarkedBy" 
    (forEach (sites Board) if:(= #1 (state at:(site))))
)

(define "NoEmptyHoleRow" (all Sites (sites Mover) if:(is Occupied (site))))

(game "Selus (Massawa)" 
    (players 2) 
    (equipment { 
        (mancalaBoard 3 "Columns" store:None
            (track "Track" "0,E,N1,W2,17,W,S1,E2" loop:True)
        )
        (piece "Seed" Shared)
        (hand Each)
        (regions P1 (union (sites Bottom) (difference (expand (sites Right) steps:2) (sites Top)))) 
        (regions P2 (union (sites Top) (difference (expand (sites Left) steps:2) (sites Bottom)))) 
        (map "LeftMostHole" {(pair P1 0) (pair P2 17)})
    }) 
    (rules 
        
        (start { 
            (set RememberValue "OwnedP1" (sites P1))
            (set RememberValue "OwnedP2" (sites P2))
            (set Count 3 to:(sites Track))
        })
        
        phases:{
        (phase "Sowing"
            (play
                (or {
                    (move Select
                        (from 
                            (if (and (not (is Pending)) ("SameTurn"))
                                ("LastHoleSowed") 
                                ("OwnedHoles") 
                            )
                            if:(and (< 0 (count at:(from))) (= 0 (state at:(from))))
                        )
                        
                        (then
                            (sow
                                apply:(if (< 1 (count at:(to)))
                                    (if (and (!= (mapEntry "LeftMostHole" Mover) (to)) (!= 0 (state at:(to))))
                                        (and {
                                            (if (or (= (mover) (state at:(to))) (= (mapEntry "LeftMostHole" Next) (to))) 
                                                (and
                                                    (moveAgain)
                                                    (set Pending)
                                                )
                                            )
                                            (fromTo
                                                (from (to))
                                                (to (handSite Mover))
                                                count:2
                                            )
                                            (set State at:(to) (state at:(to)))
                                        })
                                        (if (and {(< 2 (count Turns)) (= 0 (state at:(to))) (= 4 (count at:(to))) })
                                            (set State at:(to) (mover))	
                                            (moveAgain)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    }
                    (then
                        (if ("OnlyPiecesInMarked")
                            (and { 
                                (forEach Site ("SitesMarkedBy" 1)
                                    (fromTo
                                        (from (site))
                                        (to (handSite P1))
                                        count:(count at:(site))
                                    )
                                )
                                (forEach Site ("SitesMarkedBy" 2)
                                    (fromTo
                                        (from (site))
                                        (to (handSite P2))
                                        count:(count at:(site))
                                    )
                                )
                                (forget Value "OwnedP1" All)
                                (forget Value "OwnedP2" All)
                            })
                        )
                    )
                )
            )
            
            (end (if ("NoPieceOnBoard")
                    {
                    (if (> 3 (count Cell at:(handSite P1))) (result P2 Win))
                    (if (> 3 (count Cell at:(handSite P2))) (result P1 Win))
                    }
                )
            )
            (nextPhase ("NoPieceOnBoard") "BetweenRounds")
        )
        
        (phase "BetweenRounds"
            (play
                (if (<= 3 (count Cell at:(handSite Mover)))
                    (move
                        (from (handSite Mover))
                        (to (if ("NoEmptyHoleRow") (sites Board) (sites Mover)) if:(is Empty (to)))
                        count:3
                        (then
                            ("RemmemberOwnedHoles" (last To))
                        )
                    )
                    (if (= 2 (count Cell at:(handSite Mover)))
                        (move
                            (from (handSite Mover))
                            (to (if ("NoEmptyHoleRow") (sites Board) (sites Mover)) if:(is Empty (to)))
                            count:2
                            (then
                                (and
                                    (fromTo
                                        (from (handSite Next))
                                        (to (last To))
                                        count:1
                                    )
                                    ("RemmemberOwnedHoles" (last To))
                                )
                            )
                        )
                    )
                )
            )
            (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing")
        )
        }
    )
)

