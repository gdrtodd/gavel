
(define "QtyAround"
    (count Pieces 
        Next
        in:(sites Around #1 "LoSDirection")
    )
)

(define "LoSAt"
    (count Pieces 
        Next 
        in:(sites LineOfSight Piece at:#1 "LoSDirection")
    )
)

(define "SitesControlledBy"
    (sites
        (results
            from:(sites Occupied by:#1)
            to:(sites LineOfSight Empty at:(from) "LoSDirection")
            (to)
        )
    )
)

(define "Placement"
    (move Add
        (piece (mover))
        (to
            (difference
                (sites Empty)
                ("SitesControlledBy" Next)
            )
        )
    )
)

(define "Movement"
    (forEach Piece
        (do 
            (and
                (set Var "LoSFrom" ("LoSAt" (from)))
                (set Var "QtyAroundFrom" ("QtyAround" (from)))
            )
            next:(move Slide "LoSDirection")
            ifAfterwards:(or
                (> ("QtyAround" (last To)) (var "QtyAroundFrom")) 
                (and 
                    (= ("QtyAround" (last To)) (var "QtyAroundFrom")) 
                    (> ("LoSAt" (last To)) (var "LoSFrom")) 
                )
            )
        )
        #1  
    )
)

(define "MPScoring"
    (set Score
        #1
        (+
            (size Array 
                (array
                    (sites From
                        ("Movement" #1)
                    )
                )
            )
            (count Sites 
                in:(difference
                    ("SitesControlledBy" #1)
                    ("SitesControlledBy" #2)
                )
            )
        )
    )
)

(define "ScoreTerritory" (and ("MPScoring" Mover Next) ("MPScoring" Next Mover)))

(game "Epoxy" 
    (players 2)
    (equipment {
        "BoardUsed"
        (piece "Ball" Each (move Slide))
    })
    (rules
        (start (set Score Each 0))
        (play 
            (or {
                ("Placement") 
                ("Movement" Mover) 
                (if
                    (and
                        (not (is Prev Next))
                        (< 0 (counter)) 
                    )
                    (move Pass)
                )
                }
                (then 
                    (if (is Prev Next)
                        (moveAgain)
                        ("ScoreTerritory")
                    ) 
                )
            )
        )
        (end "PassEnd")
    )
)

(define "PassEnd"
    (if 
        (and 
            ("SameTurn")
            (no Moves Next) 
        )
        (result Mover Win)
))

(define "LoSDirection" Orthogonal)
(define "BoardUsed" "Perf2")

(define "Jungle" (poly { { -3.5 -11.75 } { -10.0 -5.25 } { -6.75 12.0 } { 1.25 14.75 } { 15.25 3.25 } { 14.0 -5.75 } })) 

(define "Perf2" (board (dual (remove (hex 4 5) cells:{0 1 15 20 25 32 36 39 44 })) use:Vertex))
(define "Perf3" (board (dual (remove (hex 5 6) cells:{0 1 2 3 4 5 6 7 11 12 13 14 21 25 30 37 42 53 63 64 65 69 70 71 72 73 74})) use:Vertex))
(define "Perf4" (board (dual (remove (hex 6) cells:{0 1 5 12 17 23 30 37 40 45 50 53 60 67 73 78 85 89 90})) use:Vertex))
(define "Perf5" (board (dual (remove (hex 7 8) cells:{0 1 2 3 4 5 6 7 8 9 10 11 12 16 17 18 19 26 27 34
38 43 50 53 60 63 64 71 76 77 82 89 92 99 108 116 123 130 131 132 136 137 138 139 140 141 142 143 144 145 146})) use:Vertex))
(define "Perf6" (board (dual (remove (hex 8) cells:{0 4 5 6 7 8 13 17 20 27 28 35 44 49 54 61 62 65 72
76 77 84 91 92 96 103 106 107 114 119 124 133 140 141 148 151 155 160 161 162 163 164 168})) use:Vertex))
(define "Perf7" (board (dual (remove (hex "Jungle") cells:{12 25 34 41 50 57 66 75 82 91 98 107 116 123 131 144 150 161})) use:Vertex))

