(define "ShiftLeft"
    (move Select
        (from (forEach (sites Column (- (count Columns) 1)) if:(not (all Sites (sites Row (row of:(site))) if:(is Empty (site))))))
        (to (ahead (from) W) if:(not (is In (+ (from) (to)) (sites Pending))))
        (then
            (and {
                (forEach Site
                    (sites Row (row of:(last From)))
                    (remove (site))
                )
                (forEach Site
                    (sites Row (row of:(last From)))
                    (if (!= (ahead (site) W) (site))
                        (add
                            (piece (what at:(site)))
                            (to (ahead (site) W))
                        )
                        (add
                            (piece (what at:(site)))
                            (to (coord row:(row of:(last From)) column:(- (count Columns) 1)))
                        )
                    )
                )
                
                (set Pending (+ (last From) (last To))) 
                (set Pending (+ (coord row:(row of:(last From)) column:0) (ahead (coord row:(row of:(last From)) column:0) E)))
            })
        )
    )	
)

(define "ShiftRight"
    (move Select
        (from (forEach (sites Column 0) if:(not (all Sites (sites Row (row of:(site))) if:(is Empty (site))))))
        (to (ahead (from) E) if:(not (is In (+ (from) (to)) (sites Pending))))
        (then
            (and {
                (forEach Site
                    (sites Row (row of:(last From)))
                    (remove (site))
                )
                (forEach Site
                    (sites Row (row of:(last From)))
                    (if (!= (ahead (site) E) (site))
                        (add
                            (piece (what at:(site)))
                            (to (ahead (site) E))
                        )
                        (add
                            (piece (what at:(site)))
                            (to (coord row:(row of:(last From)) column:0))
                        )
                    )
                )
                
                (set Pending (+ (last From) (last To)))
                (set Pending (+ (coord row:(row of:(last From)) column:(- (count Columns) 1)) (ahead (coord row:(row of:(last From)) column:(- (count Columns) 1)) W)))
            })
        )
    )	
)

(define "ShiftUp"
    (move Select
        (from (forEach (sites Row 0) if:(not (all Sites (sites Column (column of:(site))) if:(is Empty (site))))))
        (to (ahead (from) N) if:(not (is In (+ (from) (to)) (sites Pending))))
        (then
            (and {
                (forEach Site
                    (sites Column (column of:(last From)))
                    (remove (site))
                )
                (forEach Site
                    (sites Column (column of:(last From)))
                    (if (!= (ahead (site) N) (site))
                        (add
                            (piece (what at:(site)))
                            (to (ahead (site) N))
                        )
                        (add
                            (piece (what at:(site)))
                            (to (coord row:0 column:(column of:(last From))))
                        )
                    )
                )
                
                (set Pending (+ (last From) (last To)))
                (set Pending (+ (coord row:(- (count Rows) 1) column:(column of:(last To))) (ahead (coord row:(- (count Rows) 1) column:(column of:(last To))) S)))
            })
        )
    )	
)

(define "ShiftDown"
    (move Select
        (from (forEach (sites Row (- (count Rows) 1)) if:(not (all Sites (sites Column (column of:(site))) if:(is Empty (site))))))
        (to (ahead (from) S) if:(not (is In (+ (from) (to)) (sites Pending))))
        (then
            (and {
                (forEach Site
                    (sites Column (column of:(last From)))
                    (remove (site))
                )
                (forEach Site
                    (sites Column (column of:(last From)))
                    (if (!= (ahead (site) S) (site))
                        (add
                            (piece (what at:(site)))
                            (to (ahead (site) S))
                        )
                        (add
                            (piece (what at:(site)))
                            (to (coord row:(- (count Rows) 1) column:(column of:(last From))))
                        )
                    )
                )
                
                (set Pending (+ (last From) (last To)))
                (set Pending (+ (coord row:(- (count Rows) 1) column:0) (ahead (coord row:(- (count Rows) 1) column:0) N)))
            })
        )
    )	
)

(define "IsLine"
    (not
        (all Sites
            (sites Occupied by:#1)
            if:(not (is Line 5 through:(site)))
        )
    )
)

(game "Kassle"
    (players 2)
    (equipment {
        (board (square 5))
        (piece "Square" Each)
    })
    (rules
        (play 
            (or {
                (move Add (to (sites Empty)))
                ("ShiftLeft")
                ("ShiftRight")
                ("ShiftUp")
                ("ShiftDown")
            })
        )
        (end {
            (if (and ("IsLine" P1) ("IsLine" P2)) 
                (result Mover Win)
            )
            (if ("IsLine" P1) 
                (result P1 Win)
            )
            (if ("IsLine" P2) 
                (result P2 Win)
            )
        })
    )
)

