
(define "FileAt" (+ (% #1 3) (* (/ #1 9) 9)))
(define "RowAt" (* (/ #1 3) 3))
(define "ColumnAt" (% #1 9))

(define "AdjacentOccupiedUpDown"
    (sites
        (results
            from:#1
            to:(forEach
                (difference
                    (difference
                        (sites {("ColumnAt" (from)) (+ ("ColumnAt" (from)) 9) (+ ("ColumnAt" (from)) 18) })
                        (from)
                    )
                    (sites Empty)
                )
                if:(or
                    (= (site) (+ ("ColumnAt" (from)) 9))
                    (= (from) (+ ("ColumnAt" (from)) 9))
                )
            )
            (to)
        )
    )
)

(define "EmptySlideSitesUpDown"
    (sites
        (results
            from:#1
            to:(forEach
                (intersection
                    (difference
                        (sites {("ColumnAt" (from)) (+ ("ColumnAt" (from)) 9) (+ ("ColumnAt" (from)) 18) })
                        (from)
                    )
                    (sites Empty)
                )
                if:(or
                    (is Empty (+ ("ColumnAt" (from)) 9))
                    (= (from) (+ ("ColumnAt" (from)) 9))
                )
            )
            (to)
        )
    )
)

(define "IsMill"
    (or
        (and {
            (= (state at:#1) (state at:(+ {#1 #2})))
            (= (state at:#1) (state at:(+ { #1 #2 #2})))
            (!= (what at:#1) (what at:(+ {#1 #2})))
            (!= (what at:#1) (what at:(+ {#1 #2 #2})))
            (!= (what at:(+ {#1 #2})) (what at:(+ {#1 #2 #2})))
        })
        (and {
            (= (what at:#1) (what at:(+ {#1 #2})))
            (= (what at:#1) (what at:(+ { #1 #2 #2})))
            (!= (state at:#1) (state at:(+ {#1 #2})))
            (!= (state at:#1) (state at:(+ {#1 #2 #2})))
            (!= (state at:(+ {#1 #2})) (state Vertex at:(+ {#1 #2 #2})))
        })
    )
)

(define "Check4Mill"
    (or {
        ("IsMill" ("RowAt" #1) 1)
        ("IsMill" ("FileAt" #1) 3)
        ("IsMill" ("ColumnAt" #1) 9)
    })
)

(define "PendingMillSites"
    (and {
        (if 
            ("IsMill" ("RowAt" #1) 1)
            (and {
                (set Pending ("RowAt" #1)) 
                (set Pending (+ ("RowAt" #1) 1))
                (set Pending (+ ("RowAt" #1) 2))
            })
        )
        (if 
            ("IsMill" ("FileAt" #1) 3)
            (and {
                (set Pending ("FileAt" #1)) 
                (set Pending (+ ("FileAt" #1) 3))
                (set Pending (+ ("FileAt" #1) 6))
            })
        )
        (if 
            ("IsMill" ("ColumnAt" #1) 9)
            (and {
                (set Pending ("ColumnAt" #1)) 
                (set Pending (+ ("ColumnAt" #1) 9))
                (set Pending (+ ("ColumnAt" #1) 18))
            })
        )
    })
)

(define "FirstPlacement"
    (move
        (from (sites Hand Mover)) 
        (to (sites Board) if:(is Empty (to)))
    )
)

(define "FirstAction"
    (move
        (from (sites Hand Mover)) 
        (to (sites Board)
            if:(and
                (is Empty (to))
                (or
                    (< 0 (count Pieces in:(sites Around (to))))
                    (< 0 (count Pieces in:("AdjacentOccupiedUpDown" (to))))
                )
            )
        )
        (then
            (and
                (set Var "LastMove1" (last To))
                (moveAgain)
            )
        )
    )
)

(define "SlideAdjacent"
    (move
        (from
            (union
                (sites Around (var "LastMove1"))
                ("AdjacentOccupiedUpDown" (var "LastMove1"))
            )
        )
        (to
            (union
                (sites LineOfSight Empty Vertex at:(from))
                ("EmptySlideSitesUpDown" (from))
            )
        )
        (then (set Var "LastMove2" (last To)))
    )
)

(define "DestroyEachMillsByCapturingAStaticPiece"
    (do
        (move
            (from (sites Pending))
            (to
                (sites Hand Mover)
                if:(is Empty (to))
            )
        )
        ifAfterwards:(all Sites
            (sites {(var "LastMove1") (var "LastMove2") }) 
            if:(is Occupied (site)) 
        )
    )
)

(define "ThenIfMillsAddSites2PendingAndMoveAgain"
    (then
        (and {
            ("PendingMillSites" (var "LastMove1"))
            ("PendingMillSites" (var "LastMove2"))
            (if 
                (or ("Check4Mill" (var "LastMove1")) ("Check4Mill" (var "LastMove2")))
                (moveAgain)
            )
        })
    )
)

(game "Millieu"
    (players 2)
    (equipment {
        (board (remove (rectangle 9 3) cells:{4 5 10 11}) use:Vertex)
        (hand Each size:9)
        (piece "Disc" Shared maxState:3)
        (piece "Square" Shared maxState:3)
        (piece "Hex" Shared maxState:3)
    })
    (rules
        (start {
            (place "Disc" (handSite P1 0) state:3)
            (place "Disc" (handSite P1 1) state:1)
            (place "Disc" (handSite P1 2) state:2)
            (place "Square" (handSite P1 3) state:3)
            (place "Square" (handSite P1 4) state:1)
            (place "Square" (handSite P1 5) state:2)
            (place "Hex" (handSite P1 6) state:3)
            (place "Hex" (handSite P1 7) state:1)
            (place "Hex" (handSite P1 8) state:2)
            
            (place "Disc" (handSite P2 0) state:3)
            (place "Disc" (handSite P2 1) state:1)
            (place "Disc" (handSite P2 2) state:2)
            (place "Square" (handSite P2 3) state:3)
            (place "Square" (handSite P2 4) state:1)
            (place "Square" (handSite P2 5) state:2)
            (place "Hex" (handSite P2 6) state:3)
            (place "Hex" (handSite P2 7) state:1)
            (place "Hex" (handSite P2 8) state:2)
            
            (set Score Each 9)
        })
        (play
            (if
                (> 0 (counter))
                ("FirstPlacement")
                
                (if ("NewTurn") 
                    ("FirstAction") 
                    (if
                        (= 0 (count Sites in:(sites Pending)))
                        ("SlideAdjacent") 
                        ("DestroyEachMillsByCapturingAStaticPiece")
                        ("ThenIfMillsAddSites2PendingAndMoveAgain")
                    )
                )
                (then (set Score Mover (count Pieces in:(sites Hand Mover))))
            )
        )
        (end
            (if
                (no Moves Mover)
                (result Mover Loss)
            )
        )
    )
)

