(define "NotSameRow"
    (all Sites 
        (sites Row (row of:(to))) 
        if:(!= (what at:(site)) (mapEntry (what at:(from))))
    )
)

(define "NotSameColumn"
    (all Sites 
        (sites Column (column of:(to))) 
        if:(!= (what at:(site)) (mapEntry (what at:(from))))
    )
)

(define "NotSameRegion"
    (all Sites 
        (sites #1)
        if:(!= (what at:(site)) (mapEntry (what at:(from))))
    )
)

(define "NotSameSquare"
    (if (is In (to) (sites "BottomLeft")) 
        ("NotSameRegion" "BottomLeft")
        (if (is In (to) (sites "BottomRight")) 
            ("NotSameRegion" "BottomRight")
            (if (is In (to) (sites "TopLeft")) 
                ("NotSameRegion" "TopLeft")
                ("NotSameRegion" "TopRight")
            )
        )
    )
)

(define "AllDifferent"
    (all Different #1 if:(is Occupied (site)))
)

(game "Quantik"
    (players 2)
    (equipment {
        (board (square 4) use:Vertex)
        (piece "Disc" Each)
        (piece "Square" Each)
        (piece "Triangle" Each)
        (piece "Hex" Each)
        (regions "BottomLeft" (expand origin:(coord "A1") All))
        (regions "BottomRight" (expand origin:(coord "D1") All))
        (regions "TopLeft" (expand origin:(coord "A4") All))
        (regions "TopRight" (expand origin:(coord "D4") All))
        (hand Each size:4)
        (map { 
            (pair (id "Disc1") (id "Disc2")) (pair (id "Disc2") (id "Disc1"))
            (pair (id "Square1") (id "Square2")) (pair (id "Square2") (id "Square1"))
            (pair (id "Triangle1") (id "Triangle2")) (pair (id "Triangle2") (id "Triangle1"))
            (pair (id "Hex1") (id "Hex2")) (pair (id "Hex2") (id "Hex1"))
        })
    })
    (rules 
        (start {
            (place "Disc1" (handSite P1) count:2)
            (place "Disc2" (handSite P2) count:2)
            (place "Square1" (handSite P1 1) count:2)
            (place "Square2" (handSite P2 1) count:2)
            (place "Triangle1" (handSite P1 2) count:2)
            (place "Triangle2" (handSite P2 2) count:2)
            (place "Hex1" (handSite P1 3) count:2)
            (place "Hex2" (handSite P2 3) count:2)
        })
        (play 
            (move 
                (from (sites Occupied by:Mover container:(mover)))
                (to (sites Empty) 
                    if:(and { 
                        "NotSameRow"
                        "NotSameColumn"
                        "NotSameSquare"
                    })
                )
            )
        )
        (end 
            (if 
                (or {
                    ("AllDifferent" (sites "BottomLeft"))
                    ("AllDifferent" (sites "BottomRight"))
                    ("AllDifferent" (sites "TopLeft"))
                    ("AllDifferent" (sites "TopRight"))
                    ("AllDifferent" (sites Row 0))
                    ("AllDifferent" (sites Row 1))
                    ("AllDifferent" (sites Row 2))
                    ("AllDifferent" (sites Row 3))
                    ("AllDifferent" (sites Column 0))
                    ("AllDifferent" (sites Column 1))
                    ("AllDifferent" (sites Column 2))
                    ("AllDifferent" (sites Column 3))
                    (no Moves Next) 
                })
                (result Mover Win)
            )
        )
    )
)

