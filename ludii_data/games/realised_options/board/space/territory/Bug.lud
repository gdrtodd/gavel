
(define "IfThisRotationDo" 
    (if
        (= 0
            (size Array
                (difference
                    (results
                        from:(sites Group at:(last To))
                        to:(from)
                        (+
                            (+ (* 32 #1) (#2)) 
                            (+
                                (max
                                    (results
                                        from:(sites Group at:(last To))
                                        to:(from)
                                        (- (* 32 #1))
                                    )
                                )
                                (max
                                    (results
                                        from:(sites Group at:(last To))
                                        to:(from)
                                        (- (#2))
                                    )
                                )
                            )
                        )
                    )
                    (results
                        from:(sites)
                        to:(from)
                        (value Piece at:(from))
                    )
                )
            )
        )
        #3
    )
)

(define "DRow" (/ (value Piece at:(from)) 32))
(define "DCol" (% (value Piece at:(from)) 32))

(define "IfBugsMatchDo"
    (forEach Group
        if:(is Next (who at:(to)))
        (if
            (and
                ("IsSameSizeAsSelectedBug") 
                ("IsBugAdjacentToSelectedBug") 
            )
            (priority 
                {
                ("IfThisRotationDo" ("DRow") ("DCol") #1) 
                ("IfThisRotationDo" ("DRow") (- "DRow" "DCol") #1) 
                ("IfThisRotationDo" (- "DRow" "DCol") ("DRow") #1) 
                ("IfThisRotationDo" ("DCol") ("DRow") #1) 
                ("IfThisRotationDo" (- "DCol") (- "DRow" "DCol") #1) 
                ("IfThisRotationDo" (- "DCol" "DRow") ("DCol") #1) 
                
                ("IfThisRotationDo" (- "DRow") (- "DCol") #1) 
                ("IfThisRotationDo" (- "DRow") (- "DCol" "DRow") #1) 
                ("IfThisRotationDo" (- "DCol" "DRow") (- "DRow") #1) 
                ("IfThisRotationDo" (- "DCol") (- "DRow") #1) 
                ("IfThisRotationDo" ("DCol") (- "DCol" "DRow") #1) 
                ("IfThisRotationDo" (- "DRow" "DCol") (- "DCol") #1) 
                }
                #2
            )
        )
    )
)

(define "RecordTheGrowingBugsShapeVectorsAsValues" 
    (and 
        (forget Value All)
        (set Var "LastRow" (row of:(max (array (sites Group at:(last To)))))
            (then 
                (set Var "LastCol" (max (results from:(sites Group at:(last To)) to:(from) (column of:(from))))
                    (then
                        (forEach Site
                            (sites Group at:(last To))
                            (set Value at:(site) 
                                (+
                                    (* 32 (- (var "LastRow") (row of:(site))))
                                    (- (var "LastCol") (column of:(site)))
                                )
                            )
                        )
                    )
                )
            )
        )
    )
) 

(define "ThenMarkTheGrowingBudAsEdible"
    (then
        (forEach Site
            (sites Group at:(last To))
            (set State at:(site) 1)
            (then (moveAgain))
        )
    )
)

(define "MarkTheSelectedBugsAsEdible"
    (forEach Site (sites) (set State at:(site) 1))
)

(define "FindWhatThereIsToEat" 
    (and
        (forEach Site 
            (sites Group at:(last To))
            (set State at:(site) 0)
        )
        (priority
            (do 
                ("RecordTheGrowingBugsShapeVectorsAsValues") 
                next:("IfBugsMatchDo" ("MarkTheSelectedBugsAsEdible") ("ThenMarkTheGrowingBudAsEdible")) 
            )
            ("RecordTheGrowingBugsShapeVectorsAsValues") 
        )
    )
)

(define "IsBugAdjacentToSelectedBug" 
    (< 0 (size Array (array (intersection (sites) (sites Around (sites Group at:(last To))))))) 
)

(define "IsSameSizeAsSelectedBug"
    (= (size Array (array (sites))) (size Array (array (sites Group at:(last To)))))
)

(define "EatAllNeighboringBugsAndGrow"
    ("IfBugsMatchDo"
        (forEach Value (array (sites)) (remember Value (value))) 
        (then
            (and {
                (remove (sites (values Remembered)))
                (forEach Site
                    (sites Group at:(last To))
                    (set State at:(site) 0)
                )
                (moveAgain)
            })
        )
    )
)

(define "SizeLargestBug" (max (union (sizes Group Mover) (sizes Group Next))))

(define "SizeOfArbitraryAdjacentMoversBug"
    (count Sites in:(sites Group at:(regionSite (sites Around (to) if:(is Mover (who at:(to)))) index:0)))
)

(define "BugSizeAfterPlacement"
    (+ 1 (count Sites in:(sites Group from:(sites Around (to) if:(is Mover (who at:(to)))))))
)

(define "PlacementDoesntMergeBugs"
    (=
        ("BugSizeAfterPlacement")
        (+ 1 ("SizeOfArbitraryAdjacentMoversBug"))
    )
)

(define "BugNot2Big"
    (<=
        ("BugSizeAfterPlacement")
        ("SizeLargestBug")
    )
)

(define "RequiredGrowth" 
    (move Add
        (to (sites Empty)
            if:(and ("PlacementDoesntMergeBugs") ("BugNot2Big"))
            #1
        )
        #2
    )
) 

(define "IsNext2BugThatAte"
    (is In (to) (sites Around (sites Group at:(last From))))
)

(define "BonusGrowth" 
    (move Add
        (to (sites Empty)
            if:(and ("IsNext2BugThatAte") ("PlacementDoesntMergeBugs"))
        )
        #1
    )
) 

(define "BugCanStillGrow"
    (< 0
        (count Sites
            in:(difference
                (intersection (sites Empty) (sites Around (sites Group at:(last To))))
                (sites Around (difference (sites Occupied by:Mover) (sites Group at:(last To))))
            )
        )
    )
)

(define "PlayerChoosesAHungryBug"
    (do
        (forEach Group 
            if:(and 
                (is Mover (who at:(to)))
                (= 1 (state at:(to)))
            )
            (move Select
                (from (max (array (sites))))
                (then
                    ("EatAllNeighboringBugsAndGrow")
                )
            )
        )
        ifAfterwards:("BugCanStillGrow") 
    )
)

(game "Bug" 
    (players 2)
    (equipment {
        (board (hex Hexagon 3) use:Cell)
        (piece "Hex" Each maxValue:1023) 
    })
    (rules
        (play
            (if ("NewTurn")
                (if
                    (> 1 ("SizeLargestBug"))
                    (move Add (to (sites Board)))
                    ("RequiredGrowth" (apply (set Var "Last2Grow" (mover))) (then ("FindWhatThereIsToEat")))
                )
                (if
                    (= 0 (size Array (values Remembered)))
                    ("PlayerChoosesAHungryBug")
                    ("BonusGrowth" (then ("FindWhatThereIsToEat")))
                )
                (then ("Score"))
            )
        )
        (end
            (if
                (and
                    (no Moves Mover)
                    ("NewTurn")
                ) 
                (if
                    (= (var "Last2Grow") (mover))
                    (result Mover Loss)
                )
                (result Mover Win)
            )
        )
    )
) 

(define "Score"
    (and
        (set Score Mover 0)
        (set Score Next 
            (count Sites
                in:(sites To ("RequiredGrowth" ~ ~))
            )
        )
    )
)

