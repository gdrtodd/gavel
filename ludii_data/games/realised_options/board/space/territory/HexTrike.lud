(define "Size" 7)

(define "Nbors" 
    (count Sites in:(intersection
            (sites Around #1)
            (sites Occupied by:#2) 
        )
    )
)

(define "TriCorners")
(define "HexCorners"
    (start {
        (place "Ball1" 
            { 0 
            (- (/ (- (* {3 #1 #1}) #1) 2) 1) 
            (+ 1 (- (* {3 #1 #1}) (* 4 #1))) 
            }
        )
        (place "Ball2" 
            {(- #1 1) 
            (+ 1 (/ (- (* {3 #1 #1}) (* 5 #1)) 2)) 
            (- (* {3 #1 #1}) (* 3 #1)) 
            }
        )
    })
)

(define "LimpCorners"
    (start {
        (place "Ball1" 
            { 0 
            (- (/ (+ (* {3 #1 #1}) #1) 2) 1) 
            (- (* 3 (* #1 #1)) #1) 
            }
        )
        (place "Ball2" 
            { #1
            (/ (- (* {3 #1 #1}) (* 3 #1)) 2)
            (- (* 3 (* #1 #1)) 1) 
            }
        )
    })
)

(game "HexTrike"
    (players 2)
    (equipment {
        (board (hex Hexagon 7))
        (piece "Ball" Each)
    })
    
    (rules
        (meta (swap))
        ("TriCorners")
        phases:{
        (phase "Opening" P1
            (play
                (move Add 
                    (to (sites Empty)) 
                    (then 
                        (set Var (last To))
                    )
                )
            )
            (nextPhase)
        )
        
        (phase "Play"
            (play
                (move Add 
                    (to (sites LineOfSight Empty at:(var)))
                    (then
                        (set Var (last To))
                    )
                )
            )
        )
        }
        
        (end {
            (if 
                (no Moves Next) {
                (if
                    (> ("Nbors" (last To) P1) ("Nbors" (last To) P2)) (result P1 Win)
                )
                
                (if
                    (> ("Nbors" (last To) P2) ("Nbors" (last To) P1)) (result P2 Win)
                )
                
                (if
                    (and (= ("Nbors" (last To) P1) ("Nbors" (last To) P2)) (is Mover P1)) (result P1 Win)
                )
                
                (if
                    (and (= ("Nbors" (last To) P1) ("Nbors" (last To) P2)) (is Mover P2)) (result P2 Win)
                )
                }
            )
        })
    )
)

