
(define "SetupHands"
    (start {
        (place "Disc1" (handSite P1 0))
        (place "Disc1" (handSite P1 1))
        (place "Disc1" (handSite P1 2))
        (place "Disc1" (handSite P1 3))
        (place "Disc1" (handSite P1 4))
        (place "SquareOrtho1" (handSite P1 5))
        (place "SquareOrtho1" (handSite P1 6))
        (place "SquareOrtho1" (handSite P1 7))
        (place "SquareOrtho1" (handSite P1 8))
        (place "SquareOrtho1" (handSite P1 9))
        (place "TriangleN1" (handSite P1 10))
        (place "TriangleN1" (handSite P1 11))
        (place "TriangleN1" (handSite P1 12))
        (place "TriangleN1" (handSite P1 13))
        (place "TriangleN1" (handSite P1 14))
        
        (place "Disc2" (handSite P2 0))
        (place "Disc2" (handSite P2 1))
        (place "Disc2" (handSite P2 2))
        (place "Disc2" (handSite P2 3))
        (place "Disc2" (handSite P2 4))
        (place "SquareOrtho2" (handSite P2 5))
        (place "SquareOrtho2" (handSite P2 6))
        (place "SquareOrtho2" (handSite P2 7))
        (place "SquareOrtho2" (handSite P2 8))
        (place "SquareOrtho2" (handSite P2 9))
        (place "TriangleN2" (handSite P2 10))
        (place "TriangleN2" (handSite P2 11))
        (place "TriangleN2" (handSite P2 12))
        (place "TriangleN2" (handSite P2 13))
        (place "TriangleN2" (handSite P2 14))
    })
)

(define "RemoveFromHand" 
    (remove (min (array (forEach (sites Hand Mover) if:(= (id #1 Mover) (what at:(site)))))))
)

(define "AddDisc"
    (move Add
        (piece (id #1 Mover)) 
        #2 
        stack:True 
        (then
            (and {
                (forget Value All)
                (set State at:(last To) level:(topLevel at:(last To)) 1)
                ("RemoveFromHand" #1)
                (remember Value (last To))
            })
        )
    )
)

(define "AddSquare"
    (forEach Value (array #1)
        (move Add
            (piece
                (if (= 0 (value))
                    (id "SquareOrtho" Mover) 
                    (id "SquareDiag" Mover)
                )
            ) 
            #2 
            stack:True 
            (then
                (and {
                    (forget Value All)
                    (set State at:(last To) level:(topLevel at:(last To)) 2)
                    ("RemoveFromHand" "SquareOrtho")
                    (if
                        (= (id "SquareOrtho" Mover) (what at:(last To) level:(topLevel at:(last To))))
                        (forEach Site
                            (sites Around (last To) Orthogonal)
                            (remember Value (site))
                        )
                        (forEach Site
                            (sites Around (last To) Diagonal)
                            (remember Value (site))
                        )
                    )
                })
            )
        )
    )
)

(define "AddTriangle"
    (do
        (move Add
            (piece (id #2 Mover)) 
            #3 
            stack:True 
            (then
                (and {
                    (forget Value All)
                    (set State at:(last To) level:(topLevel at:(last To)) 3)
                    ("RemoveFromHand" "TriangleN")
                    }
                    (then
                        (and
                            (forEach Site
                                (sites Distance (step #1 (to (sites Board))) from:(last To) (range 1 Infinity)) 
                                (remember Value (site))
                            ) 
                            (forEach Site
                                "NoTails" 
                                (remember Value (site))
                            )
                        )
                    )
                )
            )
        )
        ifAfterwards:(< 0 (size Array (values Remembered))) 
    )
)

(define "EmptySite4" 
    (to (sites Empty) if:(< 0 (count Pieces Mover #1 in:(sites Hand Mover))))
)

(define "ToSitesAllowedFor"
    (to
        (sites (values Remembered))
        if:(and {
            (> 3 (count Stack at:(to)))
            (!= #2 (state at:(to) level:0))
            (!= #2 (state at:(to) level:1))
            (< 0 (count Pieces Mover #1 in:(sites Hand Mover)))
        })
    )
)

(game "Pyrga"
    (players 2)
    (equipment {
        (board (square 4) use:Cell)
        (hand Each size:15)
        (piece "Disc" Each)
        (piece "SquareOrtho" Each)
        (piece "SquareDiag" Each)
        (piece "TriangleN" Each)
        (piece "TriangleS" Each)
        (piece "TriangleE" Each)
        (piece "TriangleW" Each)
    })
    (rules
        ("SetupHands")
        (play
            
            (priority
                (or {
                    ("AddDisc" "Disc" ("ToSitesAllowedFor" "Disc" 1))  
                    ("AddSquare" {0} ("ToSitesAllowedFor" "SquareOrtho" 2))
                    ("AddTriangle" N "TriangleN" ("ToSitesAllowedFor" "TriangleN" 3) SW SE)
                    ("AddTriangle" E "TriangleE" ("ToSitesAllowedFor" "TriangleN" 3) NW SW)
                    ("AddTriangle" S "TriangleS" ("ToSitesAllowedFor" "TriangleN" 3) NW NE)
                    ("AddTriangle" W "TriangleW" ("ToSitesAllowedFor" "TriangleN" 3) NE SE)
                })
                (or {
                    ("AddDisc" "Disc" ("EmptySite4" "Disc"))
                    ("AddSquare" {0} ("EmptySite4" "SquareOrtho"))
                    ("AddTriangle" N "TriangleN" ("EmptySite4" "TriangleN") SW SE)
                    ("AddTriangle" E "TriangleE" ("EmptySite4" "TriangleN") NW SW)
                    ("AddTriangle" S "TriangleS" ("EmptySite4" "TriangleN") NW NE)
                    ("AddTriangle" W "TriangleW" ("EmptySite4" "TriangleN") NE SE)
                })
                (then 
                    (and {
                        ("UpdateScoreOfMajority" (mover))
                        ("UpdateScoreOfMajority" (next))
                    })
                )
            )
            
        )
        (end
            (if
                (or {
                    (>= (score Mover) 300)
                    (>= (score Next) 300)
                    (no Moves Next)
                })
                (byScore)
            )
        )
    )
)

(define "UpdateScoreOfMajority"
    (set Score (player #1) 0
        (then
            (forEach Site
                (sites Board) 
                (if
                    (>
                        (+ {
                            (if (= #1 (who at:(site) level:0)) 1 0)
                            (if (= #1 (who at:(site) level:1)) 1 0)
                            (if (= #1 (who at:(site) level:2)) 1 0)
                        })
                        (/ (+ 1 (topLevel at:(site))) 2)
                    )
                    (addScore (player #1) (^ 10 (topLevel at:(site)))) 
                )
            )
        )
    )
)

(define "UpdateScoreOfTop"
    (set Score (player #1) 0
        (then
            (forEach Site
                (sites Board)
                (if
                    (= #1 (who at:(site)))
                    (addScore (player #1) (^ 10 (topLevel at:(site)))) 
                )
            )
        )
    )
)

(define "NoTails"
    (sites {})
)

(define "RayTails"
    (union
        (sites Distance (step (directions { #2 }) (to (sites Board))) from:(last To) #1) 
        (sites Distance (step (directions { #3 }) (to (sites Board))) from:(last To) #1) 
    )
)

(define "KnightTails"
    (difference
        (sites {
            (ahead (ahead (ahead (last To) #2) #1) #2)
            (ahead (ahead (ahead (last To) #3) #1) #3)
        })
        (sites Around (last To)) 
    )
)

