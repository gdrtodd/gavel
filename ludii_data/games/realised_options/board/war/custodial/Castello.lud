(define "NumMaxCapture" 5)

(define "NotEmptyAndNoCastle"
    (and 
        (!= (what at:(between)) (id "Castle0")) 
        (is Occupied (between))
    )
)

(define "CaptureEnemyPiece"
    (apply 
        (if 
            (= (who at:(between)) (next)) 
            (remove (between))
        )
    )
)

(define "EmptyAndNotVisited"
    (and 
        (is Empty (to)) 
        (not (is Visited (to))) 
    )
)

(define "CanJumpAgain"
    (can Move 
        (hop 
            (from (last To)) 
            Orthogonal 
            (between 
                if:(if (< (counter) (- "NumMaxCapture" 1)) 
                    "NotEmptyAndNoCastle" 
                    ("IsFriendAt" (between))
                )
                "CaptureEnemyPiece"
            ) 
            (to if:"EmptyAndNotVisited") 
        ) 
    )
)

(define "JumpAgain"
    (move Hop
        (from (last To)) 
        Orthogonal 
        (between 
            if:(if (< (counter) "NumMaxCapture") 
                "NotEmptyAndNoCastle" 
                ("IsFriendAt" (between))
            ) 
            "CaptureEnemyPiece"
        )
        (to if:"EmptyAndNotVisited")
        (then 
            (if "CanJumpAgain" 
                (moveAgain) 
                (set Counter) 
            ) 
        )
    )
)

(define "CaptureCastleAndStoreItTo"
    (surround 
        (from (last To)) 
        Orthogonal 
        (between 
            if:(= (what at:(between)) (id "Castle0")) 
            (apply (fromTo (from (between)) (to #1)))
        )
        (to if:("IsFriendAt" (to)))
        except:1 
    )	
)

(define "StorageLeftCastle" (handSite Mover))

(define "StorageRightCastle" (handSite Mover 2))

(define "StorageMiddleCastle" (handSite Mover 1))

(game "Castello" 
    (players 2) 
    (equipment { 
        (board (rectangle 15 21)) 
        (piece "Pawn" Each 
            (or 
                (move Hop
                    Orthogonal
                    (between 
                        if:"NotEmptyAndNoCastle" 
                        "CaptureEnemyPiece" 
                    )
                    (to if:(is Empty (to)))
                    (then 
                        (if "CanJumpAgain" 
                            (moveAgain) 
                            (set Counter)
                        ) 
                    )
                )
                ("StepToEmpty" Orthogonal) 
            )
        ) 
        (piece "Castle" Neutral)
        (hand Each size:3) 
        (regions "LeftPart" (expand (sites Left) steps:6))
        (regions "RightPart" (expand (sites Right) steps:6))
        (regions "Middle" (expand (sites Centre)))
    }) 
    (rules 
        (start {
            (place "Pawn1" (expand (sites Left)))
            (place "Pawn2" (expand (sites Right)))
            (place "Castle0" (sites {"G2" "F6" "G10" "F14" "K3" "K8" "K13" "P2" "O6" "P10" "O14"}))
        })
        (play 
            (if "SameTurn"
                (or
                    "JumpAgain"
                    (move Pass)
                )
                (forEach Piece)
                (then (and 
                        (if (is In (last To) (sites "LeftPart"))
                            (if (< (count Cell at:(handSite Mover)) 3)
                                ("CaptureCastleAndStoreItTo" "StorageLeftCastle")
                            )
                            (if (is In (last To) (sites "RightPart"))
                                ("CaptureCastleAndStoreItTo" "StorageRightCastle")
                                (if (is In (last To) (sites "Middle"))
                                    (if (> (count Cell at:(handSite Mover 2)) 0)							
                                        ("CaptureCastleAndStoreItTo" "StorageMiddleCastle")
                                    )			
                                    ("CaptureCastleAndStoreItTo" "StorageMiddleCastle")
                                )
                            )
                        )
                        (set Counter)
                    ) 
                )
            )
        )
        (end {
            ("HavingLessPiecesLoss" Next 3) 
            (if (> (count in:(sites Hand Mover)) 3) (result Mover Win))
        }) 
    )
)

