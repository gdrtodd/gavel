(define "Step"
    (move Step
        (from)
        ("ConditionalDirection")
        (to if:(is Empty (to)))
        stack:True
        (then ("Promote" (last To)))
    )
)

(define "Capture"
    (move
        (from
            if:(= 
                (* 
                    (from) 
                    (if (< 0 (count MovesThisTurn)) 1 0)
                )
                (* 
                    (last To) 
                    (if (< 0 (count MovesThisTurn)) 1 0)
                )
            )
        )
        (to
            (sites Direction
                from:(from)
                Diagonal
                distance:(+ 1 (size Stack at:(from)))
            )
            if:(and {
                (is Empty (to))
                (= 
                    1 
                    (count Sites
                        in:(intersection
                            (sites Occupied by:Enemy)
                            (sites Between from:(from) to:(to))
                        )
                    )
                )
                (= 
                    0 
                    (count Sites
                        in:(intersection
                            (sites Occupied by:Mover)
                            (sites Between from:(from) to:(to))
                        )
                    )
                )
                (= 1 (count Steps (to) ("HoppedPiece")))
                (not (is In ("HoppedPiece") (values Remembered)))
            })
            (apply
                (remember Value
                    ("HoppedPiece")
                )
            )
        )
        count:(size Stack at:(from))
        stack:True
        (then
            (if
                ("CanCaptureFrom" (last To))
                (moveAgain)
                (do
                    (forEach Site
                        (sites (values Remembered))
                        (remove (site) count:(size Stack at:(site)))
                    )
                    next:(and 
                        ("Promote" (last To))
                        (forget Value All)
                    )
                )
            )
        )
    )
)

(define "CanCaptureFrom"
    (can Move
        (move
            (from #1)
            (to
                (sites Direction
                    from:(from)
                    (difference Diagonal (directions Cell from:(last To) to:(last From)))
                    distance:(+ 1 (size Stack at:(from)))
                )
                if:(and {
                    (is Empty (to))
                    (= 
                        1 
                        (count Sites
                            in:(intersection
                                (sites Occupied by:Enemy)
                                (sites Between from:(from) to:(to))
                            )
                        )
                    )
                    (= 
                        0 
                        (count Sites
                            in:(intersection
                                (sites Occupied by:Mover)
                                (sites Between from:(from) to:(to))
                            )
                        )
                    )
                    (= 1 (count Steps (to) ("HoppedPiece")))
                    (not (is In ("HoppedPiece") (values Remembered)))
                })
            )
        )
    )
)

(define "HoppedPiece"
    (+
        (array
            (intersection
                (sites Occupied by:Enemy)
                (sites Between from:(from) to:(to))
            )
        )
    )
)

(define "ConditionalDirection"
    (if
        (is Odd (size Stack at:(from)))
        (directions {FL FR})
        (directions {BL BR})
    )
)

(define "Promotes"
    (or
        (and 
            (is Odd (size Stack at:#1))
            (is In #1 (sites (player (+ 1 (% (mover) 2)))))
        )
        (and 
            (is Even (size Stack at:#1))
            (is In #1 (sites (player (mover))))
        )
    )
)

(define "Promote"
    (if
        ("Promotes" #1)
        (add (to #1) stack:True)
    )
)

(game "Seesaw Draughts"
    (players 2)
    (equipment {
        (board (square 8))
        (piece "Disc" P1 N)
        (piece "Disc" P2 S) 
        (regions P1 (sites Bottom))
        (regions P2 (sites Top))
    })
    (rules
        (start { 
            (place "Disc1" (difference (expand (sites Bottom) steps:2) (sites Phase 1)))
            (place "Disc2" (difference (expand (sites Top) steps:2) (sites Phase 1)))
        })
        (play
            (priority 
                (forEach Piece "Disc"
                    ("Capture")
                    top:True
                )
                (forEach Piece "Disc"
                    ("Step")
                    top:True
                )
            )
        )
        (end ("NoMoves" Loss))
    )
)

