
(define "AStep"
    (results 
        from:(sites (values Remembered #1))
        to:(sites To (hop (from (from)) Adjacent (between #2 if:True) (to if:(is Empty (to)))))
        (to)
    )
)

(define "Yields6"
    (forEach Value 
        (union
            ("AStep" "S7" (exact 0))
            (values Remembered "S7") 
        )
        (remember Value "S6" (value) unique:True)
        (then ("Yields5"))
    )
) 

(define "Yields5"
    (forEach Value
        (union {
            ("AStep" "S7" (exact 1))
            ("AStep" "S6" (exact 0))
            (values Remembered "S6")
        })
        (remember Value "S5" (value) unique:True)
        (then ("Yields4"))
    )
) 

(define "Yields4"
    (forEach Value
        (union {
            ("AStep" "S7" (exact 2))
            ("AStep" "S6" (exact 1))
            ("AStep" "S5" (exact 0))
            (values Remembered "S5")
        })
        (remember Value "S4" (value) unique:True)
        (then ("Yields3"))
    )
) 

(define "Yields3"
    (forEach Value
        (union {
            ("AStep" "S7" (exact 3))
            ("AStep" "S6" (exact 2))
            ("AStep" "S5" (exact 1))
            ("AStep" "S4" (exact 0))
            (values Remembered "S4")
        })
        (remember Value "S3" (value) unique:True)
        (then ("Yields2"))
    )
)

(define "Yields2"
    (forEach Value
        (union {
            ("AStep" "S7" (exact 4))
            ("AStep" "S6" (exact 3))
            ("AStep" "S5" (exact 2))
            ("AStep" "S4" (exact 1))
            ("AStep" "S3" (exact 0))
            (values Remembered "S3")
        })
        (remember Value "S2" (value) unique:True)
        (then ("Yields1"))
    )
)

(define "Yields1" 
    (forEach Value
        (union {
            ("AStep" "S7" (exact 5))
            ("AStep" "S6" (exact 4))
            ("AStep" "S5" (exact 3))
            ("AStep" "S4" (exact 2))
            ("AStep" "S3" (exact 1))
            ("AStep" "S2" (exact 0))
            (values Remembered "S2")
        })
        (remember Value "S1" (value) unique:True)
        (then ("Yields0"))
    )
)

(define "Yields0"
    (forEach Value
        (union {
            ("AStep" "S7" (exact 6))
            ("AStep" "S6" (exact 5))
            ("AStep" "S5" (exact 4))
            ("AStep" "S4" (exact 3))
            ("AStep" "S3" (exact 2))
            ("AStep" "S2" (exact 1))
            ("AStep" "S1" (exact 0))
            (values Remembered "S1")   
        })
        (remember Value "S0" (value) unique:True)
    )
)

(define "FindDestinations" 
    (if 
        (= 7 (var "PowerLeft")) 
        (remember Value "S7" (var "LastTo") unique:True (then ("Yields6")))
        (if 
            (= 6 (var "PowerLeft")) 
            (remember Value "S6" (var "LastTo") unique:True (then ("Yields5")))
            (if
                (= 5 (var "PowerLeft")) 
                (remember Value "S5" (var "LastTo") unique:True (then ("Yields4")))
                (if
                    (= 4 (var "PowerLeft")) 
                    (remember Value "S4" (var "LastTo") unique:True (then ("Yields3")))
                    (if
                        (= 3 (var "PowerLeft")) 
                        (remember Value "S3" (var "LastTo") unique:True (then ("Yields2")))
                        (if 
                            (= 2 (var "PowerLeft")) 
                            (remember Value "S2" (var "LastTo") unique:True (then ("Yields1")))
                            (if 
                                (= 1 (var "PowerLeft")) 
                                (remember Value "S1" (var "LastTo") unique:True (then ("Yields0")))
                            )
                        )
                    )
                )
            )
        )
        #1 
    )
)

(define "InfluenceAt"
    (-
        (count Pieces Mover in:(sites Around (#1) includeSelf:True))
        (count Pieces Next in:(sites Around (#1) includeSelf:True))
    )
)

(define "AddOnly" 
    (move Add
        (to 
            (sites Empty)
            if:(or
                (= 1 ("InfluenceAt" (to)))
                (and
                    (= 0 ("InfluenceAt" (to)))
                    (= 0 (count Sites in:(difference (sites Around (to)) (sites Occupied by:All))))
                )
            )
        ) 
        (then 
            (and
                (set Var "PowerLeft" 0)
                (set Value Mover 0)
            )
        )
    )
)

(define "CanMoveElsewhere" 
    (can Move 
        (add
            (to 
                (difference
                    (sites (values Remembered "S0"))
                    (var "LastTo")
                )
            )
        )
    )
)

(define "AddThenMove" 
    (move Add
        (to 
            (sites Empty) 
            if:(<= 2 ("InfluenceAt" (to)))
        )
        (then 
            (do
                (and {
                    (set Var "LastTo" (last To))
                    (set Var "PowerLeft" (- ("InfluenceAt" (last To)) 2))
                    (set State at:(last To) (- ("InfluenceAt" (last To)) 2))
                    (set Value Mover 0)
                })
                next:("FindDestinations" 
                    (then 
                        (if 
                            (not ("CanMoveElsewhere")) 
                            (set Var "PowerLeft" 0)
                        )
                    )
                )
            )
        )
    )
)

(define "CaptureThenMove" 
    (forEach Site
        (sites Occupied by:Next)
        (if 
            (<= 2 ("InfluenceAt" (site)))
            (move Remove (site)
                (then
                    (add
                        (to (last From))
                        (then 
                            (and {
                                (set Var "LastTo" (last To))
                                (set Var "PowerLeft" (- ("InfluenceAt" (last To)) 4))
                                (set State at:(last To) (- ("InfluenceAt" (last To)) 4))
                            })
                        )
                    )
                )
            )
        )
        (then
            ("FindDestinations"
                (then 
                    (if 
                        (not ("CanMoveElsewhere")) 
                        (set Var "PowerLeft" 0)
                    )
                )
            )
        )
    )
)

(define "MoveFriendly" 
    (do
        (forEach Piece
            (if 
                (< 0 (("InfluenceAt" (from))))
                (move Remove
                    (from)
                    (then
                        (add
                            (to (last From))  
                            (then
                                (and {
                                    (set Var "LastTo" (last To))
                                    (set State at:(last To) ("InfluenceAt" (last To))) 
                                    (set Var "PowerLeft" ("InfluenceAt" (last To))) 
                                })
                            )
                        )
                    )
                )
            )
            Mover
            (then 
                ("FindDestinations" 
                    (then 
                        (forget Value "S0" (var "LastTo"))
                    )
                )
            )
        )
        ifAfterwards:("CanMoveElsewhere")
    )
) 

(define "CompleteTheMove" 
    (do (remove (var "LastTo"))
        next:(move Select
            (from (sites (values Remembered "S0")))
            (then
                (add
                    (to (last To))  
                    (then (set Var "PowerLeft" 0))
                )
            )
        )
    )
)

(define "ForgetAll"
    (and {
        (forget Value "S7" All)
        (forget Value "S6" All) 
        (forget Value "S5" All) 
        (forget Value "S4" All) 
        (forget Value "S3" All) 
        (forget Value "S2" All) 
        (forget Value "S1" All) 
        (forget Value "S0" All) 
    })
) 

(define "IsEdge" (> 5 (count Sites in:(sites Around #1))))

(define "SetScores"
    (set Score #1
        (+
            (+
                (+ 
                    (results 
                        from:(sites Occupied by:#1) 
                        to:(from) 
                        (if 
                            ("IsEdge" (from))
                            (if
                                (or
                                    (< 0 (count Pieces #1 in:(sites Around (from)))) 
                                    (< 2 (count Sites in:(sites Around (from) if:(is Empty (to)))))
                                ) 
                                1
                                0
                            )
                            (if
                                (or
                                    (< 1 (count Pieces #1 in:(sites Around (from))))
                                    (> 2 
                                        (-
                                            (count Pieces #2 in:(sites Around (from)))
                                            (count Pieces #1 in:(sites Around (from)))
                                        )
                                    )
                                )
                                1
                                0
                            )
                        )
                    )
                )
                (+ 
                    
                    (results 
                        from:(sites Empty)
                        to:(from)
                        (if
                            ("IsEdge" (from))
                            (if
                                (and
                                    {
                                    (< 2 (count Pieces #1 in:(sites Around (from))))
                                    (no Pieces #2 in:(sites Around (sites Around (from) if:(is Empty (to)))))
                                    (= 
                                        0
                                        (count Sites in:(sites Around (from) if:(and (is Empty (to)) ("IsEdge" (to)))))
                                    )
                                    }
                                )
                                1 
                                0
                            )
                            
                            (if
                                (or
                                    (and
                                        (< 3 (count Pieces #1 in:(sites Around (from))))
                                        (no Pieces #2 in:(sites Around (sites Around (from) if:(is Empty (to)))))
                                    )
                                    (and
                                        (< 2 (count Pieces #1 in:(sites Around (from))))
                                        (> 1 (count Pieces #2 in:(sites Around (from))))
                                    )
                                )
                                1
                                0
                            )
                        )
                    )
                )
            )
            
            (+
                (results 
                    from:(sites Occupied by:#2)
                    to:(from)
                    (if
                        (< 
                            (+ 2 (count Sites in:(sites Around (from))))
                            (* 2 (count Pieces #1 in:(sites Around (from))))
                        )
                        1 
                        0
                    )
                )
            )
            
        )
    )
)

(define "TheMove"
    (if
        (< 0 (var "PowerLeft")) 
        ("CompleteTheMove")
        (or
            { 
            (if 
                (> 4 (value Player Mover))
                (or
                    ("MoveFriendly")
                    (move Pass)
            ))
            ("CaptureThenMove") 
            ("AddThenMove")
            ("AddOnly")
        })
        (then 
            (if 
                (< 0 (var "PowerLeft"))
                (moveAgain)
                (and {
                    (set Var "MovePhase" #1)
                    (set Value Mover (+ 1 (value Player Mover))) 
                    (#2)
                    ("SetScores" P1 P2) 
                    ("SetScores" P2 P1)
                    (forEach Piece (if (!= 0 (state at:(from))) (set State at:(from) 0)))
                    ("ForgetAll")
                })
            )
        )
    )
)

(define "FirstTurnPhase"
    (phase "FirstTurn" 
        (play
            ("TheMove" 1 (set NextPlayer (player (mover))))
        )
        (nextPhase (= 1 (var "MovePhase")) "SecondTurn")
))

(define "SecondTurnPhase"
    (phase "SecondTurn" 
        (play
            ("TheMove" 2 (set NextPlayer (player (next))))
        )
        (nextPhase (= 2 (var "MovePhase")) "FirstTurn")
))

(define "IncludingPiePhases"
    phases:{
    "PiePhase"
    "FirstTurnPhase"
    "SecondTurnPhase"
    }
)

(define "WithoutPiePhases"
    phases:{
    "FirstTurnPhase"
    "SecondTurnPhase"
    }
)

(define "PiePhase"
    (phase "Pie"
        (play 
            (if 
                (is Mover P1)
                (move Add 
                    (piece (+ 1 (% (+ 1 (counter)) 2)))
                    (to (sites Empty)) 
                    stack:False
                    (then
                        (if 
                            (< 0 (counter)) 
                            (set NextPlayer (player (next)))
                            (moveAgain)
                        )
                    )
                ) 
                (or 
                    (move Propose "Accept Pie Offer and Move" 
                        (then (set NextPlayer (player (mover))))
                    )
                    (move Propose "Swap Pieces" 
                        (then 
                            (do 
                                (forEach Site 
                                    (sites Occupied by:P1) 
                                    (remember Value (site)) 
                                ) 
                                next:(forEach Site 
                                    (sites Occupied by:P2)
                                    (and
                                        (remove (site))
                                        (add (piece "Ball1") (to (site)) stack:False)
                                    )
                                    (then
                                        (forEach Value (values Remembered)
                                            (and
                                                (remove (value))
                                                (add (piece "Ball2") (to (value)) stack:False)
                                            )
                                            (then 
                                                (and 
                                                    (forget Value All)
                                                    (set NextPlayer (player (next)))
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ) 
        (nextPhase 
            (or 
                (is Proposed "Swap Pieces")
                (is Proposed "Accept Pie Offer and Move")
            )
            "FirstTurn"
        )
    )
)

(define "SafetyFigure" 3)

(game "Throngs" 
    (players 2)
    (equipment {
        ("RaggedHex63")
        (piece "Ball" P1)
        (piece "Ball" P2)
    })
    (rules 
        (meta (passEnd NoEnd))
        ("StdPieceStart")
        ("WithoutPiePhases")
        (end
            (if
                (or
                    
                    (all Passed)
                    
                    (<
                        (count Sites in:(sites Board))
                        (* 2 (- (score Next) ("SafetyFigure")))
                    )
                )
                (byScore) 
            )
        )
    )
)

(define "StdPieceStart"
    (start {
        (set Score P1 1)
        (set Score P2 2)
        (place "Ball1" {13})
        (place "Ball2" {35 46})
        (place "Ball1" state:7)
        (place "Ball2" state:7)
    })
)

(define "PieStart"
    (start {
        (set Score P1 0)
        (set Score P2 0)
        (place "Ball1" state:7)
        (place "Ball2" state:7) 
    })
)

(define "ThrongsBoard"
    (board 
        (remove (tri Hexagon 7) 
            vertices:{2 3 4 15 23 24 33 57 69 70 71 80 81 82 83 91 92 93 94 101 102 103 111 112 115 116 119 120 121 122 123 124 125 126}
        )
        use:Vertex
    )
)

(define "RaggedHex63"
    (board
        (remove (tri Limping 5 6)
            vertices:{0 1 5 6 29 30 39 48 64 70 71 74}
        ) 
        use:Vertex
    )
)

(define "RaggedHex87"
    (board
        (trim
            (remove (tri Limping 6 7) 
                vertices:{0 1 2 6 7 8 15 33 44 45 55 56 67 77 87 95 96 102 103 104 107}
            )
        ) 
        use:Vertex
    )
)

(define "RaggedHex153"
    (board
        (remove (tri {8 9 8 12 6}) 
            vertices:{0 1 2 3 7 8 9 10 11 18 19 20 30 54 68 69 82 83 84 98 99 100 113 114 128 141 154 165 166 175 176 177 183 184 185 186 187 190 191}
        ) 
        use:Vertex
    )
)

