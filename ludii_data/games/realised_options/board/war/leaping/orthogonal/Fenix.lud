(define "Hop" 
    (move Hop 
        (from #1) 
        #2 
        (between 
            if:(and (not (is In (between) (sites ToClear))) ("IsEnemyAt" (between)))
            (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))
        ) 
        (to if:(is Empty (to))) 
        stack:True
        #3
    ) 
)

(define "HopGeneral" 
    (move Hop
        #1
        Orthogonal
        (between 
            #2
            #3
            if:(and (not (is In (between) (sites ToClear))) ("IsEnemyAt" (between)))
            (apply (remove (between) at:EndOfTurn count:(size Stack at:(between))))
        )
        (to if:(is Empty (to)))
        stack:True
        (then 
            (if (can Move 
                    (hop 
                        (from (last To)) 
                        Orthogonal
                        (between 
                            #2
                            #3
                            if:(and 
                                (not (is In (between) (sites ToClear))) 
                                ("IsEnemyAt" (between))
                            )
                        )
                        (to if:(is Empty (to)))
                    )
                ) 
                (moveAgain)
            )
        )
    )
)

(define "NoKing" 
    (all Sites (sites Occupied by:Mover) if:(!= 3 (size Stack at:(site))))
)

(define "DoesNotHaveThreeGeneral" 
    (!= 3 (count Sites in:(forEach (sites Occupied by:Mover) if:(= 2 (size Stack at:(site))))))
)

(define "IsSoldier" ("IsSingletonStack" #1))
(define "IsGeneral" (= 2 (size Stack at:#1)))
(define "IsKing" (= 3 (size Stack at:#1)))

(game "Fenix"
    (players 2)
    (equipment {
        (board (square 9))
        (piece "Fenix" Each)
    })
    (rules
        (start {
            (place "Fenix1" (expand (intersection (sites Bottom) (sites Right)) steps:6 Orthogonal) value:1)
            (place "Fenix2" (expand (intersection (sites Top) (sites Left)) steps:6 Orthogonal) value:1)
        })
        
        phases:{
        (phase "Setup"
            (play 
                (move
                    (from (sites Occupied by:Mover) if:("IsSingletonStack" (from)))
                    (to 
                        (sites Around (from) Own Orthogonal) 
                        if:(and {
                            (!= (from) (to))
                            (< (size Stack at:(to)) 3)
                            (if ("NoKing")
                                True
                                (< (size Stack at:(to)) 2)
                            )
                            (if ("DoesNotHaveThreeGeneral")
                                True
                                (not ("IsSingletonStack" (to)))
                            )
                        })
                    )
                )
            )
            (nextPhase Mover (and (not ("NoKing")) (not ("DoesNotHaveThreeGeneral"))) "Play")
        )
        (phase "Play"
            (play 
                (if ("SameTurn")
                    (max Moves withValue:True
                        (if ("IsSoldier" (last To))
                            ("Hop" (last To) Orthogonal 
                                (then ("ReplayIfCanMove" ("Hop" (last To) Orthogonal)))
                            )
                            (if ("IsKing" (last To))
                                ("Hop" (last To) ~
                                    (then ("ReplayIfCanMove" ("Hop" (last To)))) 
                                )
                                (if ("IsGeneral" (last To))
                                    ("HopGeneral" (from (last To)) before:(count Columns) after:(count Columns) at:EndOfTurn)
                                )
                            )
                        )
                    )
                    (if ("NoKing")
                        (forEach Piece
                            (if ("IsSoldier" (from))
                                (move Step Orthogonal
                                    (to if:(and ("IsFriendAt" (to)) (= 2 (size Stack at:(to)))))
                                    stack:True
                                )
                            )
                        )
                        (priority {
                            (max Moves withValue:True
                                (forEach Piece
                                    (if ("IsSoldier" (from))
                                        ("Hop" (from) Orthogonal 
                                            (then ("ReplayIfCanMove" ("Hop" (last To) Orthogonal)))
                                        )
                                        (if ("IsKing" (from))
                                            ("Hop" (from) ~
                                                (then ("ReplayIfCanMove"  ("Hop" (last To))))
                                            )
                                            (if ("IsGeneral" (from))
                                                ("HopGeneral" (from) before:(count Columns) after:(count Columns) at:EndOfTurn)
                                            )
                                        )
                                    )		
                                )
                            )
                            (forEach Piece
                                (if ("IsSoldier" (from))
                                    (or
                                        (move Step Orthogonal (to if:(is Empty (to))) stack:True)
                                        (if ("DoesNotHaveThreeGeneral")
                                            (move Step Orthogonal
                                                (to if:(and ("IsFriendAt" (to)) ("IsSingletonStack" (to))))
                                                stack:True
                                            )
                                        )
                                    )
                                    (if ("IsGeneral" (from))
                                        (move Slide Orthogonal stack:True)
                                        (if ("IsKing" (from))
                                            ("StepToEmpty" ~ stack:True)
                                        )
                                    )
                                )		
                            )
                        })
                    )
                )
            )
            (end (if ("NoKing") (result Mover Loss)))
        )
        }
        
    )
)

