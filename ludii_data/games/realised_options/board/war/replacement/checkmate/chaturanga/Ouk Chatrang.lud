(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(game "Ouk Chatrang"
    ("TwoPlayersNorthSouth") 
    (equipment {
        (board (square 8))
        (hand Each size:5)
        (piece "King_noCross" Each 
            (or
                ("StepToNotFriend")
                (if (= 1 (state at:(from)))
                    ("LeapToEmpty" "KnightWalk")
                )
                "RememberPieceHasMoved"
            )
        )
        ("ChessRook" "Boat")
        (piece "Ferz_noCross" Each
            (or
                ("StepToNotFriend" Diagonal)
                ("StepToNotFriend" Forward)
            )
        )
        ("ChessKnight" "Knight")
        ("ChessPawn" "Fish" ~ (then ("PromoteIfReach" (sites Mover "Promotion") "Queen")))
        (piece "Queen" Each
            (or
                ("StepToNotFriend" Diagonal)
                (if (= 1 (state at:(from)))
                    (move Hop 
                        Forward 
                        (between if:True) 
                        (to 
                            if:(not ("IsFriendAt" (to))) 
                            (apply (remove (to)))
                        )
                    )
                )
                "RememberPieceHasMoved"
            )		
        )
        (regions "Promotion" P1 (sites Row 5))
        (regions "Promotion" P2 (sites Row 2))
    })
    (rules 
        (start { 
            (place "Fish1" (sites Row 2))
            (place "Fish2" (sites Row 5))
            (place "Boat1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Ferz_noCross1" {"C1" "F1"}) (place "Queen1" coord:"D1" state:1) (place "King_noCross1" coord:"E1" state:1) 
            (place "Boat2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Ferz_noCross2" {"C8" "F8"}) (place "Queen2" coord:"D8" state:1) (place "King_noCross2" coord:"E8" state:1) 
        })
        (play (do (forEach Piece) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))))
        (end {
            ("Checkmate" "King_noCross")
            ("DrawIfNoMoves" Mover)
        })
    )
)

