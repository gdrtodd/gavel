(define "CaptureToPiece"
    (apply 
        (remove 
            (to) 
        )
    ) 
)

(define "CaptureForwardDiagonal"
    (move Step 
        (directions {FR FL}) 
        (to 
            if:(and 
                (or
                    (not (is In (to) (sites Mover "Promotion")))
                    (and 
                        (is In (to) (sites Mover "Promotion"))
                        ("PowerfulPieceOnColumnHasBeenRemoved")
                    )
                )
                ("IsEnemyAt" (to))
            )
            (apply (remove (to)))
        )
    )
)

(define "StepForwardToEmpty"
    (move Step 
        Forward
        (to 
            if:(and 
                (or
                    (not (is In (to) (sites Mover "Promotion")))
                    (and 
                        (is In (to) (sites Mover "Promotion"))
                        ("PowerfulPieceOnColumnHasBeenRemoved")
                    )
                )
                (is Empty (to))
            )
        )
    )
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "PromotedPiece" 
    (if (is In (last To) (sites Corners))
        (id "Boat" Mover)
        (if (or (= (column of:(last To)) 1) (= (column of:(last To)) 6))
            (id "Knight" Mover)
            (if (or (= (column of:(last To)) 2) (= (column of:(last To)) 5))
                (id "Elephant" Mover)
                (if (or (and (is Mover P2) (= (column of:(last To)) 4)) (and (is Mover P1) (= (column of:(last To)) 3)))
                    (id "Ferz_noCross" Mover)
                    (id "King_noCross" Mover)
                )
            )
        )
    )
)

(define "PowerfulPieceOnColumnHasBeenRemoved" 
    (if (and (is In (to) (sites Corners)) (< (count Sites in:(sites Occupied by:Mover component:"Boat")) 2))
        True
        (if (and (or (= (column of:(to)) 1) (= (column of:(to)) 6)) (< (count Sites in:(sites Occupied by:Mover component:"Knight")) 2))
            True
            (if (and (or (= (column of:(to)) 2) (= (column of:(to)) 5)) (< (count Sites in:(sites Occupied by:Mover component:"Elephant")) 2))
                True
                (if (and (or (and (is Mover P1) (= (column of:(to)) 3)) (and (is Mover P2) (= (column of:(to)) 4))) (< (count Sites in:(sites Occupied by:Mover component:"Ferz_noCross")) 1))
                    True
                    False
                )
            )
        )
    )	
)

(game "Parsi Chess" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8))
        
        (piece "Pawn" Each 
            (or { 
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    (if (= 1 (state at:(ahead (from) Backward)))
                        ("DoubleStepForwardToEmpty")
                    )
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                }
                (then
                    (if (is In (last To) (sites Mover "Promotion")) 
                        (promote (last To) (piece "PromotedPiece"))
                    )
                )
            )
        )
        ("ChessRook" "Boat" ~ "RememberPieceHasMoved")
        (piece "King_noCross" Each 
            (or
                ("StepToNotFriend")
                (if (!= (value Player Mover) (mover))
                    ("LeapToEmpty" "KnightWalk" (then (set Value Mover (mover))))
                )
                "RememberPieceHasMoved"
            )
        )
        ("ChessBishop" "Elephant")
        ("ChessKnight" "Knight")
        ("ChessQueen" "Ferz_noCross" ~ "RememberPieceHasMoved")
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Boat1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1" state:1) (place "King_noCross1" coord:"E1" state:1) 
            (place "Boat2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"E8" state:1) (place "King_noCross2" coord:"D8" state:1) 
        })
        
        (play 
            (do 
                (forEach Piece) 
                ifAfterwards:(and (can Move (forEach Piece Next)) (not ("IsInCheck" "King_noCross" Mover)))
                (then
                    (if (!= (next) (value Player Next))
                        (if ("IsInCheck" "King_noCross" Next)
                            (set Value Next (next))
                        )
                    )
                )
            )
        )
        
        (end {
            ("Checkmate" "King_noCross")
            (if (= 1 (count Pieces Next)) (result Mover Draw)) 
        })
    )
)

