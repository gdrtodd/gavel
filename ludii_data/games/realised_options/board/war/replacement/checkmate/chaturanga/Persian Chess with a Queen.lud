(define "PieceHasMoved"
    (set State at:#1 0) 
)

(game "Persian Chess with a Queen"
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        (piece "King_noCross" Each
            (or {
                ("StepToNotFriend" ~
                    (then 
                        (if (and
                                (= 1 (state at:(last To)))
                                (= (last To) (mapEntry "AheadKing" Mover))
                            )
                            (set State at:(last To) 2)
                            (if 
                                (!= (state at:(last To)) 0) 
                                ("PieceHasMoved" (last To))
                            ) 	
                        )
                    )
                )
                (if (and {
                        (= 1 (state at:(from)))
                        (= 1 (state at:(mapEntry "RookRight" Mover)))
                        (is Empty (mapEntry "KnightKingRightForward" Mover))
                    })
                    (move 
                        (from)
                        (to (mapEntry "KnightKingRightForward" Mover))
                        (then
                            (if 
                                (!= (state at:(last To)) 0) 
                                ("PieceHasMoved" (last To))
                            ) 		
                        )
                    )
                )
                (if (and {
                        (= 1 (state at:(from)))
                        (= 1 (state at:(mapEntry "RookLeft" Mover)))
                        (is Empty (mapEntry "KnightKingLeftForward" Mover))
                    })
                    (move 
                        (from)
                        (to (mapEntry "KnightKingLeftForward" Mover))
                        (then
                            (if 
                                (!= (state at:(last To)) 0) 
                                ("PieceHasMoved" (last To))
                            )
                        )
                    )
                )
                (if (and {
                        (= 2 (state at:(from)))
                        (= 2 (state at:(regionSite (sites Start (piece (id "King" Mover))) index:0)))
                    })
                    (move 
                        (from)
                        (to (mapEntry "KnightKingLeftBackward" Mover))
                        (then
                            ("PieceHasMoved" (last To))
                        )
                    )
                )
                (if (and {
                        (= 2 (state at:(from)))
                        (= 3 (state at:(regionSite (sites Start (piece (id "King" Mover))) index:0)))
                    })
                    (move 
                        (from)
                        (to (mapEntry "KnightKingRightBackward" Mover))
                        (then
                            ("PieceHasMoved" (last To))
                        )
                    )
                )
                }
            )
        )
        (piece "Rook" Each
            (move Slide 
                Orthogonal 
                (to 
                    if:("IsEnemyAt" (to)) 
                    (apply (remove (to)))
                ) 
                (then 
                    (if 
                        (= (state at:(last To)) 1) 
                        (if (and
                                (is In (last To) (sites Start (piece (id "King" Mover))))
                                (= 2 (state at:(where "King" Mover)))
                            )
                            (if (= (last From) (mapEntry "RookLeft" Mover)) (set State at:(last To) 2) (set State at:(last To) 3))
                            ("PieceHasMoved" (last To))
                        )
                    ) 
                ) 
            )	
            maxState:3
        )
        ("ChessBishop" "Bishop_noCross")
        ("ChessKnight" "Knight")
        ("ChessQueen" "Ferz_noCross")
        ("ChessPawn" "Pawn")
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (map "AheadKing" {(pair 1 "E2") (pair 2 "E7")})
        (map "KnightKingRightForward" {(pair 1 "G2") (pair 2 "G7")})
        (map "KnightKingLeftForward" {(pair 1 "C2") (pair 2 "C7")})
        (map "KnightKingRightBackward" {(pair 1 "G1") (pair 2 "G8")})
        (map "KnightKingLeftBackward" {(pair 1 "C1") (pair 2 "C8")})
    })
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1") (place "King_noCross1" coord:"E1" state:1) 
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"D8") (place "King_noCross2" coord:"E8" state:1) 
        })
        
        (play 
            (do (forEach Piece) 
                ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
            )
        )
        
        (end ("Checkmate" "King_noCross"))
    )
)

