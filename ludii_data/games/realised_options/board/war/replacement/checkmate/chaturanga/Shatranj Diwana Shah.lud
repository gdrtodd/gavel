(define "NextCanNotMoveToProtect"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" #1 Next)))))
)

(define "HasNeverMoved"
    (= (state at:#1) 1) 
)

(define "PieceHasMoved"
    (set State at:(last To) 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            "PieceHasMoved"
        ) 
    ) 
)

(define "PromotedPiece" 
    (if (and (is In (last To) (sites Corners)) (!= 2 (count Pieces Mover "Boat")))
        (id "Boat" Mover)
        (if (and (or (= (column of:(last To)) 1) (= (column of:(last To)) 6)) (!= 2 (count Pieces Mover "Knight")))
            (id "Knight" Mover)
            (if (and (or (= (column of:(last To)) 2) (= (column of:(last To)) 5)) (!= 2 (count Pieces Mover "Elephant")))
                (id "Elephant" Mover)
                (if (and (= (column of:(last To)) 3) (!= 1 (count Pieces Mover "Queen")))
                    (id "Queen" Mover)
                    Undefined
                )
            )
        )
    )
)

(game "Shatranj Diwana Shah" 
    (players 2) 
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" P2 S
            (do
                (or {
                    "StepForwardToEmpty" 
                    ("StepToEnemy" (directions {FR FL}))
                })
                ifAfterwards:(if (is In (last To) (sites Mover "Promotion"))
                    (!= Undefined ("PromotedPiece"))
                    True
                )
                (then ("PromoteIfReach" (sites Mover "Promotion") "PromotedPiece"))
            )
        )
        
        (piece "Boat" P2 ("SlideCapture" Orthogonal))
        (piece "King_noCross" Each
            (if (is Mover P1)
                (or
                    ("LeapCapture" "KnightWalk")
                    ("SlideCapture")
                )
                (or
                    ("StepToNotFriend")
                    (if ("HasNeverMoved" (from))
                        ("LeapCapture" "KnightWalk")
                    )
                    "RememberPieceHasMoved"
                )
            )
        )
        (piece "Elephant" P2 ("SlideCapture" Diagonal))
        (piece "Knight" P2 ("LeapCapture" "KnightWalk"))
        (piece "Queen" P2 ("SlideCapture"))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn2" (sites Row 6))
            (place "King_noCross1" coord:"D1")
            (place "Boat2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King_noCross2" coord:"E8" state:1) 
        })
        
        (play 
            (do 
                (forEach Piece)
                ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
                (then
                    (if (and ("IsPieceAt" "King_noCross" P1 (last To)) ("HasNeverMoved" (where "King_noCross" P2)))
                        (if ("IsInCheck" "King_noCross" P2)
                            (set State at:(where "King_noCross" P2) 0) 
                        )
                    )
                )
            )
        )
        
        (end
            (if 
                (and 
                    ("IsInCheck" "King_noCross" Next)
                    ("NextCanNotMoveToProtect" "King_noCross")
                ) 
                (result Mover Win)
            ) 
        )
    )
)

