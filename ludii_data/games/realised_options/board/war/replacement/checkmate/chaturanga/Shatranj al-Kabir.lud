(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King_noCross" Next)))))
)

(define "CaptureToPiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (remove (to))
        )
    ) 
)

(define "EnemyNotImmumned" 
    (and ("IsEnemyAt" (to))
        (not 
            (and { 
                ("IsPieceAt" "Pawn" Next (to))
                (is In (to) (sites Mover))
            })
        )
    )
)

(define "NotSpecialPawn" 
    (and {
        (> (value Piece at:(last To)) 2) 
        (is In (last To) (sites Next))
        (= 0 (state at:(last To)))
    })	
)

(define "PromoteToAssignedPiece" 
    (promote (last To) (piece (value Piece at:(last To))))	
)

(define "ValueOfPawnKingPower" 23)

(define "HasToDoThirdPromotion" 
    (and 
        (is In (last To) (sites Next))
        (= 2 (state at:(last To)))
    )
)

(define "ThirdPromotionOfSpecialPawn" 
    (and {
        (set Value at:(last To) "ValueOfPawnKingPower")
        (set State at:(last To) 0)
        (forEach Site 
            (sites Board) 
            (if (= (if (is Mover P1) 11 12) (value Piece at:(site)))
                (set Value at:(site) "ValueOfPawnKingPower")
            )
        )
    })
)

(define "SitePawnCanCaptureTwice" 
    (forEach
        (sites Empty)
        if:(if (is Mover P1)
            (and ("IsEnemyAt" (ahead (site) NE)) ("IsEnemyAt" (ahead (site) NW)))
            (and ("IsEnemyAt" (ahead (site) SE)) ("IsEnemyAt" (ahead (site) SW)))
        )
    )
)

(define "SiteWithSpecialPawnAndFirstPromotion" 
    (forEach 
        (sites Next) 
        if:(and 
            ("IsPieceAt" "Pawn" Mover (site)) 
            (<= (value Piece at:(site)) 2)
        )
    )
)

(define "MakePawnReadyForSecondPromotion" 
    (and
        (set Value at:(last To) (if (is Mover P1) 11 12))
        (set State at:(last To) 1)
    )
)

(define "SiteWithSpecialPawnAndSecondPromotion" 
    (forEach 
        (sites Next) 
        if:(and {
            ("IsPieceAt" "Pawn" Mover (site))
            (or (= (value Piece at:(site)) 11) (= (value Piece at:(site)) 12))
            (= (state at:(site)) 1)
        })
    )
)

(define "ToEmptyInitSiteShahPawn" 
    (to 
        (mapEntry "InitShahPawn" Mover)
        if:(is Empty (to))
    )
)

(define "MakePawnReadyForThirdPromotion" 
    (set State at:(last To) 2)
)

(define "AnyOwnedSitesOnBoardExceptKing"
    (difference 
        (sites Occupied by:Mover container:"Board")
        (sites Occupied by:Mover container:"Board" component:"King_noCross")
    )
)

(game "Shatranj al-Kabir"
    ("TwoPlayersNorthSouth") 
    (equipment {
        (board 
            (merge {
                (square 11)
                (shift 11 1 (square 1))
                (shift -1 9 (square 1))
            })
        )
        (piece "Pawn" Each
            (if (= "ValueOfPawnKingPower" (value Piece at:(from)))
                ("StepToNotFriend")
                (or
                    "StepForwardToEmpty" 
                    ("StepToEnemy" (directions {FR FL}))	
                    (then 
                        (if ("NotSpecialPawn")
                            ("PromoteToAssignedPiece")
                            (if ("HasToDoThirdPromotion")
                                ("ThirdPromotionOfSpecialPawn")
                            )
                        )
                    )
                )
            )
        )
        
        (piece "Wazir" Each
            (move Hop Orthogonal 
                (between (exact 2) if:True) 
                (to 
                    if:(or 
                        (is Empty (to)) 
                        ("EnemyNotImmumned")
                    ) 
                    (apply (remove (to)))
                ) 
            )		
        )
        
        (piece "Knight_rotated" Each
            (move Leap 
                { {F F F R F } {F F F L F } } 
                (to 
                    if:(or (is Empty (to)) ("EnemyNotImmumned")) 
                    "CaptureToPiece"
                ) 
            )		
        )
        
        (piece "Elephant" Each
            (move Hop Diagonal 
                (between (exact 2) if:True) 
                (to 
                    if:(or 
                        (is Empty (to)) 
                        ("EnemyNotImmumned")
                    ) 
                    (apply (remove (to)))
                ) 
            )		
        )
        
        (piece "Queen" Each
            (move Step 
                Diagonal
                (to 
                    if:(or (is Empty (to)) ("EnemyNotImmumned")) 
                    "CaptureToPiece"
                ) 
            )		
        )
        
        (piece "King_noCross" Each
            (move Step 
                (to 
                    if:(or 
                        (is Empty (to)) 
                        (and
                            ("EnemyNotImmumned")
                            (or 
                                (!= (to) (mapEntry "ExtraSquare" Next))
                                (and 
                                    (= (to) (mapEntry "ExtraSquare" Next))
                                    (< (value Piece at:(to)) 23)
                                )
                            )
                        )
                    ) 
                    "CaptureToPiece"
                ) 
            )		
        )
        
        (piece "Amazon" Each
            (move Step 
                Orthogonal
                (to 
                    if:(or (is Empty (to)) ("EnemyNotImmumned")) 
                    "CaptureToPiece"
                ) 
            )		
        )
        
        (piece "Giraffe" Each
            (forEach Direction 
                Diagonal 
                (to 
                    if:(is Empty (to)) 
                    (apply 
                        (and {
                            (move (from)
                                (to 
                                    (sites To
                                        (slide 
                                            (from (to))
                                            Orthogonal
                                            (between (min 3))
                                            (to 
                                                if:("EnemyNotImmumned")
                                                "CaptureToPiece"
                                            ) 
                                        )
                                    )
                                )
                            )
                        })
                    )
                )
            )
        )
        (piece "Bishop_noCross" Each
            (move Slide 
                Diagonal
                (between (min 2))
                (to 
                    if:("EnemyNotImmumned")
                    "CaptureToPiece"
                ) 
            )
        )
        
        (piece "Knight" Each
            (move Leap 
                "KnightWalk" 
                (to 
                    if:(or (is Empty (to)) ("EnemyNotImmumned")) 
                    "CaptureToPiece"
                ) 
            )		
        )
        
        (piece "Rook" Each
            (move Slide 
                Orthogonal
                (to 
                    if:("EnemyNotImmumned") 
                    "CaptureToPiece"
                ) 
            )		
        )
        (regions P1 (sites Bottom))
        (regions P2 (sites Top))
        (map "InitShahPawn" {(pair P1 "G3") (pair P2 "G9")})
        (map "ExtraSquare" {(pair P1 "M2") (pair P2 "A10")})
    })
    (rules 
        (start {
            (place "Pawn1" coord:"B3" value:1) 
            (place "Pawn2" coord:"L9" value:2) 
            (place "Pawn1" coord:"C3" value:3) 
            (place "Pawn2" coord:"K9" value:4) 
            (place "Pawn1" coord:"D3" value:5) 
            (place "Pawn2" coord:"J9" value:6) 
            (place "Pawn1" coord:"E3" value:7) 
            (place "Pawn2" coord:"I9" value:8) 
            (place "Pawn1" coord:"F3" value:9) 
            (place "Pawn2" coord:"H9" value:10) 
            (place "Pawn1" coord:"G3" value:11) 
            (place "Pawn2" coord:"G9" value:12) 
            (place "Pawn1" coord:"H3" value:13) 
            (place "Pawn2" coord:"F9" value:14) 
            (place "Pawn1" coord:"I3" value:15) 
            (place "Pawn2" coord:"E9" value:16) 
            (place "Pawn1" coord:"J3" value:17) 
            (place "Pawn2" coord:"D9" value:18) 
            (place "Pawn1" coord:"K3" value:19) 
            (place "Pawn2" coord:"C9" value:20) 
            (place "Pawn1" coord:"L3" value:21) 
            (place "Pawn2" coord:"B9" value:22) 
            (place "King_noCross1" coord:"G2") (place "King_noCross2" coord:"G10")
            (place "Queen1" coord:"F2") (place "Queen2" coord:"H10")
            (place "Amazon1" coord:"H2") (place "Amazon2" coord:"F10")
            (place "Giraffe1" (sites {"E2" "I2"})) (place "Giraffe2" (sites {"E10" "I10"}))
            (place "Bishop_noCross1" (sites {"D2" "J2"})) (place "Bishop_noCross2" (sites {"D10" "J10"}))
            (place "Wazir1" (sites {"F1" "H1"})) (place "Wazir2" (sites {"F11" "H11"}))
            (place "Knight1" (sites {"C2" "K2"})) (place "Knight2" (sites {"C10" "K10"}))
            (place "Rook1" (sites {"B2" "L2"})) (place "Rook2" (sites {"B10" "L10"}))
            (place "Elephant1" (sites {"B1" "L1"})) (place "Elephant2" (sites {"B11" "L11"}))
            (place "Knight_rotated1" (sites {"D1" "J1"})) (place "Knight_rotated2" (sites {"D11" "J11"}))
        })
        (play
            (do
                (or {
                    (move 
                        (from ("SiteWithSpecialPawnAndFirstPromotion"))
                        (to ("SitePawnCanCaptureTwice"))
                        (then ("MakePawnReadyForSecondPromotion"))
                    )
                    (move 
                        (from ("SiteWithSpecialPawnAndSecondPromotion"))
                        ("ToEmptyInitSiteShahPawn")
                        (then ("MakePawnReadyForThirdPromotion"))
                    )
                    (if (and (!= (value Player Mover) 1)
                            ("IsInCheck" "King_noCross" Mover)	
                        )
                        (forEach Site ("AnyOwnedSitesOnBoardExceptKing")
                            (move Swap Pieces (where "King_noCross" Mover) (site) (then (set Value Mover 1)))
                        )
                    )
                    (forEach Piece)
                })
                ifAfterwards:(and (not ("NextCanNotMove")) (not ("IsInCheck" "King_noCross" Mover)))
            )
        )
        (end { 
            ("BlockWin")
            ("Checkmate" "King_noCross")
            (if 
                (or 
                    ("IsPieceAt" "King_noCross" P2 (mapEntry "ExtraSquare" P1))
                    ("IsPieceAt" "King_noCross" P1 (mapEntry "ExtraSquare" P2))
                )
                (result Mover Draw)
            )
        })
    )
)

