(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King_noCross" Mover at:(to)))
    ) 
)

(define "PromotedPiece" 
    (if (and (is In (last To) (sites Corners)) (< (count Sites in:(sites Occupied by:Mover component:"Castle")) 2))
        (promote (last To) (piece (id "Castle" Mover)))
        (if (and (or (= (column of:(last To)) 1) (= (column of:(last To)) 6)) (< (count Sites in:(sites Occupied by:Mover component:"Horse")) 2))
            (promote (last To) (piece (id "Horse" Mover)))
            (if (and (or (= (column of:(last To)) 2) (= (column of:(last To)) 5)) (< (count Sites in:(sites Occupied by:Mover component:"Elephant")) 2))
                (promote (last To) (piece (id "Elephant" Mover)))
                (if (and (= (column of:(last To)) 3) (< (count Sites in:(sites Occupied by:Mover component:"Queen")) 1))
                    (promote (last To) (piece (id "Queen" Mover)))
                )
            )
        )
    )
)

(game "Shatren" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        
        ("ChessPawn" "Pawn" ~
            (then
                (if (is In (last To) (sites Mover "Promotion")) 
                    ("PromotedPiece")
                )
            )
        )
        
        ("ChessRook" "Castle")
        (piece "King_noCross" Each 
            (or
                ("StepToNotFriend")
                (if (not ("IsInCheck" "King_noCross" Mover))
                    ("LeapCapture" "KnightWalk")
                )
            )
        )
        ("ChessBishop" "Elephant")
        ("ChessKnight" "Horse")
        ("ChessQueen" "Queen")
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Castle1" {"A1" "H1"} state:1) (place "Horse1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King_noCross1" coord:"E1" state:1) 
            (place "Castle2" {"A8" "H8"} state:1) (place "Horse2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King_noCross2" coord:"E8" state:1) 
        })
        
        (play 
            (do 
                (forEach Piece)
                ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
            )
        )
        
        (end ("Checkmate" "King_noCross"))
    )
)

