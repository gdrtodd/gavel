(define "PawnToReplace" (!= 0 (count Sites in:(sites Occupied by:Mover container:"Hand" component:"Pawn"))))

(define "EmptySitesBehindPawnPositions" 
    (intersection
        (difference (sites Mover) (union (sites "PawnSites") (sites "NoPawnSites")))
        (sites Empty)
    )
)

(define "ReplaceAPawn" 
    (move 
        (from (sites Occupied by:Mover container:"Hand" component:"Pawn")) 
        (to ("EmptySitesBehindPawnPositions"))
    )
)

(define "PawnWasMovedForward"
    (and (is In (last From) (sites Board)) ("IsPieceAt" "Pawn" Mover (last To)))
)

(define "AnyOwnedSitesOnBoardExceptPawn"
    (difference 
        (sites Occupied by:Mover container:"Board")
        (sites Occupied by:Mover container:"Board" component:"Pawn")
    )
)

(define "EmptySiteOnPlayerSideOrOccupiedByOwnedPawn"
    (difference
        (intersection
            (sites Mover)
            (union
                (sites Empty)
                (sites Occupied by:Mover container:"Board" component:"Pawn")
            )
        )
        (sites "NoPawnSites")
    )
)

(define "IfPawnStoreIt"
    (if (is Occupied (to))
        (fromTo
            (from (to))
            (to (handSite Mover 5))
        )
    )
)

(define "AllPiecesOnBoard"
    (= 0 
        (count Sites 
            in:(union 
                (sites Occupied by:P1 container:"Hand") 
                (sites Occupied by:P2 container:"Hand")
            )
        )
    )
)

(game "Sittuyin"
    ("TwoPlayersNorthSouth") 
    (equipment {
        (board (square 8))
        (hand Each size:6)
        ("ChessKing" "King_noCross")
        ("ChessRook" "Rook")
        (piece "Elephant" Each ("StepToNotFriend" Forwards))
        ("ChessKnight" "Knight")
        ("ChessPawn" "Pawn" ~ (then ("PromoteIfReach" (difference (sites "DiagonalSites") (sites Mover "Home")) "Queen")))
        (piece "Queen" Each ("StepToNotFriend" Diagonal))
        (regions "Home" P1 (expand (sites Bottom) steps:3))
        (regions "Home" P2 (expand (sites Top) steps:3))
        (regions "NoPawnSites" 
            (union
                (difference (sites Row 3) (expand (sites Right) steps:3))
                (difference (sites Row 4) (expand (sites Left) steps:3))
            )
        )
        (regions "PawnSites" 
            (union {
                (difference (sites Row 2) (expand (sites Right) steps:3))
                (difference (sites Row 3) (expand (sites Left) steps:3))
                (difference (sites Row 4) (expand (sites Right) steps:3))
                (difference (sites Row 5) (expand (sites Left) steps:3))
            })
        )
        (regions "DiagonalSites" 
            (union 
                (union (sites Centre) (expand (sites Corners) steps:1))
                (sites {"C6" "F6" "F3" "C3"})
            )
        )
        (map "KingInitPos" {
            (pair P1 (coord "G2")) 
            (pair P2 (coord "B7")) 
        })
    })
    (rules 
        (start { 
            (place "Pawn1" (difference (sites Row 2) (expand (sites Right) steps:3)))
            (place "Pawn1" (difference (sites Row 3) (expand (sites Left) steps:3)))
            (place "Pawn2" (difference (sites Row 4) (expand (sites Right) steps:3)))
            (place "Pawn2" (difference (sites Row 5) (expand (sites Left) steps:3)))
            (place "King_noCross1" (handSite P1)) (place "King_noCross2" (handSite P2))
            (place "Queen1" (handSite P1 1)) (place "Queen2" (handSite P2 1))
            (place "Elephant1" (handSite P1 2) count:2) (place "Elephant2" (handSite P2 2) count:2)
            (place "Knight1" (handSite P1 3) count:2) (place "Knight2" (handSite P2 3) count:2)
            (place "Rook1" (handSite P1 4) count:2) (place "Rook2" (handSite P2 4) count:2)
        })
        phases:{
        (phase "PlaceKing"
            (play 
                (move 
                    (from (sites Occupied by:Mover container:"Hand" component:"King_noCross")) 
                    (to (mapEntry "KingInitPos" Mover))
                )
            )
            (nextPhase Mover "PlaceFirstElephant")
        )
        (phase "PlaceFirstElephant"
            (play 
                (move 
                    (from (sites Occupied by:Mover container:"Hand" component:"Elephant")) 
                    (to (sites Around (mapEntry "KingInitPos" Mover)))
                )
            )
            (nextPhase Mover "PlaceOtherPieces")
        )
        (phase "PlaceOtherPieces"
            (play 
                (if ("PawnToReplace")
                    ("ReplaceAPawn")
                    (or 
                        (if ("AllPiecesOnBoard")
                            (or
                                (forEach Piece "Pawn" "StepForwardToEmpty") 
                                (move 
                                    (from ("AnyOwnedSitesOnBoardExceptPawn"))
                                    (to 
                                        ("EmptySiteOnPlayerSideOrOccupiedByOwnedPawn")
                                        (apply ("IfPawnStoreIt"))
                                    )
                                    (then (if ("PawnToReplace") (moveAgain)))
                                )
                            )
                        )
                        (move 
                            (from (sites Occupied by:Mover container:"Hand")) 
                            (to 
                                ("EmptySiteOnPlayerSideOrOccupiedByOwnedPawn")
                                (apply ("IfPawnStoreIt"))
                            )
                            (then (if ("PawnToReplace") (moveAgain)))
                        )
                    )
                )
            )
            (nextPhase ("PawnWasMovedForward") "Playing")
        )
        (phase "Playing"
            (play
                (do
                    (forEach Piece)
                    ifAfterwards:(not ("IsInCheck" "King_noCross" Mover))
                )
            )
            (end ("Checkmate" "King_noCross"))
        )
        }
    )
)

