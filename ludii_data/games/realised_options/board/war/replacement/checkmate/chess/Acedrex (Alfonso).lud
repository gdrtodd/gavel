(define "CaptureToPiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (remove 
                (to) 
                (then (set Var 1))
            )
        )
    ) 
)

(define "HadACapture" (= (var) 1))
(define "MovedBefore" (= 1 (state at:#1)))
(define "RememberMoved" (set State at:#1 1))

(define "CaptureForwardDiagonal"
    (move Step 
        (directions {FR FL}) 
        (to 
            if:("IsEnemyAt" (to)) 
            "CaptureToPiece"
        )
    )
)

(game "Acedrex (Alfonso)" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        ("ChessKing" "King" (then (set Var 1)))
        (piece "Queen" Each
            (or
                (move Step 
                    Diagonal
                    (to 
                        if:(not ("IsFriendAt" (to))) 
                        "CaptureToPiece"
                    ) 
                )
                (if (not ("MovedBefore" (from)))
                    (move Hop Diagonal 
                        (between if:True) 
                        (to if:(is Empty (to)))
                    ) 
                )
                (then 
                    (if (not ("MovedBefore" (last To)))
                        ("RememberMoved" (last To))
                    )
                )
            )
        )
        (piece "Bishop" Each
            (move Hop Diagonal 
                (between if:True) 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPiece"
                )
            )		
        )
        ("ChessKnight" "Knight" (then (set Var 1)))
        ("ChessRook" "Rook" (then (set Var 1)))
        (piece "Pawn" Each
            (or {
                (if (and (not ("HadACapture")) (is In (from) (sites Start (piece (what at:(from))))))
                    ("DoubleStepForwardToEmpty")
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                }
                (then
                    (if (and ("IsOffBoard" (where "Queen" Mover)) (is In (last To) (sites Mover "Promotion")))
                        (promote (last To) (piece "Queen") Mover)
                    )
                )
            )		
        )
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    })
    
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) 
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1) 
        })  
        (play 
            (do
                (forEach Piece)
                ifAfterwards:(not ("IsInCheck" "King" Mover))
            )
        )
        
        (end ("Checkmate" "King"))
    )
)

