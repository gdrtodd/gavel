
(define "CaptureToPieceAndResetCounter"
    (apply
        (if ("IsEnemyAt" (to))
            (remove (to)
                (then (set Counter))
            )
        )
    )
)

(define "Directions"
    ("P12" (directions #1) (directions #2))
)

(define "IsFromInStartCell"
    (is In (from) (sites Start (piece (what at:(from)))))
)

(define "IsToEmpty"
    (is In (to) (sites Empty))
)

(define "IsToEmptyOrEnemy"
    (or "IsToEmpty"
        ("IsEnemyAt" (to))
    )
)

(define "P12"
    (if (is Mover P1) #1 #2)
)

(define "SlideCaptureMove"
    (move Slide
        #1
        (to if:("IsEnemyAt" (to))
            "CaptureToPieceAndResetCounter"
        )
        #2
    )
)

(define "History_HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

(define "History_SaveMovement"
    (set State at:(last To) 0)
)

(define "History_SaveMovementChange"
    (then
        (if (= (state at:(last To)) 1)
            "History_SaveMovement"
        )
    )
)

(define "KingCaptureStep"
    (move Step
        #1
        (to if:"IsToEmptyOrEnemy"
            "CaptureToPieceAndResetCounter"
        )
        #2
    )
)

(define "IsToEmptyAndNotInCheck"
    (and
        "IsToEmpty"
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

(define "Castle_PreCheck"
    (and {
        ("IsPieceAt" "King" Mover (mapEntry "King" (mover))) 
        ("History_HasNeverMoved" "King")
        (not ("IsInCheck" "King" Mover))
    })
)

(define "Castle_Base"
    (move Slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

(define "Castle_KingRook"
    ("Castle_Base"
        "King"
        #1
        #2
        "IsToEmptyAndNotInCheck"
        (then (and ("History_SaveMovement") ("Castle_Base" #3 #4 #5 True)))
    )
)

(define "Castle"
    (if (and
            ("History_HasNeverMoved" #3)
            (can Move ("Castle_Base" #3 #4 #5 "IsToEmpty"))
        )
        ("Castle_KingRook" #1 #2 #3 #4 #5)
    )
)

(define "Castle_KingSide" ("Castle" E 2 "RookRight" W 2))
(define "Castle_QueenSide" ("Castle" W 3 "RookLeft" E 3))

(define "IsPawnUnblocked_Base"
    (and
        (is In (ahead (from) steps:1 #1) (sites Empty))
        (is In (ahead (from) steps:1 #2) (sites Empty))
    )
)

(define "IsPawnUnblocked"
    ("P12" ("IsPawnUnblocked_Base" NNW NNE) ("IsPawnUnblocked_Base" SSW SSE))
)

(define "PawnHop"
    (move Hop
        #1
        (between if:(is In (between) (sites Empty)))
        (to if:"IsToEmpty")
        (then (and {
                (set Pending (ahead (last To) #2))
                (set Var (last To))
            })
        )
    )
)

(define "PawnCapture_Base"
    (move Step
        #1
        (to if:("IsEnemyAt" (to))
            (apply (remove (to)))
        )
    )
)

(define "PawnCapture_Forward"
    ("PawnCapture_Base" ("Directions" {N} {S}))
)

(define "PawnCapture_Diag"
    ("PawnCapture_Base" ("Directions" {WNW ENE} {WSW ESE}))
)

(define "PawnStep_Double_Base"
    ("P12"
        (or ("PawnHop" #1 #2) ("PawnHop" #3 #4))
        (or ("PawnHop" #5 #6) ("PawnHop" #7 #8))
    )
)

(define "PawnStep_Double"
    ("PawnStep_Double_Base" NNW SSE NNE SSW SSW NNE SSE NNW)
)

(define "StepOrthoToEmpty_Base"
    (move Step
        #1
        (to if:"IsToEmpty")
    )
)

(define "StepOrthoToEmpty"
    ("StepOrthoToEmpty_Base" ("Directions" {NNW NNE} {SSW SSE}))
)

(define "EnPassant_Base"
    (move Step
        #1
        (to if:"IsEnPassantCapture")
        (then (remove (var)))
    )
)

(define "EnPassant_Diag"
    ("EnPassant_Base" ("Directions" {WNW ENE} {WSW ESE}))
)

(define "IsEnPassantCapture"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

(define "PromoteTo"
    (move Promote (last To) #1 Mover)
)

(game "Brusky Chess"
    ("TwoPlayersNorthSouth")
    (equipment {
        (board
            (remove
                (hex Rectangle 8 13)
                cells:{0 1 13 25 75 88 11 12 24 37 62 74 86 87 98 99}
            )
        )
        
        (piece "King" Each
            (or {
                ("KingCaptureStep" All "History_SaveMovementChange")
                (if "Castle_PreCheck"
                    (or {
                        "Castle_KingSide"
                        "Castle_QueenSide"
                    })
                )
            })
        )
        (piece "Queen" Each ("SlideCaptureMove" All))
        (piece "Rook" Each ("SlideCaptureMove" Orthogonal "History_SaveMovementChange"))
        (piece "Bishop" Each ("SlideCaptureMove" Diagonal))
        ("ChessKnight" "Knight" (then (set Counter)))
        
        (piece "Pawn" Each
            (or {
                "PawnCapture_Diag" 
                (if "IsPawnUnblocked" "StepOrthoToEmpty")
                (if "IsFromInStartCell"
                    (or "PawnCapture_Forward" 
                        (if "IsPawnUnblocked" "PawnStep_Double")
                    )
                    "EnPassant_Diag" 
                )
                }
                (then
                    (and
                        ("ReplayInMovingOn" (sites Mover "PromotionZone"))
                        (set Counter)
                    )
                )
            )
        )
        
        (map "King"  {(pair 1 "F1") (pair 2 "I8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "D8")})
        (map "RookRight" {(pair 1 "I1") (pair 2 "L8")})
        
        (regions "PromotionZone" P1 (sites Top))
        (regions "PromotionZone" P2 (sites Bottom))
        
        (regions "Region-Dark" (sites Phase 2))
        (regions "Region-Light" (sites Phase 1))
        (regions "Region-Medium" (sites Phase 0))
    })
    
    (rules
        (start {
            (place "King1" coord:"F1" state:1)
            (place "Queen1" coord:"D1")
            (place "Rook1" {"A1" "I1"} state:1)
            (place "Bishop1" {"C1" "G1" "E1"})
            (place "Knight1" {"B1" "H1"})
            
            (place "King2" coord:"I8" state:1)
            (place "Queen2" coord:"G8")
            (place "Rook2" {"D8" "L8"} state:1)
            (place "Bishop2" {"F8" "H8" "J8"})
            (place "Knight2" {"E8" "K8"})
            
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
        })
        phases:{
        (phase "Movement"
            (play
                (if ("SameTurn")
                    ("PromoteTo" (piece {"Queen" "Rook" "Bishop" "Knight"}))
                    (do (forEach Piece)
                        ifAfterwards:(not ("IsInCheck" "King" Mover))
                    )
                )
            )
            (end {
                ("Checkmate" "King")
                (if (or
                        (no Moves Mover)
                        (= (counter) 100)
                    )
                    (result Mover Draw)
                )
            })
        )
        }
    )
)

