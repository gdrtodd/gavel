(define "CaptureToPiece"
    (apply 
        (if ("IsEnemyAt" (to)) 
            (remove 
                (to) 
            )
        )
    ) 
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King_noCross" Next)))))
)

(define "KnightOnlyCapture" 
    (move Leap 
        "KnightWalk" 
        (to 
            if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
            "CaptureToPiece"
        ) 
    )	
)

(define "RookOnlyCapture" 
    (move Slide 
        Orthogonal 
        (to 
            if:("IsEnemyAt" (to)) 
            (apply 
                if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
                (if ("IsEnemyAt" (to)) 
                    (remove 
                        (to) 
                    )
                )
            ) 
        ) 
    )	
)

(define "PawnOnlyCapture" 
    (move Step 
        (directions {FR FL}) 
        (to 
            if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
            (apply (remove (to)))
        )
    )	
)

(define "BishopOnlyCapture" 
    (move Hop 
        Diagonal 
        (between if:True) 
        (to 
            if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
            "CaptureToPiece"
        )
    )	
)

(define "QueenOnlyCapture" 
    (move Step 
        Diagonal
        (to 
            if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
            "CaptureToPiece" 
        )
    )
)

(define "KingOnlyCapture" 
    (move Step 
        (to 
            if:(and ("IsEnemyAt" (to)) (= (what at:(to)) #1))
            "CaptureToPiece" 
        )
    )
)

(game "Forcado" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        
        ("ChessPawn" "Pawn" ~ (then ("PromoteIfReach" (sites Mover "Promotion") "Ferz_noCross")))
        ("ChessRook" "Rook")
        ("ChessKing" "King_noCross")
        (piece "Bishop_noCross" Each 
            (move Hop 
                Diagonal 
                (between if:True) 
                (to 
                    if:(or 
                        (is Empty (to)) 
                        ("IsEnemyAt" (to))
                    ) 
                    (apply (if ("IsEnemyAt" (to)) (remove (to))))
                )
            )
        )
        ("ChessKnight" "Knight")
        (piece "Ferz_noCross" Each ("StepToNotFriend" Diagonal))
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" coord:"D1") (place "King_noCross1" coord:"E1") 
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" coord:"D8") (place "King_noCross2" coord:"E8") 
        })
        
        (play 
            
            (priority {
                (do (forEach Piece {"Pawn"}   ("PawnOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"} ("QueenOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}   ("KnightOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}   ("RookOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"} ("KingOnlyCapture" (id "Rook" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
                (do (forEach Piece {"Pawn"}   ("PawnOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"} ("QueenOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}   ("KnightOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}   ("RookOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"} ("KingOnlyCapture" (id "Knight" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
                (do (forEach Piece {"Pawn"}   ("PawnOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"} ("QueenOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}   ("KnightOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}   ("RookOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"} ("KingOnlyCapture" (id "Ferz_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
                (do (forEach Piece {"Pawn"}   ("PawnOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"} ("QueenOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}   ("KnightOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}   ("RookOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"} ("KingOnlyCapture" (id "Bishop_noCross" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
                (do (forEach Piece {"Pawn"}   ("PawnOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Bishop_noCross"} ("BishopOnlyCapture" (id "Pawn" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Ferz_noCross"} ("QueenOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Knight"}   ("KnightOnlyCapture" (id "Pawn" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"Rook"}   ("RookOnlyCapture" (id "Pawn" Next)) Mover) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                (do (forEach Piece {"King_noCross"} ("KingOnlyCapture" (id "Pawn" Next)) Mover) 	ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
                (do (forEach Piece) ifAfterwards:(not ("IsInCheck" "King_noCross" Mover)))
                
            })
            
        )
        
        (end
            (if 
                (or
                    (and 
                        ("IsInCheck" "King_noCross" Next)
                        ("NextCanNotMove")
                    )
                    (no Moves Next)
                )
                (result Mover Win)
            ) 
        )
    )
)

