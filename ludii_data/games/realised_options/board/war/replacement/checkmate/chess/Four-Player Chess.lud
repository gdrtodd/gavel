(define "CanNotMove"
    (not (can Move (do (and (forEach Piece #1) (set NextPlayer (player #2))) ifAfterwards:(not ("IsInCheck" "King" #1)))))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    ) 
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastlingHor"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastlingHor"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SmallCastlingVer"
    ("DecideToCastle" "King" S 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" N 2 True)))
)

(define "BigCastlingVer"
    ("DecideToCastle" "King" N 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" S 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

(define "RemoveKingIfCheckmate"
    (if (and (is Active #1) (not (is Mover #1)))
        (if 
            (and 
                ("IsInCheck" "King" #1)
                ("CanNotMove" #1 #2)
            )
            (remove (where (id "King" #1)))
        )
    )		
)

(game "Four-Player Chess" 
    (players 
        {(player N) (player S) (player E) (player W)}
    ) 
    (equipment { 
        (board 
            
            (merge 
                (shift 0 3 (rectangle 8 14)) 
                (shift 3 0 (rectangle 14 8))
            ) 
            
        ) 
        
        ("ChessPawn" "Pawn"
            (or 
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    ("DoubleStepForwardToEmpty" "SetEnPassantLocation")
                )
                "EnPassant"
            )
            (then
                (and
                    (if (is In (last To) (sites Mover "Promotion")) 
                        (moveAgain)
                    )
                    (set Counter)
                )
            )
        )
        
        ("ChessRook" "Rook" (then (set Counter)) ("RememberPieceHasMoved"))
        ("ChessKing" "King" (then (set Counter)) ("RememberPieceHasMoved"))
        ("ChessBishop" "Bishop" (then (set Counter)))
        ("ChessKnight" "Knight" (then (set Counter)))
        ("ChessQueen" "Queen" (then (set Counter)))
        
        (map "King" {(pair 1 "H1") (pair 2 "H14") (pair 3 "A7") (pair 4 "N7")})
        (map "RookLeft" {(pair 1 "D1") (pair 2 "K14") (pair 3 "A11") (pair 4 "N4")})
        (map "RookRight" {(pair 1 "K1") (pair 2 "D14") (pair 3 "A4") (pair 4 "N11")})
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
        (regions "Promotion" P3 (sites Right))
        (regions "Promotion" P4 (sites Left))
        
    }) 
    (rules 
        (start { 
            
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 12))
            (place "Pawn3" (sites Column 1))
            (place "Pawn4" (sites Column 12))
            (place "Rook1" {"D1" "K1"} state:1) (place "Knight1" {"E1" "J1"}) (place "Bishop1" {"F1" "I1"}) (place "Queen1" coord:"G1") (place "King1" coord:"H1" state:1) 
            (place "Rook2" {"D14" "K14"} state:1) (place "Knight2" {"E14" "J14"}) (place "Bishop2" {"F14" "I14"}) (place "Queen2" coord:"G14") (place "King2" coord:"H14" state:1) 
            (place "Rook3" {"A11" "A4"} state:1) (place "Knight3" {"A10" "A5"}) (place "Bishop3" {"A6" "A9"}) (place "Queen3" coord:"A8") (place "King3" coord:"A7" state:1) 
            (place "Rook4" {"N4" "N11"} state:1) (place "Knight4" {"N5" "N10"}) (place "Bishop4" {"N6" "N9"}) (place "Queen4" coord:"N8") (place "King4" coord:"N7" state:1) 
            
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do 
                    (or 
                        (forEach Piece)
                        (if (and 
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover)) 
                            )
                            (or {
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastlingHor"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastlingHor"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" S 3 (is Empty (to))))
                                    )
                                    "BigCastlingVer"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" N 2 (is Empty (to))))
                                    )
                                    "SmallCastlingVer"
                                )
                            })
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
                (then
                    
                    (and {
                        ("RemoveKingIfCheckmate" P1 1)
                        ("RemoveKingIfCheckmate" P2 2)
                        ("RemoveKingIfCheckmate" P3 3)
                        ("RemoveKingIfCheckmate" P4 4)
                    })
                    
                )
            )
        )
        
        (end {
            (forEach NonMover
                if:("IsOffBoard" (where "King" Player)) 
                (result Player Loss)
            )
            (if (and (<= (count Active) 2) (or (no Moves Mover) (= (counter) (* 50 (count Active))))) (result Mover Draw)) 
        })
    )
)

