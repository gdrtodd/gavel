(define "HasNeverMoved"
    (= (state at:(from)) 1) 
)

(define "PieceHasMoved"
    (set State at:(last To) 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            "PieceHasMoved"
        ) 
    ) 
)

(define "PromotedPiece" 
    (if (is In (last To) (sites Corners))
        (id "Rook" Mover)
        (if (or (= (column of:(last To)) 1) (= (column of:(last To)) 10))
            (id "Lion" Mover)
            (if (or (= (column of:(last To)) 2) (= (column of:(last To)) 9))
                (id "Rhino" Mover)
                (if (or (= (column of:(last To)) 3) (= (column of:(last To)) 8))
                    (id "Giraffe" Mover)
                    (if (or (= (column of:(last To)) 4) (= (column of:(last To)) 7))
                        (id "Crocodile" Mover)
                        (id "Eagle" Mover)
                    )
                )
            )
        )
    )
)

(define "RhinoMovement" 
    (sites To
        (if ("IsNotOffBoard" (ahead (from) #1))
            (slide 
                (from (ahead (from) #1))
                #2 
                (to 
                    if:("IsEnemyAt" (to)) 
                ) 
            )
        )
    )
)

(define "EagleMovement" 
    (sites To
        (if (and ("IsNotOffBoard" (ahead (from) #1)) (not ("IsFriendAt" (ahead (from) #1))))
            (or
                (fromTo (from) (to (ahead (from) #1)))
                (slide 
                    (from (ahead (from) #1))
                    #2 
                    (to 
                        if:("IsEnemyAt" (to)) 
                    ) 
                )
            )
        )
    )
)

(game "Grande Acedrex" 
    ("TwoPlayersNorthSouth")
    (equipment {
        (board (square 12))
        
        ("ChessPawn" "Pawn" ~
            (then     
                (if (is In (last To) (sites Mover "Promotion")) 
                    (promote (last To) (piece "PromotedPiece"))
                )
            )
        )
        ("ChessBishop" "Crocodile")
        (piece "Eagle" Each
            (move (from)
                (to 
                    (union {
                        ("EagleMovement" NW (directions {N W}))
                        ("EagleMovement" NE (directions {N E}))
                        ("EagleMovement" SW (directions {S W}))
                        ("EagleMovement" SE (directions {E S}))
                    })
                    (apply 
                        if:("IsEnemyAt" (to))
                        (remove (to))
                    ) 
                )
            )
        )
        (piece "Rhino" Each 
            (move 
                (from)
                (to
                    (union {
                        ("RhinoMovement" N (directions {NE NW})) 
                        ("RhinoMovement" W (directions {NW SW})) 
                        ("RhinoMovement" S (directions {SW SE})) 
                        ("RhinoMovement" E (directions {SE NE})) 
                    })
                    (apply 
                        if:("IsEnemyAt" (to))
                        (remove (to))
                    ) 
                )
            )
        )
        (piece "Giraffe" Each ("LeapCapture" "GiraffeWalk"))
        ("ChessRook" "Rook")
        (piece "Lion" Each ("LeapCapture" { {F F F} }))
        (piece "King" Each
            (or
                ("StepToNotFriend")
                (if "HasNeverMoved"
                    (move Hop
                        Forwards
                        (between if:True)
                        (to
                            if:(not ("IsFriendAt" (to))) 
                            (apply 
                                (if ("IsEnemyAt" (to))
                                    (remove 
                                        (to) 
                                    )
                                )
                            ) 
                        )
                    )
                )
                "RememberPieceHasMoved"
            )
        )
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 3)) (place "Rook1" (sites {"A1" "L1"}))
            (place "Lion1" (sites {"B1" "K1"})) (place "Rhino1" (sites {"C1" "J1"}))
            (place "Giraffe1" (sites {"D1" "I1"})) (place "Crocodile1" (sites {"E1" "H1"}))
            (place "Eagle1" coord:"F1") (place "King1" coord:"G1" state:1)
            
            (place "Pawn2" (sites Row 8)) (place "Rook2" (sites {"A12" "L12"}))
            (place "Lion2" (sites {"B12" "K12"})) (place "Rhino2" (sites {"C12" "J12"}))
            (place "Giraffe2" (sites {"D12" "I12"})) (place "Crocodile2" (sites {"E12" "H12"}))
            (place "Eagle2" coord:"F12") (place "King2" coord:"G12" state:1)
        })
        (play
            
            (do
                (or {
                    (forEach Piece "Pawn")
                    (forEach Piece "King")
                    (forEach Piece "Rook")
                    (forEach Piece "Lion")
                    (forEach Piece "Giraffe")
                    (forEach Piece "Eagle")
                    (forEach Piece "Crocodile")
                    (forEach Piece "Rhino")
                })
                ifAfterwards:(not ("IsInCheck" "King" Mover))
            )
            
        )
        (end ("Checkmate" "King"))
    )
)

