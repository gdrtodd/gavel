(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(game "Lombard Chess"
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        (piece "King" Each
            (or
                ("StepToNotFriend")
                (if (= 1 (state at:(from)))
                    (or
                        (move Hop 
                            (between 
                                (range 1 2)
                                if:(not ("IsEnemyAt" (between)))
                            ) 
                            (to  if:(is Empty (to)))
                        )
                        ("LeapToEmpty" "KnightWalk") 
                    )
                )
                ("RememberPieceHasMoved")
            )
        )
        ("ChessRook" "Rook")
        (piece "Bishop" Each
            (move Hop 
                Diagonal 
                (between if:True) 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    (apply 
                        (if ("IsEnemyAt" (to))
                            (remove 
                                (to)
                            )
                        )
                    ) 
                )
            )		
        )
        ("ChessKnight" "Knight")
        (piece "Queen" Each
            (or
                ("StepToNotFriend" Diagonal "RememberPieceHasMoved")	
                (if (= 1 (state at:(from)))
                    (move Hop 
                        Diagonal
                        (between if:True)
                        (to if:(is Empty (to)))
                    )
                )
                ("RememberPieceHasMoved")
            )
        )
        ("ChessPawn" "Pawn"
            (if (is In (from) (sites Start (piece (what at:(from)))))
                ("DoubleStepForwardToEmpty")
            )
            (then
                (if (is In (last To) (sites Mover "Promotion")) 
                    (and
                        (promote (last To) (piece (id "Queen" Mover)))
                        (set State at:(last To) 1)
                    )
                )
            )
        )
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    })
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1" state:1) (place "King1" coord:"E1" state:1) 
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8" state:1) (place "King2" coord:"E8" state:1) 
        })
        
        (play 
            (do (forEach Piece) 
                ifAfterwards:(not ("IsInCheck" "King" Mover))
                (then
                    (if (and (= 1 (state at:(where "King" Next))) ("IsInCheck" "King" Next))
                        ("PieceHasMoved" (where "King" Next))
                    )
                )
            )
        )
        
        (end {
            ("Checkmate" "King")
            ("DrawIfNoMoves" Next) 
        })
    )
)

