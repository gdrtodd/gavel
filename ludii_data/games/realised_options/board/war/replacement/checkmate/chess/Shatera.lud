(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (remove 
                (to) 
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    ) 
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:("IsEnemyAt" (to)) 
            (apply (remove (to)))
        )
    )
)

(game "Shatera" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    ("DoubleStepForwardToEmpty")
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                }
            )
        )
        
        (piece "Rook" Each 
            (move
                Slide 
                Orthogonal 
                (to 
                    if:("IsEnemyAt" (to)) 
                    "CaptureToPiece"
                ) 
            )
        )
        (piece "King" Each 
            (move
                Step 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPiece"
                ) 
            )
        )
        (piece "Bishop" Each 
            (move
                Slide 
                Diagonal 
                (to 
                    if:("IsEnemyAt" (to)) 
                    "CaptureToPiece"
                ) 
            )
        )
        (piece "Knight" Each 
            (move
                Leap 
                "KnightWalk" 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPiece"
                ) 
            )
        )
        (piece "Queen" Each 
            (move
                Slide 
                (to 
                    if:("IsEnemyAt" (to)) 
                    "CaptureToPiece"
                ) 
            ) 
        )
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1") 
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8") 
        })
        
        phases:{
        (phase "Opening" 
            (play
                (do 
                    (forEach Piece)
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                    (then
                        (and
                            (set Value Mover (+ 1 (value Player Mover)))
                            (if (!= (value Player Mover) 1) (moveAgain))
                        )
                    )
                )
            )
            (nextPhase Mover (= 2 (value Player Mover)) "Playing")
        )
        (phase "Playing"
            (play 
                (if "SameTurn"
                    (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                    (do 
                        (forEach Piece)
                        ifAfterwards:(not ("IsInCheck" "King" Mover))
                    )
                )
            )
        )
        }
        
        (end 
            (if (and 
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
        )
    )
)

