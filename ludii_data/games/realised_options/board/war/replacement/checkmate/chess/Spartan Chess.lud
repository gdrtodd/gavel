
(define "SitesKings"
    (sites Occupied by:#1 component:"King")
)

(define "CountSpartanKings"
    (count Sites in:("SitesKings" P2))
)

(define "IsInOmnicheck"
    (all Sites ("SitesKings" #1) if:(is Threatened at:(site)))
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInOmnicheck" Next)))))
)

(define "KingPosition" 4)
(define "RookLeft" 0)
(define "RookRight" 7)

(define "KingInTheInitialPlace"
    (= (what at:("KingPosition")) (id "King" Mover))
)

(define "HasNeverMoved"
    (= (state at:#1) 1) 
)

(define "PieceHasMoved"
    (set State at:(last To) 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            "PieceHasMoved"
        ) 
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    ) 
)

(define "DoCastle"
    (move
        Slide 
        (from #1) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        #5
    )
)

(define "SmallCastling"
    ("DoCastle" "KingPosition" E 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookRight" W 2 True))))
)

(define "BigCastling"
    ("DoCastle" "KingPosition" W 2 "KingNotCheckedAndToEmpty" (then (and ("PieceHasMoved") ("DoCastle" "RookLeft" E 3 True))))
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if ("IsEnemyAt" (to))
            (remove 
                (to) 
                (then (set Counter))
            )
        )
    ) 
)

(define "SlideMove"
    (move
        Slide 
        #1
        (to 
            if:("IsEnemyAt" (to)) 
            "CaptureToPieceAndResetCounter"
        ) 
        #2
    )
)

(define "StepMove"
    (move
        Step 
        #1
        (to 
            if:(not ("IsFriendAt" (to))) 
            "CaptureToPieceAndResetCounter"
        ) 
        #2
    )
)

(define "HopMove"
    (move
        Hop 
        #1 
        (to 
            if:(or ("IsEnemyAt" (to)) (is Empty (to)))
            "CaptureToPieceAndResetCounter"
        ) 
    )
)

(define "KnightMove"
    (move
        Leap 
        "KnightWalk" 
        (to 
            if:(not ("IsFriendAt" (to))) 
            "CaptureToPieceAndResetCounter"
        ) 
    )
)

(define "PawnDoubleMove"
    (move
        Hop 
        #1 
        #2
        (to if:(is Empty (to))) 
    )
)

(define "PawnCapture"
    (move
        Step 
        #1
        (to 
            if:("IsEnemyAt" (to)) 
            (apply (remove (to)))
        )
    )
)

(define "PawnMove"
    (move
        Step
        #1
        (to if:(is Empty (to)))
    )
)

(define "PawnPromotion"
    (then
        (and
            (if (is In (last To) (sites Mover "Promotion")) 
                (moveAgain)
            )
            (set Counter)
        )
    )
)

(define "PawnDirections" (directions { FL FR }))

(game "Spartan Chess" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" P1 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    ("PawnDoubleMove" Forward (between if:(is Empty (between))))
                )
                ("PawnMove" Forward) 
                ("PawnCapture" ("PawnDirections"))
                }
                ("PawnPromotion")
            )
        )
        (piece "Hoplite" P2
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    ("PawnDoubleMove" ("PawnDirections"))
                )
                ("PawnMove" ("PawnDirections")) 
                ("PawnCapture" Forward)
                }
                ("PawnPromotion")
            )
        )
        
        (piece "Rook" P1
            ("SlideMove" Orthogonal "RememberPieceHasMoved")
        )
        (piece "General" P2
            (or
                ("SlideMove" Orthogonal)
                ("StepMove" Diagonal) 
            )
        )
        (piece "Warlord" P2
            (or
                ("SlideMove" Diagonal)
                ("KnightMove") 
            )
        )
        (piece "Lieutenant" P2
            (or {
                ("StepMove" Diagonal) 
                ("HopMove" Diagonal)
                (move
                    Step 
                    (directions { W E }) 
                    (to 
                        if:(is Empty (to))
                    ) 
                )
            })
        )
        (piece "Captain" P2
            (or
                ("StepMove" Orthogonal) 
                ("HopMove" Orthogonal)
            )
        )
        
        (piece "King" Each
            ("StepMove" Adjacent ("RememberPieceHasMoved")) 
        )
        (piece "Bishop" P1 
            ("SlideMove" Diagonal)
        )
        (piece "Knight" P1
            ("KnightMove")
        )
        (piece "Queen" P1 
            ("SlideMove")
        )
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
        }
    ) 
    (rules 
        (start
            { 
            (place "Pawn1" (sites Row 1))
            (place "Hoplite2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1)
            (place "Knight1" {"B1" "G1"})
            (place "Bishop1" {"C1" "F1"})
            (place "Queen1" coord:"D1")
            (place "King1" coord:"E1" state:1) 
            (place "Lieutenant2" {"A8" "H8"})
            (place "Warlord2" {"G8"})
            (place "General2" {"B8"})
            (place "King2" {"C8" "F8"} state:0)
            (place "Captain2" {"D8" "E8"})
            }
        )
        
        (play 
            (if "SameTurn"
                (if (= (mover) (id P1))
                    (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                    (if (= 1 ("CountSpartanKings"))
                        (move Promote (last To) (piece {"King" "Captain" "General" "Warlord" "Lieutenant"}) Mover)
                        (move Promote (last To) (piece {"Captain" "General" "Warlord" "Lieutenant"}) Mover)
                    )
                )	
                (do 
                    (or 
                        (forEach Piece)
                        (if (and {
                                "KingInTheInitialPlace" 
                                ("HasNeverMoved" "KingPosition")
                                (not ("IsInCheck" "King" Mover)) 
                            })
                            (or
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("DoCastle" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("DoCastle" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInOmnicheck" Mover))
                )
            )
        )
        
        (end
            {
            (if (and 
                    ("IsInOmnicheck" Next)
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw)) 
            }
        )
    )
)

