(define "NextCannotMove"
    (not (can Move (do (or ("PlaceAPiece" Next Mover) (forEach Piece Next)) ifAfterwards:(not ("IsInCheck" "Osho" Next (or ("PlaceAPiece" Mover Next) (forEach Piece)))))))
)

(define "CapturePiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (add 
                (piece (mapEntry "Captured" (what at:(to)))) 
                (to (mapEntry "Where" (what at:(to))))
            )
        )
    )
)

(define "InPromotionZone"
    (is In #1 (sites Mover "Promotion"))	
)

(define "Promote"
    (move Promote (last To) (piece (mapEntry "Promoted" (what at:(last To)))))	
)

(define "ForcePromote"
    (then 
        (if 
            ("InPromotionZone" (last To)) 
            "Promote"
        )
    )
)

(define "CanPromote"
    (then 
        (if 
            (or ("InPromotionZone" (last To)) ("InPromotionZone" (last From))) 
            (moveAgain) 
        ) 
    )
)

(define "SlideMove"
    (move Slide 
        #1 
        (to if:("IsEnemyAt" (to)) "CapturePiece")
        #2 
    ) 	
)

(define "StepMove"
    (move Step 
        #1
        (to if:(not ("IsFriendAt" (to))) "CapturePiece") 
        #2 
    ) 	
)

(define "PlaceAPiece"
    (or {
        (move 
            (from (sites Occupied by:#1 container:"Hand" components:{"Kakugyo" "Ginsho" "Hisha" "Kinsho"})) 
            (to (sites Empty))
        ) 
        (do 
            (move 
                (from (sites Occupied by:#1 container:"Hand" component:"Fuhyo")) 
                (to (difference (sites Empty) (sites #1 "Promotion"))) 
            ) 
            ifAfterwards:(not ("IsInCheck" "Osho" #2 (forEach Piece #1)))
        )
    }) 	
)

(define "CorrectColumn"
    (= (+ 1 (column of:(last To))) (count Pips))
)

(game "Dice Shogi" 
    ("TwoPlayersNorthSouth") 
    
    (equipment { 
        (board (square 5))
        
        (piece "Osho" Each ("StepMove"))
        
        (piece "Fuhyo" Each ("StepMove" Forward "ForcePromote"))
        
        (piece "Ginsho" Each ("StepMove" (directions {Forward BL BR FL FR}) "CanPromote"))
        
        (piece "Hisha" Each ("SlideMove" Orthogonal "CanPromote"))
        
        (piece "Kakugyo" Each ("SlideMove" Diagonal "CanPromote"))
        
        ("ShogiGold" "Kinsho" "CapturePiece")
        
        ("ShogiGold" "Tokin" "CapturePiece")
        
        ("ShogiGold" "Narigin" "CapturePiece")
        
        (piece "Ryuo" Each (or ("SlideMove" Orthogonal) ("StepMove" Diagonal)))
        
        (piece "Ryuma" Each (or ("SlideMove" Diagonal) ("StepMove" Orthogonal)))
        
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
        (map "Where" { 
            (pair (id "Fuhyo" P1) (handSite P2)) (pair (id "Fuhyo" P2) (handSite P1)) 
            (pair (id "Ginsho" P1) (handSite P2 1)) (pair (id "Ginsho" P2) (handSite P1 1)) 
            (pair (id "Hisha" P1) (handSite P2 2)) (pair (id "Hisha" P2) (handSite P1 2)) 
            (pair (id "Kakugyo" P1) (handSite P2 3)) (pair (id "Kakugyo" P2) (handSite P1 3)) 
            (pair (id "Kinsho" P1) (handSite P2 4)) (pair (id "Kinsho" P2) (handSite P1 4)) 
            (pair (id "Tokin" P1) (handSite P2)) (pair (id "Tokin" P2) (handSite P1)) 
            (pair (id "Narigin" P1) (handSite P2 1)) (pair (id "Narigin" P2) (handSite P1 1)) 
            (pair (id "Ryuo" P1) (handSite P2 2)) (pair (id "Ryuo" P2) (handSite P1 2)) 
            (pair (id "Ryuma" P1) (handSite P2 3)) (pair (id "Ryuma" P2) (handSite P1 3)) 
        })
        (map "Captured" { 
            (pair (id "Fuhyo" P1) (id "Fuhyo" P2)) (pair (id "Fuhyo" P2) (id "Fuhyo" P1)) 
            (pair (id "Ginsho" P1) (id "Ginsho" P2)) (pair (id "Ginsho" P2) (id "Ginsho" P1)) 
            (pair (id "Hisha" P1) (id "Hisha" P2)) (pair (id "Hisha" P2) (id "Hisha" P1)) 
            (pair (id "Kakugyo" P1) (id "Kakugyo" P2)) (pair (id "Kakugyo" P2) (id "Kakugyo" P1)) 
            (pair (id "Kinsho" P1) (id "Kinsho" P2)) (pair (id "Kinsho" P2) (id "Kinsho" P1)) 
            (pair (id "Tokin" P1) (id "Fuhyo" P2)) (pair (id "Tokin" P2) (id "Fuhyo" P1)) 
            (pair (id "Narigin" P1) (id "Ginsho" P2)) (pair (id "Narigin" P2) (id "Ginsho" P1)) 
            (pair (id "Ryuo" P1) (id "Hisha" P2)) (pair (id "Ryuo" P2) (id "Hisha" P1)) 
            (pair (id "Ryuma" P1) (id "Kakugyo" P2)) (pair (id "Ryuma" P2) (id "Kakugyo" P1)) 
        })
        (map "Promoted" { 
            (pair (id "Fuhyo" P1) (id "Tokin" P1)) (pair (id "Fuhyo" P2) (id "Tokin" P2)) 
            (pair (id "Ginsho" P1) (id "Narigin" P1)) (pair (id "Ginsho" P2) (id "Narigin" P2)) 
            (pair (id "Hisha" P1) (id "Ryuo" P1)) (pair (id "Hisha" P2) (id "Ryuo" P2)) 
            (pair (id "Kakugyo" P1) (id "Ryuma" P1)) (pair (id "Kakugyo" P2) (id "Ryuma" P2)) 
        })
        
        (hand Each size:5)
        (dice num:1)
    })
    
    (rules 
        (start { 
            (place "Osho1" coord:"A1") (place "Kinsho1" coord:"B1") (place "Ginsho1" coord:"C1") (place "Kakugyo1" coord:"D1") (place "Hisha1" coord:"E1") (place "Fuhyo1" coord:"A2")
            (place "Osho2" coord:"E5") (place "Kinsho2" coord:"D5") (place "Ginsho2" coord:"C5") (place "Kakugyo2" coord:"B5") (place "Hisha2" coord:"A5") (place "Fuhyo2" coord:"E4")
        })
        
        (play
            (if ("SameTurn")
                (or
                    ("Promote")
                    (move Pass)
                )
                ("RollMove"
                    (do
                        (if (!= 6 (count Pips))
                            (or {
                                (if (can Move 
                                        (do 
                                            (or ("PlaceAPiece" Mover Next) (forEach Piece))
                                            ifAfterwards:(and 
                                                (not ("IsInCheck" "Osho" Mover (forEach Piece Next))) 
                                                ("CorrectColumn")
                                            )
                                        )
                                    )
                                    (do 
                                        (or ("PlaceAPiece" Mover Next) (forEach Piece))
                                        ifAfterwards:("CorrectColumn")
                                    )
                                    (or ("PlaceAPiece" Mover Next) (forEach Piece))
                                )
                            })
                            (or ("PlaceAPiece" Mover Next) (forEach Piece))
                        )
                        ifAfterwards:(not ("IsInCheck" "Osho" Mover (forEach Piece Next)))
                    )
                )
            )
        )
        
        (end {
            (if (and ("IsInCheck" "Osho" Next (or ("PlaceAPiece" Mover Next) (forEach Piece))) ("NextCannotMove")) (result Mover Win)) 
            ("BlockWin")
        })
    )
)

