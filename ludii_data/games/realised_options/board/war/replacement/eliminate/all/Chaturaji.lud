(define "CaptureToPieceAndAddScore"
    (apply
        (if (is Occupied (to))
            (and 
                (addScore Mover (value Piece at:(to))) 
                (remove (to)) 
            )
        )
    ) 
)

(define "CaptureForwardDiagonal"
    (move Step 
        (directions {FR FL}) 
        (to 
            if:("IsEnemyAt" (to)) 
            "CaptureToPieceAndAddScore"
        )
    )
)

(define "PromoteTo" 
    (if ("IsOffBoard" (where #1 Mover)) (move Promote (last To) (piece #1) Mover (then #2)))
)

(define "PlayAPiece"
    (forEach Die
        (if (= (pips) 5)
            (or (forEach Piece "Pawn") (forEach Piece "King_noCross"))
            (if (= (pips) 4)
                (forEach Piece "Elephant")
                (if (= (pips) 3)
                    (forEach Piece "Knight")
                    (if (= (pips) 2)
                        (forEach Piece "Boat")
                    )
                )
            )
        )
    )
)

(game "Chaturaji" 
    (players {(player N) (player W) (player S) (player E)}) 
    (equipment { 
        (board (square 8))
        (dice d:4 from:2 num:1)
        
        (piece "Pawn" Each
            (or 
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                (then
                    (if (is In (last To) (sites Mover "Promotion"))
                        (and (moveAgain) (set Pending))
                    )
                )
            )
        )
        (piece "Boat" Each
            (move Hop 
                Diagonal 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPieceAndAddScore"
                )
            )
        )
        (piece "Knight" Each
            (move Leap 
                "KnightWalk" 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPieceAndAddScore"
                ) 
            )
        )
        (piece "Elephant" Each
            (move Slide 
                Orthogonal 
                (between if:(is Empty (between))) 
                (to 
                    if:("IsEnemyAt" (to)) 
                    "CaptureToPieceAndAddScore" 
                )
            )
        ) 
        (piece "King_noCross" Each
            (move Step 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    "CaptureToPieceAndAddScore" 
                )
            )
        )
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Left))
        (regions "Promotion" P3 (sites Bottom))
        (regions "Promotion" P4 (sites Right))
    }) 
    (rules 
        (start { 
            (place "Pawn1" {"A2" "B2" "C2" "D2"} value:1)
            (place "Pawn2" {"G1" "G2" "G3" "G4"} value:1)
            (place "Pawn3" {"H7" "G7" "E7" "F7"} value:1)
            (place "Pawn4" {"B5" "B6" "B7" "B8"} value:1)
            (place "Boat1" coord:"A1" value:2) (place "Boat2" coord:"H1" value:2) (place "Boat3" coord:"H8" value:2) (place "Boat4" coord:"A8" value:2) 
            (place "Knight1" coord:"B1" value:3) (place "Knight2" coord:"H2" value:3) (place "Knight3" coord:"G8" value:3) (place "Knight4" coord:"A7" value:3) 
            (place "Elephant1" coord:"C1" value:4) (place "Elephant2" coord:"H3" value:4) (place "Elephant3" coord:"F8" value:4) (place "Elephant4" coord:"A6" value:4) 
            (place "King_noCross1" coord:"D1" value:5) (place "King_noCross2" coord:"H4" value:5) (place "King_noCross3" coord:"E8" value:5) (place "King_noCross4" coord:"A5" value:5) 
        })
        
        (play 
            ("RollEachNewTurnMove"
                (if (and ("SameTurn") (is Pending))
                    (or {
                        ("PromoteTo" "Boat" (set Value at:(last To) 2))
                        ("PromoteTo" "Knight" (set Value at:(last To) 3))
                        ("PromoteTo" "Elephant" (set Value at:(last To) 4))
                        ("PromoteTo" "King_noCross" (set Value at:(last To) 5))
                    })
                    "PlayAPiece"
                    (then 
                        (if 
                            (can Move "PlayAPiece")
                            (moveAgain)
                        )
                    )
                )
            )
        )
        
        (end
            (if (= 
                    (count Pieces Mover) 
                    (- (count Pieces All) 1) 
                )
                (byScore)
            )
        )
    )
)

