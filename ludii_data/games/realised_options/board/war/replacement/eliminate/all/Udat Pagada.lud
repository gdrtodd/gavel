(define "ThrowValue" (mapEntry "ThrowDiceValue" (count Pips)))
(define "DieNotUsed" (!= (pips) 0))

(game "Udat Pagada" 
    (players 2) 
    (equipment { 
        (board 
            (add
                (add
                    (hole
                        (merge 
                            (shift 0 8 (rectangle 4 20)) 
                            (shift 8 0 (rectangle 20 4))
                        )
                        (poly {{8 8} {8 11} {11 11} {11 8}})
                    )
                    cells:{ { 8 28 48 68 69 70 71 51 31 11 10 9 } }
                )
                vertices:{{9.5 4} {15 4} {15 9.5} {15 15} {9.5 15} {4 15} {4 9.5} {4 4}}
            )
            {
            (track "Track" {144..151} loop:True)
            }
            use:Vertex
        )
        ("StickDice" 7)
        (piece "Pawn" Each
            (move 
                (from (from) level:(level))
                (to ("NextSiteOnTrack" ("ThrowValue") from:(from) "Track")
                    (apply 
                        (if ("IsEnemyAt" (to))
                            (forEach Level (to) FromTop
                                (remove (to) level:(level))
                            )
                        )
                    )
                )
            )		
        )
        (hand Each)
        (map "Throw" {(pair 0 7) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 36) (pair 7 14)})
        (map "Entry" {(pair P1 144) (pair P2 148)})
    }) 
    (rules 
        (start {
            (place Stack "Pawn1" (handSite P1) count:4)
            (place Stack "Pawn2" (handSite P2) count:4)
        })
        
        (play 
            ("RollMove"
                (or
                    (if (is Occupied (handSite Mover))
                        (move 
                            (from (handSite Mover))
                            (to ("NextSiteOnTrack" (- ("ThrowValue") 1) from:(mapEntry "Entry" Mover) "Track")
                                (apply 
                                    (if ("IsEnemyAt" (to))
                                        (forEach Level (to) FromTop
                                            (remove (to) level:(level))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (forEach Piece)
                )
            )
        )
        
        (end ("CaptureAll" Next))
    )
)

