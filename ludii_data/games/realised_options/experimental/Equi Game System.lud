(define "NonpriorityMoves" 
    (or {
        (if
            ("SameTurn")
            (or
                ("PlaceDisc")  
                ("PlaceHex")
            )
            (or
                {
                
                ("PlaceHex")
                ("PlaceDisc")
                ("DiscStep")
                }
        ))
        #1
        #2
    })
)

(define "PriorityHopsOnly" 
    (priority
        ("NonMoverHops")
        ("NonpriorityMoves" ~ ~)
    )
)

(define "PriorityHops" 
    (priority
        ("NonMoverHops")
        ("NonpriorityMoves" ("MoverHops") ~)
    )
) 

(define "MoverHops"
    ("HopChange" "Yield" "MoverSites")
)

(define "NonMoverHops"
    ("HopChange" "Yield" "NonMoverSites")
)

(define "HopChange" 
    (if 
        ("SameTurn")
        (if (is Pending)
            (#1 (from (last To)) #2)
        )
        (do (forget Value All) 
            next:(#1 (from) #2)
        )
    )
)

(define "MoverSites"
    (sites Occupied by:Mover)
)

(define "NonMoverSites"
    (difference 
        (sites Occupied by:All)
        (sites Occupied by:Mover)
))

(define "ValueDisc" -3)
(define "ValueHex" 1)

(define "TurnPass"
    (do 
        (if
            (= 0 (var "FirstNoPlace"))
            (set Var "FirstNoPlace" (mover)) 
            (if
                (= (next) (var "FirstNoPlace"))
                (propose "End")
            )
        )
        next:(move Pass)
    )
)
(define "Yield" 
    (or
        ("GeneralHop" #1 #2 "Hex" "Hex" "ValueHex" "ValueHex")
        ("GeneralHop" #1 #2 "Disc" "Hex" "ValueDisc" "ValueHex")
    )
)

(define "NoMorph" 
    (or
        ("GeneralHop" #1 #2 "Hex" "Hex" "ValueHex" "ValueHex")
        ("GeneralHop" #1 #2 "Disc" "Disc" "ValueDisc" "ValueDisc")
    )
)

(define "Morph" 
    (or
        ("GeneralHop" #1 #2 "Disc" "Hex" "ValueDisc" "ValueHex")
        ("GeneralHop" #1 #2 "Hex" "Disc" "ValueHex" "ValueDisc")
    )
)

(define "GeneralHop" 
    (forEach Piece "Disc"
        (move Hop #1 Orthogonal 
            (between 
                if:(is 
                    In 
                    (between)
                    (difference 
                        (intersection
                            #2
                            (sites Occupied by:All component:#3) 
                        )
                        (sites (values Remembered))
                    )
                )
                (apply 
                    (and 
                        (addScore (player (who at:(between))) (- #5))
                        (set Pending (between))
                    )
                )
            )
            (to if:(is Empty (to)))
        )
        (then
            (and {
                (remember Value (value Pending))
                (remove (value Pending))
                (add (piece (id #4 Mover)) (to (value Pending)))
                (addScore Mover #6)
                }
                (then
                    (and
                        (set Pending)
                        (moveAgain)
                    )
                )
            )
        )
    )
) 

(define "DiscStep"
    (forEach Piece "Disc"
        (move 
            (from (from)) 
            (to (sites Around (from) Orthogonal ) if:(is Empty (to))) 
            (then (moveAgain))
        )
    )
)

(define "PlaceHex"
    (move 
        Add 
        (piece (id "Hex" Mover))
        (to (forEach (sites Empty) if:"HexSite")) 
        (then 
            (and
                (addScore Mover "ValueHex")
                (set Var "FirstNoPlace" 0)
            )
        )
    )
)

(define "PlaceDisc" 
    (move Add 
        (piece (id "Disc" Mover))
        (to (forEach (sites Empty) if:"DiscSite"))
        (then 
            (and
                (addScore Mover "ValueDisc")
                (set Var "FirstNoPlace" 0)
            )
        )
    )
)

(define "NoSuicide" 
    (difference 
        (sites Empty) 
        (sites To
            (forEach 
                Site 
                (intersection
                    "NonMoverSites"
                    (sites Occupied by:All component:"Disc")
                )
                (select 
                    (from 
                        (sites Distance Orthogonal from:(site) (exact 2))
                        if:(is Empty (from))
                    )
                    (to
                        (sites Between Orthogonal from:(from) to:(site))
                    )
                )
            )
        )
    )
)

(define "HexSite" (= ("NearestPieces" "MoverSites") ("NearestPieces" "NonMoverSites")))
(define "DiscSite" (!= ("NearestPieces" "MoverSites") ("NearestPieces" "NonMoverSites")))

(define "NearestPieces" 
    (count 
        Sites
        in:(intersection {
            (#1)
            (sites Direction from:(site) Orthogonal  distance:1)
            (sites LineOfSight Piece at:(site) Orthogonal) 
        })
    )
)

(define "Dist2NearestLoSEnemy" 
    (min
        (results
            from:(site)
            to:(forEach 
                (sites LineOfSight Piece at:(from) Orthogonal) 
                if:(or (is Mover (who at:(site))) (is In (site) "NonMoverSites"))
            )
            (count Steps Orthogonal (from) (to))
        )
    )
)

(define "Dist2NearestLoS"
    (min
        (results
            from:(site)
            to:(sites LineOfSight Piece at:(from) Orthogonal) 
            (count Steps Orthogonal (from) (to))
        )
    )
)

(game "Equi Game System"
    (players 2)
    (equipment {
        (board (tri {3 4 3 4 3}) use:Vertex)
        (piece "Disc" Each)
        (piece "Hex" Each)
    })
    (rules 
        (start (set Score Each 0)) 
        (play
            ("PriorityHops")
        )
        (end 
            {
            (if
                (and 
                    {
                    (no Moves Mover)
                    (= 1 (var "FirstNoPlace")) 
                    (= (score Mover) (score Next))
                    }
                )
                (result P1 Win)
            )
            
            (if
                (and 
                    {
                    (no Moves Mover)
                    (= 2 (var "FirstNoPlace")) 
                    (= (score Mover) (score Next))
                    }
                )
                (result P2 Win)
            )
            
            (if
                (and
                    (no Moves Mover)
                    (!= (score Mover) (score Next))
                )
                (byScore)
            )
            
            }
            
        )
    )
)

