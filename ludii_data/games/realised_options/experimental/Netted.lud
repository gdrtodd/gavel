
(define "D" 
    (if 
        (or 
            (= #1 (ahead Cell #2 W))
            (= #1 (ahead Cell #2 E))
        )
        0
        (if 
            (or 
                (= #1 (ahead Cell #2 WSW))
                (= #1 (ahead Cell #2 ENE))
            )
            1
            (if 
                (or 
                    (= #1 (ahead Cell #2 SSW))
                    (= #1 (ahead Cell #2 NNE))
                )
                2
                (if 
                    (or 
                        (= #1 (ahead Cell #2 S))
                        (= #1 (ahead Cell #2 N))
                    )
                    3
                    (if 
                        (or 
                            (= #1 (ahead Cell #2 SSE))
                            (= #1 (ahead Cell #2 NNW))
                        )
                        4
                        5
                    )
                )
            )
        )
    )
)

(define "HalfWayEdge" 
    (regionSite
        (intersection
            (sites Incident Edge of:Cell at:(regionSite ("SharedCells" #1 #2) index:0))
            (sites Incident Edge of:Cell at:(regionSite ("SharedCells" #1 #2) index:1))
        )
        index:0
    )
)

(define "SharedCells" 
    (intersection 
        (sites Around Cell #1 Orthogonal) 
        (sites Around Cell #2 Orthogonal)
    )
)

(define "AddDiagonalMarkers"
    (forEach Site
        (sites Around Cell
            (var "SitePlaced")
            Diagonal
            if:(and
                (= (id "Ball" Mover) (what at:(to)))
                (not
                    (is Within
                        (id "Ball" Mover) 
                        in:(intersection 
                            (sites Around Cell (var "SitePlaced") Orthogonal) 
                            (sites Around Cell (to) Orthogonal)
                        )
                    )
                )
            )
        )
        (and
            (add
                (piece (id "I" Mover))
                (to Edge ("HalfWayEdge" (var "SitePlaced") (site)))
                stack:True
            ) 
            (set State Edge at:("HalfWayEdge" (var "SitePlaced") (site)) ("D" (var "SitePlaced") (site)))
        )
    )
)

(define "RemoveExcessDiagonals"
    (forEach Site 
        (intersection 
            (sites Incident Edge of:Cell at:(var "SitePlaced"))
            (sites Occupied by:Mover component:"I" on:Edge)
        )
        (remove Edge (site))
    )
)

(define "DiagonalBoundary" 
    (= 2 
        (count Sites Cell
            in:(intersection {
                (sites Occupied by:#1 component:"Ball" on:Cell) 
                (sites Around Cell (from) Orthogonal) 
                (sites Around Cell (to) Orthogonal)
            })
        )
    )
)

(define "NotBlockedBy" 
    (and {
        (= -1 (where Level (id "Ball" #1) Cell at:(to)))
        (= -1 (where Level (id "I" #1) Cell at:(to)))
        (not ("DiagonalBoundary" #1))
    })
)

(define "IsNotBlockedByBetween" 
    (!= Infinity
        (count Steps
            (step Orthogonal 
                (to
                    if:("NotBlockedBy" #1)
                    
                )
            )
            #2
            #3
        )
    )
)

(define "Liberties"
    (max 0
        (min
            2
            (-
                (+
                    (if (is In #3 (sites Outer)) 1 0)
                    (count Sites
                        in:(intersection
                            (sites Outer)
                            (sites Distance
                                (step Orthogonal (to if:("NotBlockedBy" #2)))
                                from:#3
                                (min 1)
                            )
                        )
                    )
                )
                (+
                    (if (= (id "Ball" #1) (what at:#3)) 1 0)
                    (count Pieces #1 "Ball"
                        in:(sites Distance
                            (step Orthogonal (to if:("NotBlockedBy" #2)))
                            from:#3
                            (min 1)
                        )
                    )
                )
            )
        )
    )
)

(define "UpdateListOrStatePlayerBlocker" 
    (if 
        (= (id "Ball" #3) (what at:(site)))
        (and
            (set State at:(site) #2)
            (if 
                (= 2 #2)
                (trigger "Enmeshed" Next)
        ))
        (if 
            (or
                (> 0 (where Level (id "I" #4) Cell at:(site))) 
                (>= 1 ("Liberties" #3 #4 (site)))
            )
            (remember Value #1 (site) unique:True)
        )
    )
)

(define "UpdateListStateAroundPlayerBlocker"
    (if 
        (= 0 #2) 
        
        (and {
            (remember Value "Update" #2)
            (forEach Site
                (sites Occupied by:#4 component:"Ball") 
                (if 
                    (and
                        ("IsNotBlockedByBetween" #5
                            (site)
                            #3
                        )
                        (not (= (state at:(site)) #2))
                    )
                    (set State at:(site) #2)
                )
            )
            (forEach Site
                (sites (values Remembered #1))
                (apply
                    if:(and
                        ("IsNotBlockedByBetween" #5
                            (site)
                            #3
                        )
                        (or
                            (>= 0 (where Level (id "I" #5) Cell at:(site)))
                            (< 1 ("Liberties" #4 #5 (site)))
                        )
                    )
                    (forget Value #1 (site))
                )
            )
        })
        
        (and
            
            (forEach Site
                (sites To (select (from #3)))
                ("UpdateListOrStatePlayerBlocker" #1 #2 #4 #5)
            )
            
            (forEach Site
                (difference
                    (difference
                        (sites Board)
                        (sites Occupied by:#5 component:"Ball")
                    )
                    (sites (values Remembered #1))
                )
                (if
                    ("IsNotBlockedByBetween" #5 (site) #3)
                    ("UpdateListOrStatePlayerBlocker" #1 #2 #4 #5)
                )
            )
            
        )
    )
)

(define "UpdateOpponentsState"
    (forEach Value
        (array
            (sites Around
                (var "SitePlaced")
                All 
        ))
        (if
            (and {
                (not (= (id "Ball" Mover) (what at:(value))))
                (not (is In (value) (values Remembered #1)))
                (= (- 2 #2) ("Liberties" Next Mover (value)))
            }) 
            ("UpdateListStateAroundPlayerBlocker" #1 #2 (value) Next Mover)
        )
    )
)

(define "AddOrthogonalMarkers" 
    (custodial
        (from (var "SitePlaced")) 
        Orthogonal 
        (between
            (exact 1)
            if:(and {
                (!= (id "Ball" Mover) (what at:(between)))
                (!= (id "Ball" Next) (what at:(between)))
                (= 2 
                    (count Sites Cell
                        in:(intersection
                            (sites Around (between) Orthogonal)
                            (sites Occupied by:Mover component:"Ball")
                        )
                    )
                )
            })
            (apply 
                (and
                    (add 
                        (piece (id "I" Mover))
                        (to
                            (between)
                        )
                        stack:True
                    )
                    (set State Cell at:(between) level:(level) ("D" (var "SitePlaced") (between)))
                )
            )
        )
        (to if:(= (id "Ball" Mover) (what at:(to))))
    )
)

(define "RemoveExcessOrthogonals"
    (forEach Site 
        (sites Around Cell (var "SitePlaced") Orthogonal
            if:(and
                (!= -1 (where Level (id "I" Mover) Cell at:(to))) 
                (!= 2 
                    (count Sites Cell
                        in:(intersection
                            (sites Around Cell (to) Orthogonal)
                            (sites Occupied by:Mover component:"Ball" on:Cell)
                        )
                    )
                )
            )
        )
        (and
            (remove Cell (site) level:(where Level (id "I" Mover) Cell at:(site)))
            (if 
                (= 2 ("Liberties" Next Mover (site)))
                (forget Value #1 (site))
                (remember Value #1 (site) unique:True)
            )
        )
    )
)

(define "AddAtEmptyExcept" 
    (move Add
        (piece (id "Ball" Mover))
        (to 
            (difference 
                (sites Empty)
                (sites (values Remembered #1))
            )
            (apply
                (set Var "SitePlaced" (to))
            )
        )
        stack:True
        (then
            (set State at:(var "SitePlaced") (- 2 ("Liberties" Mover Next (var "SitePlaced")))
                (then
                    (and
                        (if
                            (= 1 (state at:(var "SitePlaced")))
                            ("UpdateListStateAroundPlayerBlocker" #1 1 (var "SitePlaced") Mover Next)
                        )
                        ("AddOrthogonalMarkers")
                    )
                )
            )
        )
    )
)

(define "AddAtMoverMarkerExcept"
    (move Add
        (piece (id "Ball" Mover))
        (to 
            (difference 
                (sites Board)
                (sites (values Remembered #1))
            )
            if:(and {
                (<= 0 (where Level (id "I" Mover) Cell at:(to)))
                (> 0 (where Level (id "I" Next) Cell at:(to)))
                (> 4 (count Pieces Next "Ball" in:(sites Around (to) Orthogonal))) 
            })
            (apply
                (and
                    (remove (to) level:(where Level (id "I" Mover) Cell at:(to)))
                    (set Var "SitePlaced" (to)) 
                )
            )
        )
        stack:True
        (then
            (set State at:(var "SitePlaced") (- 2 ("Liberties" Mover Next (var "SitePlaced")))
                (then
                    (and
                        (if
                            (= 1 (state at:(var "SitePlaced")))
                            ("UpdateListStateAroundPlayerBlocker" #1 1 (var "SitePlaced") Mover Next)
                        )
                        ("AddOrthogonalMarkers")
                    )
                )
            )
        )
    )
)

(define "AddAtOpponentMarkerExcept"
    (move Add
        (piece (id "Ball" Mover))
        (to 
            (difference 
                (sites Board)
                (sites (values Remembered #1))
            )
            if:(and
                (<= 0 (where Level (id "I" Next) Cell at:(to)))
                (!= 0 ("Liberties" Mover Next (to))) 
            )
            (apply
                (and {
                    (apply (set Var "SitePlaced" (to))) 
                    (remove (to) level:(where Level (id "I" Mover) Cell at:(to)))
                    (remove (to) level:(where Level (id "I" Next) Cell at:(to)))
                })
            )
        )
        stack:True
        (then 
            (set State at:(var "SitePlaced") (- 2 ("Liberties" Mover Next (var "SitePlaced")))
                (then
                    (and
                        ("UpdateListStateAroundPlayerBlocker"
                            #1 
                            (state at:(var "SitePlaced"))
                            (var "SitePlaced")
                            Mover Next
                        )
                        ("AddOrthogonalMarkers")
                    )
                )
            )
        )
    )
)

(define "UpdateStateNext" 
    (if 
        (= 1 (mover))
        ("UpdateOpponentsState" "SuicideP2" #1)
        ("UpdateOpponentsState" "SuicideP1" #1)
))

(define "AddExcept" 
    (or {
        ("AddAtEmptyExcept" #1)
        ("AddAtMoverMarkerExcept" #1)
        ("AddAtOpponentMarkerExcept" #1)
    })
)

(game "Netted"
    (players 2)
    (equipment {
        "BoardUsed"
        (piece "Ball" P1 maxState:3)
        (piece "Ball" P2 maxState:3)
        (piece "I" P1 maxState:6)
        (piece "I" P2 maxState:6)
    })
    (rules
        (play
            (if 
                (= 1 (mover))
                ("AddExcept" "SuicideP1")
                ("AddExcept" "SuicideP2")
                (then
                    (and { 
                        (if 
                            (= 1 (mover))
                            ("RemoveExcessOrthogonals" "SuicideP2")
                            ("RemoveExcessOrthogonals" "SuicideP1")
                        )
                        ("UpdateStateNext" 1)
                        ("UpdateStateNext" 2)
                        ("AddDiagonalMarkers")
                        ("RemoveExcessDiagonals")
                    })
                )
            )
        )
        (end 
            (if 
                (or {
                    (is Triggered "Enmeshed" Mover)
                    (is Triggered "Enmeshed" Next)
                    (no Moves Mover)
                })
                (if  
                    (is Triggered "Enmeshed" Next)
                    (result Mover Win)
                )
                (result Mover Loss)
            )
        )
    )
)

(define "BoardUsed" "Hex2Limp")

(define "HexLimp" (board (hex Limping (- 3 1)))) 
(define "Hex2Limp" (board (hex (- 3 1) (+ 3 1)))) 
(define "HexCell" (board (hex Hexagon 3))) 

(define "ColourBackground" (colour Cream)) 

