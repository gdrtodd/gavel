
(define "Corner" 
    (intersection
        (sites Direction from:#1 #2)
        (sites Direction from:#1 #3)
))

(define "HexBetweenSites"
    (union
        {
        ("Corner" #1 NNW SSE) 
        ("Corner" #1 NNE SSW) 
        ("Corner" #1 E W) 
        }
))

(define "HexHullSites"
    (union
        {
        ("Corner" #1 NNW E) 
        ("Corner" #1 NNE SSE) 
        ("Corner" #1 E SSW) 
        ("Corner" #1 SSE W) 
        ("Corner" #1 SSW NNW) 
        ("Corner" #1 W NNE) 
        }
))

(define "SquareBetweenSites"
    (union
        {
        ("Corner" #1 NE SW) 
        ("Corner" #1 S N) 
        ("Corner" #1 NE SW) 
        ("Corner" #1 E W) 
        }
))

(define "SquareHullSites"
    (union
        {
        ("Corner" #1 N E) 
        ("Corner" #1 S E) 
        ("Corner" #1 S W) 
        ("Corner" #1 N W) 
        }
))

(define "P1Territory"
    (difference
        (union
            (sites (values Remembered "P1")) 
            (difference (sites Occupied by:P1) (handSite P1 0))
        ) 
        (union
            (sites (values Remembered "P2")) 
            (difference (sites Occupied by:P2) (handSite P2 0))
        ) 
))

(define "P2Territory"
    (difference
        (union
            (sites (values Remembered "P2")) 
            (difference (sites Occupied by:P2) (handSite P2 0))
        ) 
        (union
            (sites (values Remembered "P1")) 
            (difference (sites Occupied by:P1) (handSite P1 0))
        ) 
)) 

(define "CommonTerritory"
    (intersection
        (union (sites (values Remembered "P2")) (difference (sites Occupied by:P2) (handSite P2 0)))
        (union (sites (values Remembered "P1")) (difference (sites Occupied by:P1) (handSite P1 0)))
))

(define "PiecewiseCapture" 
    (forEach Group Orthogonal
        if:(is In (to) (intersection (sites Board) (sites Occupied by:Next)))
        (remove (intersection (sites) (sites (values Remembered #2))))
        (then
            (seq
                {
                (forget Value #1 All)
                ("UpdateAllTerritoryOfNext")
                }    
))))

(define "CaptureGroupsWithin" 
    (forEach Group Orthogonal
        if:(is In (to) (intersection (sites Board) (sites Occupied by:Next))) 
        (if
            (no Pieces Next in:(difference (sites) (sites (values Remembered #2))))
            (remove (sites))
            (then (forget Value #1 All))
        )
        
        (then ("UpdateAllTerritoryOfNext"))              
))

(define "UpdateAllTerritoryOfNext"
    (forEach Group Orthogonal
        if:(is In (to) (sites Occupied by:Next))
        (forEach Site ("HexBetweenSites"  (sites))
            (if 
                (= (mover) 1)
                (remember Value "P2" (site) unique:True)
                (remember Value "P1" (site) unique:True)
)))) 

(define "RecordTerritoryOfRevisedGroup"
    (forEach Site ("HexBetweenSites" (sites Group at:(last To) Orthogonal))
        (if 
            (= (mover) 1)
            (remember Value "P1" (site) unique:True)
            (remember Value "P2" (site) unique:True)
))) 

(define "EmptySitesOutsideEnemyTerritoryFor" 
    (difference (sites Empty) (sites (values Remembered #1)))
)

(define "EmptySitesOutsideEnemyTerritory" 
    (if
        (= 1 (mover)) 
        ("EmptySitesOutsideEnemyTerritoryFor" "P2")
        ("EmptySitesOutsideEnemyTerritoryFor" "P1")
))

(define "EmptySitesOutsideFriendlyTerritory" 
    (if
        (= 2 (mover)) 
        ("EmptySitesOutsideEnemyTerritoryFor" "P2")
        ("EmptySitesOutsideEnemyTerritoryFor" "P1")
))
(define "UpdateTotalMoverGroupCount" 
    (set Value at:(handSite Mover 0) (size Array (sizes Group Orthogonal Mover)))
)

(define "UpdateGroupSizeValue4PiecesConnected2Placement"
    (forEach Site 
        (sites Group at:(last To) Orthogonal)
        (set Value at:(site) (count Sites in:(sites Group at:(last To) Orthogonal)))
))

(define "IsNotAnIsolatedPlacement"
    (< 0 (count Pieces Mover in:(sites Around (last To) Orthogonal)))
)

(define "MakeCapture"
    (if 
        (= (mover) 1)
        ("PiecewiseCapture" "P2" "P1")
        ("PiecewiseCapture" "P1" "P2")
))

(define "MakeAnyCaptures"
    (if
        ("IsNotAnIsolatedPlacement")
        (seq
            {
            ("RecordTerritoryOfRevisedGroup")
            ("MakeCapture")
            }
)))

(define "PlayWithoutSizeRestriction"
    (move Add
        (to "EmptySitesOutsideEnemyTerritory" )
        (then "MakeAnyCaptures")
))

(define "Isolated"
    (all Sites
        (sites Around (to) Orthogonal)
        if:(not (is Mover (who at:(site))))
))

(define "SmallestPlayable"
    (min
        (results
            from:(difference (sites Occupied by:Mover) (sites State 1)) 
            to:(from)
            (size Group at:(from) Orthogonal)
        )
))

(define "SmallestGroup" (min (sizes Group Orthogonal Mover)))

(define "NothingLarger"
    (all Sites
        (sites Around (to) Orthogonal if:(is Mover (who at:(to))))
        if:(=
            "SmallestPlayable" 
            (size Group at:(site) Orthogonal)
)))

(define "MergeAny" 
    (not
        (all Sites
            (sites Around (to) Orthogonal if:(is Mover (who at:(to))))
            if:(<
                "SmallestPlayable" 
                (size Group at:(site) Orthogonal)
))))

(define "MarkUnPlayableNextGroups"
    (forEach Group Orthogonal
        if:(is In (to) (sites Occupied by:Next))
        (if
            (< 0
                (size Array
                    (array
                        (intersection
                            (sites Around (sites) Orthogonal if:(is Empty(to)))
                            "EmptySitesOutsideFriendlyTerritory"
            ))))
            (forEach Value (array (sites)) (set State at:(value) 0))
            (forEach Value (array (sites)) (set State at:(value) 1))
)))

(define "CreateNewGroup"
    (move Add
        (to
            "EmptySitesOutsideEnemyTerritory"
            if:("Isolated")
)))

(define "ExtendGroup"
    (move Add
        (to
            "EmptySitesOutsideEnemyTerritory"
            if:"MergeAny"
)))

(define "UpdatePlayableSitesAndGroups"
    (seq
        {
        ("UpdateGroupSizeValue4PiecesConnected2Placement")     
        ("MakeAnyCaptures")
        ("MarkUnPlayableNextGroups")
        
        }
))

(define "IsolatedPiecePriority"
    (priority
        ("CreateNewGroup")
        ("ExtendGroup")
        (then "UpdatePlayableSitesAndGroups")
))

(define "GroupCreationPriority"
    (priority
        (if
            (> 2 (count Groups Orthogonal if:(and (= 0 (state at:(to))) (is Mover (who at:(to))))))
            ("CreateNewGroup")
        )
        (or
            ("CreateNewGroup")
            ("ExtendGroup")
        )
        (then "UpdatePlayableSitesAndGroups")
))

(define "GroupCreationRequirement"
    (if
        (> 2 (count Groups Orthogonal if:(and (= 0 (state at:(to))) (is Mover (who at:(to))))))
        ("CreateNewGroup")
        (or
            ("CreateNewGroup")
            ("ExtendGroup")
        )
        (then "UpdatePlayableSitesAndGroups")
))

(game "The SmallHolder"
    (players 2)
    (equipment
        {
        (board (hex Hexagon 4) use:Cell)
        
        (piece "Disc" Each)
        }
    )
    (rules
        (play
            "GroupCreationRequirement"
        )
        (end 
            "EndNoMoves"
))) 

(define "EndNoMoves"
    (if (no Moves Next) (result Next Loss))
)

