
(define "SwapSites" 
    (intersection (sites Around #1 Adjacent) (sites Around #2 Adjacent))
)

(define "Placement"
    (move Select
        (from #1 if:(> 2 (count Stack at:(from))))
        (to "DiagonalVector"
            if:(and {
                (is In (to) (sites Occupied by:Mover top:True))
                (= 2 (count Sites in:("SwapSites" (to) (from))))
                (or
                    (= 1 (count Sites in:(intersection ("SwapSites" (to) (from)) (sites Occupied by:Mover top:True))))
                    (= 1 (count Sites in:(intersection ("SwapSites" (to) (from)) (sites Occupied by:Next top:True))))
                )
            })
        )
        (then
            (and {
                
                (add
                    (piece (id "Disc" Mover))
                    (to (last From))
                    stack:True
                )
                (forEach Site
                    ("SwapSites" (last To) (last From))
                    (remember Value (site))
                )
            })
        )
    )
)

(define "SwapSite" (arrayValue (values Remembered) index:#1))
(define "SwapPiece" (what at:("SwapSite" #1) level:(topLevel at:("SwapSite" #1))))

(define "MakeSwap"
    (if
        (is Empty ("SwapSite" 1))
        (fromTo (from ("SwapSite" 0)) (to ("SwapSite" 1)))
        (if (is Empty ("SwapSite" 0))
            (fromTo (from ("SwapSite" 1)) (to ("SwapSite" 0)))
            (set Var "Piece1" ("SwapPiece" 1)
                (then
                    (add
                        (piece ("SwapPiece" 0))
                        (to ("SwapSite" 1)
                            (apply (remove (to)))
                        )
                        (then
                            (add
                                (piece (var "Piece1"))
                                (to ("SwapSite" 0)
                                    (apply (remove (to)))
                                )
                            )
                        )
                    )
                )
            )
        )
        (then
            (and {
                ("SetScoreOf" Mover)
                ("SetScoreOf" Next)
                (forget Value All)
                
            })
        )
    )
)

(game "Veloop (Hex)"
    (players 2)
    (equipment {
        (board (renumber (rotate 90 (hex Limping 3))) use:Cell)
        (piece "Disc" Each)
    })
    (rules
        (start {
            (place "Disc1" 10)
            (place "Disc2" 16)
        })
        (play
            (priority
                ("Placement" (sites Empty))
                ("Placement" (sites Occupied by:Next))
                (then 
                    ("MakeSwap")
                )
            )
        )
        (end 
            (if 
                (!= 0 (+ (score P1) (score P2)))
                (byScore)
            )
        )
    )
) 

(define "SetScoreOf"
    (set Score #1 (- 0 (count Sites in:(difference (sites Occupied by:#1) ("UnconfinedStiesOf" #1)))))
) 

(define "UnconfinedStiesOf"
    (forEach
        (sites Board)
        if:(!= Infinity
            (count Steps Adjacent
                (step Adjacent
                    (to if:(or (is Empty (to)) (is #1 (who at:(to)))))
                )
                (site)
                (sites Outer)
)))) 

(define "DiagonalVector" (sites Around (from) Diagonal))

