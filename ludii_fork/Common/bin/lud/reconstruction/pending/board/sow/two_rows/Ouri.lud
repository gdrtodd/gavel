(game "Ouri"
    <Variant>
)

//------------------------------------------------------------------------------

(option "Variant" <Variant> args:{ <variant> }
    {
    (item "Incomplete"
        <
        (players 2) 
        
        (equipment { 
            (mancalaBoard 2 5
                (track "Track" "1,E,N,W" loop:True)
            )
            (piece "Seed" Shared)
            (hand Each)
            (regions P1 (sites Bottom))
            (regions P2 (sites Top))
        }) 
        (rules 
            (start {
                (place "Seed" (handSite P1) count:21)
                (place "Seed" (handSite P2) count:21)
            })
            
            phases:{
            (phase "FirstMove"
                (play
                    (forEach Value min:1 max:(count Cell at:(handSite Mover))
                        (move
                            (from (handSite Mover))
                            (to (sites Mover))
                            count:(value)
                            (then (set Value Mover (count at:(last To))))
                        )
                    )
                )
                (nextPhase "SecondMove")
            )
            (phase "SecondMove"
                (play
                    (forEach Value min:(+ 1 (count at:(last To))) max:(count Cell at:(handSite Mover))
                        (move
                            (from (handSite Mover))
                            (to (sites Mover))
                            count:(value)
                            (then (set Value Mover (count at:(last To))))
                        )
                    )
                )
                (nextPhase "MainMove")
            )
            
            (phase "MainMove"
                (play [#]) // The first player must then place an even number of counters if they first played an odd number, and vice versa. If a player starts with an odd move, they must end with an even move (and vice versa) and use all their remaining counters
                
            )
            }
            
            (end {
                (if (no Moves Next)
                    (result Mover Win)
                )
                [?] // The game ends when a player has used all of their holes, and placed all of their counters in the sixth hole on their side.
                }
            )
        )
        >
        "The incomplete ruleset."
    )
})

//------------------------------------------------------------------------------

(rulesets { 
    
    (ruleset "Ruleset/Historical Information (Incomplete)" {
        "Variant/Incomplete"
    })
    
})

//------------------------------------------------------------------------------

(metadata 
    (info
        {
        (description "Ouri is a board game played by the Mandinka, Wolof, and Fula people of Senegal. It was played on a mancala board, but the game itself as described seems to be more of a placement game. It was typically played by girls outside.")
        (rules "2x6 board with square holes, with two round stores on either end. 21 counters per player. Players alternate turns placing their counters in the holes on their side of the board. The first player places a number of counters on the board. The second player must then place more counters than the first player. The first player must then place an even number of counters if they first played an odd number, and vice versa. If a player starts with an odd move, they must end with an even move (and vice versa) and use all their remaining counters. The game ends when a player has used all of their holes, and placed all of their counters in the sixth hole on their side. If a player cannot place their counters according to the rules of the game, they lose.")
        (source "DLP evidence.")
        (id "1264")
        (version "1.3.10")
        (classification "board/sow/two rows/reconstruction/pending")
        (credit "Eric Piette")
        (origin "This game was played in Senegal, from around 1785 to 1787.")
        }
    )
    
    (graphics {
        (board Style Mancala)
        (show AsHoles {1..10} Square)
    })
    
    (recon {
        (concept "Sow" True)
    })
)

