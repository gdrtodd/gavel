
//(define "ShallowWater" (sites (values Remembered "ShallowWaterRegion")))
//(set RememberValue "ShallowWaterRegion" (sites Random num:5))

//------------------------------------------------------------------------------
// Moves

(define "Move"
    (move 
        (from 
            (from)
            if:(> (state at:(from)) 1)	
        ) 
        (to 
            (sites Distance 
                (step
                    Orthogonal
                    (to 
                        if:(#1)
                    )
                ) 
                from:(from) 
                (range 1 (- #2 1))
            )
            if:(is Empty (to)) 
            (apply 
                (set State at:(from) #3)
            ) 
        )
    )
)

(define "HumanMove"
    (or
        ("Move" (is In (to) "HumanMoveSpots") (state at:(from)) 1)
        ("Move" (is In (to) "RestrictedHumanMoveSpots") 2 1)				// Mountain move, 1 depth
    )
)

(define "VehicleMove"
    (or
        ("Move" (is In (to) "VehicleMoveSpots") (state at:(from)) #1)
        ("Move" (is In (to) "RestrictedVehicleMoveSpots") 2 #1)				// Forest/Shallow water move, 1 depth
    )
)

(define "AircraftMove"
    ("Move" (is In (to) "AircraftMoveSpots") (state at:(from)) 1)
)

(define "BoatMove"
    ("Move" (is In (to) "BoatMoveSpots") (state at:(from)) 1)
)

//------------------------------------------------------------------------------
// Move spots

// Human

(define "ForbiddenSpotsHuman" (sites "DeepWater"))

(define "RestrictedSpotsHuman" (sites "Mountain"))

(define "HumanMoveSpots"
    (difference (union (sites Empty) (sites Occupied by:Friend container:"Board")) (union ("ForbiddenSpotsHuman") ("RestrictedSpotsHuman")))
)

(define "RestrictedHumanMoveSpots"
    (intersection (sites Empty) ("RestrictedSpotsHuman"))
)

// Vehicle

(define "ForbiddenSpotsVehicle" (union (sites "Mountain") (sites "DeepWater")))

(define "RestrictedSpotsVehicle" (union (sites "Forest") (sites "ShallowWater")))

(define "VehicleMoveSpots"
    (difference (union (sites Empty) (sites Occupied by:Friend container:"Board")) (union ("ForbiddenSpotsVehicle") ("RestrictedSpotsVehicle")))
)

(define "RestrictedVehicleMoveSpots"
    (intersection (sites Empty) ("RestrictedSpotsVehicle"))
)

// Aircraft

(define "AircraftMoveSpots"
    (union (sites Empty) (sites Occupied by:Friend container:"Board"))
)

// Boat

(define "ForbiddenSpotsBoat" 
    (union 
        (sites "Mountain") 
        (difference (sites Board) (union (sites "ShallowWater") (sites "DeepWater"))) 
    )
)

(define "BoatMoveSpots"
    (difference 
        (union (sites Empty) (sites Occupied by:Friend container:"Board")) 
        ("ForbiddenSpotsBoat")
    )
)

//------------------------------------------------------------------------------
// Attacks

(define "GroundAttackFrom"
    (is In (from) (sites Occupied by:Mover container:"Board" components:{"Bomber" "Battleship" "Artillery" "Launcher"}))
)

(define "AircraftAttackFrom"
    (is In (from) (sites Occupied by:Mover container:"Board" components:{"Antiair" "Fighter"}))
)

(define "BoatAttackFrom"
    (is In (from) (sites Occupied by:Mover container:"Board" components:{"Submarine"}))
)

(define "GroundAttackCheck"
    (if ("GroundAttackFrom")
        (is In (to) (union (sites Occupied by:Enemy container:"Board" components:{"Soldier" "Motorbike" "Tank" "Speeder" "Shooter" "Launcher" "Antiair" "Battleship" "Artillery" "Base" "Town" "Factory" "Dock" "Airport" "Cruiser" "Submarine"}) (sites Occupied by:Neutral container:"Board")))
        (is In (to) (union (sites Occupied by:Enemy container:"Board") (sites Occupied by:Neutral container:"Board"))) 
    )
)

(define "BoatAttackCheck"
    (if ("BoatAttackFrom")
        (is In (to) (sites Occupied by:Enemy container:"Board" components:{"Submarine" "Battleship" "Cruiser"}))
        (is In (to) (union (sites Occupied by:Enemy container:"Board") (sites Occupied by:Neutral container:"Board"))) 
    )
)

(define "AircraftAttackCheck"
    (if ("AircraftAttackFrom")
        (is In (to) (sites Occupied by:Enemy container:"Board" components:{"Fighter" "Helicopter" "Bomber"}))
        (is In (to) (union (sites Occupied by:Enemy container:"Board") (sites Occupied by:Neutral container:"Board"))) 
    )
)

//------------------------------------------------------------------------------
// Counter attacks

(define "CounterAttackCheckFrom"
    (is In (#1) (sites Occupied #2 components:#3))
)

(define "GroundCounterAttackCheck"
    (if ("CounterAttackCheckFrom" #1 #2 #5)
        (is In (#3) (union (sites Occupied #4 components:{"Soldier" "Motorbike" "Tank" "Speeder" "Shooter" "Launcher" "Antiair" "Battleship" "Artillery" "Base" "Town" "Factory" "Dock" "Airport" "Cruiser" "Submarine"}) (sites Occupied by:Neutral container:"Board")))
        (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral container:"Board"))) 
    )
)

(define "BoatCounterAttackCheck"
    (if ("CounterAttackCheckFrom" #1 #2 #5)
        (is In (#3) (sites Occupied #4 components:{"Submarine" "Battleship" "Cruiser"}))
        (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral container:"Board"))) 
    )
)

(define "AircraftCounterAttackCheck"
    (if ("CounterAttackCheckFrom" #1 #2 #5)
        (is In (#3) (sites Occupied #4 components:{"Fighter" "Helicopter" "Bomber"}))
        (is In (#3) (union (sites Occupied #4) (sites Occupied by:Neutral container:"Board"))) 
    )
)

//------------------------------------------------------------------------------
// Attack Moves

(define "AttackMove"
    (move Select
        (from
            (from)
            if:(> (state at:(from)) 0)
        )
        (to
            (sites Distance Orthogonal from:(from) (range #1 #2))
            if:(and {
                ("GroundAttackCheck")
                ("AircraftAttackCheck")
                ("BoatAttackCheck")
                <FogOfWar:AttackCheck>
            })
        )
        (then 
            (do
                (and 
                    (set Value at:(last To) (max 0 (- (value Piece at:(last To)) ("AttackerDamage" (last From) (last To) False))))
                    (set State at:(last From) 0)
                )
                next:(if (and (= 8 (state at:(last To))) (!= (mover) (who at:(last To)))) 	// state = 8, means its a building
                    // Attacking a building
                    "AttackBuilding"
                    
                    // Attacking a unit
                    (if (= (value Piece at:(last To)) 0)
                        (remove (last To))
                        // counter-attack
                        (if (and {
                                (= 0 (count Sites in:(intersection (sites {(last To) (last From)}) (sites Occupied by:All components:{"Launcher" "Artillery" "Battleship" "Antiair"}))))
                                ("GroundCounterAttackCheck" (last To) by:Enemy (last From) by:Mover {"Bomber" "Battleship" "Artillery" "Launcher"})
                                ("AircraftCounterAttackCheck" (last To) by:Enemy (last From) by:Mover {"Antiair" "Fighter"})
                                ("BoatCounterAttackCheck" (last To) by:Enemy (last From) by:Mover {"Submarine"})
                            })
                            (if (<= (- (value Piece at:(last From)) ("AttackerDamage" (last To) (last From) True)) 0)							
                                (remove (last From))
                                (set Value at:(last From) (- (value Piece at:(last From)) ("AttackerDamage" (last To) (last From) True)))			
                            ) 
                            (set Value at:(last From) (value Piece at:(last From)))
                        )
                    ) 
                )
            )
        )
    )
)

//------------------------------------------------------------------------------
// Attacker Damage

// #1 location of the attacking piece
// #2 site that is being attacked (terrain purposes)
// #3 location of the piece being attacked
// #4 If this is a counter Attack (boolean)
(define "AttackerDamage"
    (/
        (*
            (if (is In (#2) "AircraftSites")
                ("DamageMultiply" (* (value Piece at:(#1)) 4) #1)									// Planes are never affected by terrain									
                (if (and
                        (is In (#2) "HumanSites")
                        (is In (#1) (sites Occupied by:All component:"Shooter"))					// Shooter does double damage against humans
                    )
                    (if (is In (#2) (sites "Forest"))
                        ("DamageMultiply" (* (value Piece at:(#1)) 6) #1)							// (Shooter does 150% damage against humans in forests)
                        (if (is In (#2) (union (sites "ShallowWater") (sites "DeepWater")))
                            ("DamageMultiply" (* (value Piece at:(#1)) 10) #1)						// (Shooter does 250% damage against humans in water)
                            ("DamageMultiply" (* (value Piece at:(#1)) 8) #1)						// (Shooter does 200% damage against humans on land)
                        )
                    )
                    (if (is In (#2) (sites "Forest"))
                        ("DamageMultiply" (* (value Piece at:(#1)) 3) #1)							// 75% damage to units in forests
                        (if (is In (#2) (union (sites "ShallowWater") (sites "DeepWater")))
                            ("DamageMultiply" (* (value Piece at:(#1)) 5) #1)						// 125% damage to units in water
                            ("DamageMultiply" (* (value Piece at:(#1)) 4) #1)						// 100% damage to units on land
                        )
                    )
                )
            )
            ("DoctrineMultiply" #1 #2 #3) 
        ) 
        128000				// (4x4x4x5x100x4)
    )
)

(define "DamageMultiply"
    (max (/ (* #1 (mapEntry "DamageMultiplier" (what at:(#2)))) 100) 1)
)

//------------------------------------------------------------------------------
// Specific attacks

(define "AttackBuilding"
    (if (= (value Piece at:(last To)) 0)
        (and {
            (take Control of:All by:Mover at:(last To))
            (set Value at:(last To) 50)
        })
        (set Value at:(last To) (value Piece at:(last To)))
    ) 
)

(define "CloseCombatAttack"
    ("AttackMove" 1 1)
)

(define "RangedAttack"
    ("AttackMove" #1 #2)
)

//------------------------------------------------------------------------------
// Doctrine damage

// #1 location of the attacking piece
// #2 location of the piece being attacked
// #3 If this is a counter Attack (boolean)
(define "DoctrineMultiply"
    (* {
        (if (is In (#1) "HumanSites") 
            ("GetDoctrineValue" (who at:(#1)) 1) 
            (if (is In (#1) "DirectVehicleSites") 
                ("GetDoctrineValue" (who at:(#1)) 2) 
                (if (is In (#1) "RangedVehicleSites") 
                    ("GetDoctrineValue" (who at:(#1)) 3) 
                    (if (is In (#1) "AircraftSites") 
                        ("GetDoctrineValue" (who at:(#1)) 4) 
                        (if (is In (#1) "BoatSites") 
                            ("GetDoctrineValue" (who at:(#1)) 5) 
                            4
                        )
                    )
                )
            )
        )
        (if (and (= 8 (state at:(#2))) (!= (mover) (who at:(#2)))) 			// state = 8, means its a building
            ("GetDoctrineValue" (who at:(#1)) 6) 5 
        )
        (if (> (who at:(#2)) 0) ("GetDoctrineValue" (who at:(#2)) 8) 4)
        (if #3 ("GetDoctrineValue" (who at:(#1)) 10) ("GetDoctrineValue" (who at:(#1)) 9))
        (value Random (range ("GetDoctrineValue" (who at:(#1)) 11) ("GetDoctrineValue" (who at:(#1)) 12)))
    })
)

//------------------------------------------------------------------------------
// Healing

(define "HealMoveBuilding"
    (move
        Select
        (from
            (from)
            if:(and
                (> (state at:(from)) 0)
                (< (value Piece at:(from)) (mapEntry "MaxHealth" (what at:(from))))
            )
        )
        (to 
            (sites Around (from) Orthogonal
                if:(is In (to) "MoverBuildingSites") 		
            )
        )
        (then 
            (and {
                (set Value at:(last From) 
                    (min 
                        (mapEntry "MaxHealth" (what at:(last From))) 
                        (- (+ (value Piece at:(last From)) (value Piece at:(last To))) 1)
                    )
                )
                (set Value at:(last To) 
                    (max 
                        (- (value Piece at:(last To)) (- (mapEntry "MaxHealth" (what at:(last From))) (value Piece at:(last From))))
                        1
                    )
                )
                (set State at:(last From) 0)
            })
        )
    )
)

(define "HealMoveUnit"
    (move
        Select
        (from
            (from)
            if:(> (state at:(from)) 0)
        )
        (to 
            (sites Around (from) Orthogonal
                if:(and
                    (= (what at:(from)) (what at:(to)))
                    (< (value Piece at:(to)) (mapEntry "MaxHealth" (what at:(to))))
                )		
            )
        )
        (then 
            (and {
                (if (<= (+ (value Piece at:(last To)) (value Piece at:(last From))) (mapEntry "MaxHealth" (what at:(last From))))
                    (and
                        (set Value at:(last To) 
                            (min 
                                (mapEntry "MaxHealth" (what at:(last From))) 
                                (+ (value Piece at:(last From)) (value Piece at:(last To)))
                            )
                        )
                        (remove (last From))
                    )
                    (and
                        (set Value at:(last To) 
                            (min 
                                (mapEntry "MaxHealth" (what at:(last From))) 
                                (- (+ (value Piece at:(last From)) (value Piece at:(last To))) 1)
                            )
                        )
                        (set Value at:(last From) 
                            (max 
                                (- (value Piece at:(last To)) (- (mapEntry "MaxHealth" (what at:(last From))) (value Piece at:(last From))))
                                1
                            )
                        )
                    )
                )
                (set State at:(last From) 0)
                (set State at:(last To) 0)
            })
        )
    )
)

//------------------------------------------------------------------------------
// Buying units

(define "BuyMove"
    (forEach Site (sites Occupied by:Neutral container:1 #1)
        (move 
            (from (site)) 
            (to 
                #2
                if:(and 
                    (is Empty (to))
                    (<= (/ (* (count at:(site)) ("GetDoctrineValue" (mover) 7)) 4) (score Mover))
                )
            )
            copy:True
            (then 
                (and
                    {
                    (addScore 
                        Mover 
                        (- (/ (* (count at:(last From)) ("GetDoctrineValue" (mover) 7)) 4))
                    )	
                    (take Control of:All by:Mover at:(last To))
                    (set State at:(last To) 0)
                    }
                )
            )
        )
    )
)

(define "BuyHumanMove" 
    ("BuyMove" components:{"Soldier" "Motorbike"} 
        (difference 
            (sites Around (sites Occupied by:Mover component:"Town") Orthogonal)
            "ForbiddenSpotsHuman"
        )
    )
)

(define "BuyVehicleMove" 
    ("BuyMove" components:{"Speeder" "Shooter" "Tank" "Antiair" "Launcher" "Artillery"} 
        (difference 
            (sites Around (sites Occupied by:Mover component:"Factory") Orthogonal)
            "ForbiddenSpotsVehicle"
        )
    )
)

(define "BuyAircraftMove" 
    ("BuyMove" components:{"Helicopter" "Fighter" "Bomber"} 
        (sites Around (sites Occupied by:Mover component:"Airport") Orthogonal)
    )
)

(define "BuyBoatMove" 
    ("BuyMove" components:{"Cruiser" "Submarine" "Battleship"} 
        (difference 
            (sites Around (sites Occupied by:Mover component:"Dock") Orthogonal)
            "ForbiddenSpotsBoat"
        )
    )
)

//------------------------------------------------------------------------------
// Sites

(define "MoverBuildingSites"
    (sites Occupied by:Mover container:"Board" components:{"Town" "Dock" "Base" "Factory" "Airport"})
)

(define "EnemyBuildingSites"
    (union (sites Occupied by:Enemy container:"Board" components:{"Town" "Dock" "Base" "Factory" "Airport"}) (sites Occupied by:Neutral container:"Board" components:{"Town" "Dock" "Base" "Factory" "Airport"}))
)

(define "AircraftSites"
    (sites Occupied by:All container:"Board" components:{"Fighter" "Bomber" "Helicopter"})
)

(define "RangedUnitSites"
    (sites Occupied by:All container:"Board" components:{"Launcher" "Artillery" "Battleship" "Antiair"})
)

(define "HumanSites"
    (sites Occupied by:All container:"Board" components:{"Soldier" "Motorbike"})
)

(define "BoatSites"
    (sites Occupied by:All container:"Board" components:{"Submarine" "Cruiser" "Battleship"})
)

(define "DirectVehicleSites"
    (sites Occupied by:All container:"Board" components:{"Tank" "Speeder" "Shooter"})
)

(define "RangedVehicleSites"
    (sites Occupied by:All container:"Board" components:{"Launcher" "Antiair" "Artillery"})
)

//------------------------------------------------------------------------------\
// Player removal

(define "RemovePiecesIfPlayerHasLost" 
    (if 
        (and {
            (is Active #1) 
            (> (count Active) 2)
            (= (where "Base" #1) Off)
        }) 
        (forEach Site (sites Occupied by:#1)
            (if (is In (site) (sites Occupied by:#1 components:{"Town" "Base" "Factory" "Dock" "Airport"}))
                (take Control of:All by:Neutral at:(site))
                (remove (site))
            )
        )
    )
)

//------------------------------------------------------------------------------
// Player doctrines

// 1 = Human Damage
// 2 = Direct Vehicle Damage
// 3 = Indirect Vehicle Damage
// 4 = Aircraft Damage
// 5 = Boat Damage
// 6 = Building Damage (against)
// 7 = Cost Multiplier
// 8 = Damage Taken Multiplier
// 9 = First Attack Multiplier
// 10 = Counter Attack Multiplier
// 11 = Random Damage Minimum
// 12 = Random Damage Maximum

(define "GetDoctrineValue"
    (if (= #1 1)
        (mapEntry <Doctrine1:doctrine> #2)
        (if (= #1 2)
            (mapEntry <Doctrine2:doctrine> #2)
            (if (= #1 3)
                (mapEntry <Doctrine3:doctrine> #2)
                (if (= #1 4)
                    (mapEntry <Doctrine4:doctrine> #2)
                    0
                )
            )
        )
    )
)

//------------------------------------------------------------------------------
// Player maps

(define "TwoPlayerMaps"
    // state (movement)
    (map "Movement" { 
        (pair 1 8) (pair 2 8) (pair 3 8) (pair 4 8) (pair 5 8) (pair 6 8) (pair 7 8) (pair 8 8) (pair 9 8) (pair 10 8) 
        (pair 11 4) (pair 12 4) (pair 13 6) (pair 14 6) 
        (pair 15 7) (pair 16 7) (pair 17 5) (pair 18 5) (pair 19 5) (pair 20 5)
        (pair 21 5) (pair 22 5) (pair 23 4) (pair 24 4) (pair 25 4) (pair 26 4)
        (pair 27 5) (pair 28 5) (pair 29 7) (pair 30 7) (pair 31 6) (pair 32 6)
        (pair 33 6) (pair 34 6) (pair 35 6) (pair 36 6) (pair 37 5) (pair 38 5)
        (pair 39 8) (pair 40 8) (pair 41 8) (pair 42 8) (pair 43 8) 
    })
    
    // value (health)
    (map "MaxHealth" { 
        (pair 1 100) (pair 2 100) (pair 3 100) (pair 4 100) (pair 5 100) (pair 6 100) (pair 7 100) (pair 8 100) (pair 9 100) (pair 10 100) 
        (pair 11 30) (pair 12 30) (pair 13 40) (pair 14 40) 
        (pair 15 60) (pair 16 60) (pair 17 60) (pair 18 60) (pair 19 80) (pair 20 80)
        (pair 21 50) (pair 22 50) (pair 23 50) (pair 24 50) (pair 25 40) (pair 26 40)
        (pair 27 40) (pair 28 40) (pair 29 100) (pair 30 100) (pair 31 100) (pair 32 100)
        (pair 33 70) (pair 34 70) (pair 35 100) (pair 36 100) (pair 37 120) (pair 38 120)
        (pair 39 100) (pair 40 100) (pair 41 100) (pair 42 100) (pair 43 100)
    })
    
    (map "DamageMultiplier" { 
        (pair 1 0) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 0) (pair 6 0) (pair 7 0) (pair 8 0) (pair 9 0) (pair 10 0) 
        (pair 11 50) (pair 12 50) (pair 13 50) (pair 14 50) 
        (pair 15 40) (pair 16 40) (pair 17 40) (pair 18 40) (pair 19 50) (pair 20 50)
        (pair 21 100) (pair 22 100) (pair 23 50) (pair 24 50) (pair 25 100) (pair 26 100)
        (pair 27 70) (pair 28 70) (pair 29 100) (pair 30 100) (pair 31 80) (pair 32 80)
        (pair 33 50) (pair 34 50) (pair 35 80) (pair 36 80) (pair 37 50) (pair 38 50)
        (pair 39 0) (pair 40 0) (pair 41 0) (pair 42 0) (pair 43 0) 
    })
)

(define "FourPlayerMaps"
    // state (movement)
    (map "Movement" { 
        (pair 1 8) (pair 2 8) (pair 3 8) (pair 4 8) (pair 5 8) (pair 6 8) (pair 7 8) (pair 8 8) (pair 9 8) (pair 10 8) 
        (pair 11 8) (pair 12 8) (pair 13 8) (pair 14 8) (pair 15 8) (pair 16 8) (pair 17 8) (pair 18 8) (pair 19 8) (pair 20 8) 
        (pair 21 4) (pair 22 4) (pair 23 4) (pair 24 4) 
        (pair 25 6) (pair 26 6) (pair 27 6) (pair 28 6) 
        (pair 29 7) (pair 30 7) (pair 31 7) (pair 32 7) (pair 33 5) (pair 34 5) (pair 35 5) (pair 36 5)
        (pair 37 5) (pair 38 5) (pair 39 5) (pair 40 5)
        (pair 41 5) (pair 42 5) (pair 43 5) (pair 44 5) (pair 45 4) (pair 46 4)
        (pair 47 4) (pair 48 4) (pair 49 4) (pair 50 4) (pair 51 4) (pair 52 4)
        (pair 53 5) (pair 54 5) (pair 55 5) (pair 56 5) (pair 57 7) (pair 58 7)
        (pair 59 7) (pair 60 7) (pair 61 6) (pair 62 6) (pair 63 6) (pair 64 6)
        (pair 65 6) (pair 66 6) (pair 67 6) (pair 68 6) (pair 69 6) (pair 70 6)
        (pair 71 6) (pair 72 6) (pair 73 5) (pair 74 5) (pair 75 5) (pair 76 5)
        (pair 77 8) (pair 78 8) (pair 79 8) (pair 80 8) (pair 81 8)
    })
    
    // value (health)
    (map "MaxHealth" { 
        (pair 1 100) (pair 2 100) (pair 3 100) (pair 4 100) (pair 5 100) (pair 6 100) (pair 7 100) (pair 8 100) (pair 9 100) (pair 10 100)
        (pair 11 100) (pair 12 100) (pair 13 100) (pair 14 100) (pair 15 100) (pair 16 100) (pair 17 100) (pair 18 100) (pair 19 100) (pair 20 100)
        (pair 21 30) (pair 22 30) (pair 23 30) (pair 24 30)
        (pair 25 40) (pair 26 40) (pair 27 40) (pair 28 40)
        (pair 29 60) (pair 30 60) (pair 31 60) (pair 32 60) (pair 33 60) (pair 34 60) (pair 35 60) (pair 36 60)
        (pair 37 80) (pair 38 80) (pair 39 80) (pair 40 80)
        (pair 41 50) (pair 42 50) (pair 43 50) (pair 44 50) (pair 45 50) (pair 46 50)
        (pair 47 50) (pair 48 50) (pair 49 40) (pair 50 40) (pair 51 40) (pair 52 40)
        (pair 53 40) (pair 54 40) (pair 55 40) (pair 56 40) (pair 57 100) (pair 58 100)
        (pair 59 100) (pair 60 100) (pair 61 100) (pair 62 100) (pair 63 100) (pair 64 100)
        (pair 65 70) (pair 66 70) (pair 67 70) (pair 68 70) (pair 69 100) (pair 70 100)
        (pair 71 100) (pair 72 100) (pair 73 120) (pair 74 120) (pair 75 120) (pair 76 120)
        (pair 77 100) (pair 78 100) (pair 79 100) (pair 80 100) (pair 81 100)
    })
    
    (map "DamageMultiplier" { 
        (pair 1 0) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 0) (pair 6 0) (pair 7 0) (pair 8 0) (pair 9 0) (pair 10 0)
        (pair 11 0) (pair 12 0) (pair 13 0) (pair 14 0) (pair 15 0) (pair 16 0) (pair 17 0) (pair 18 0) (pair 19 0) (pair 20 0)
        (pair 21 50) (pair 22 50) (pair 23 50) (pair 24 50)
        (pair 25 50) (pair 26 50) (pair 27 50) (pair 28 50)
        (pair 29 40) (pair 30 40) (pair 31 40) (pair 32 40) (pair 33 40) (pair 34 40) (pair 35 40) (pair 36 40)
        (pair 37 50) (pair 38 50) (pair 39 50) (pair 40 50)
        (pair 41 100) (pair 42 100) (pair 43 100) (pair 44 100) (pair 45 50) (pair 46 50)
        (pair 47 50) (pair 48 50) (pair 49 100) (pair 50 100) (pair 51 100) (pair 52 100)
        (pair 53 70) (pair 54 70) (pair 55 70) (pair 56 70) (pair 57 100) (pair 58 100)
        (pair 59 100) (pair 60 100) (pair 61 80) (pair 62 80) (pair 63 80) (pair 64 80)
        (pair 65 50) (pair 66 50) (pair 67 50) (pair 68 50) (pair 69 80) (pair 70 80)
        (pair 71 80) (pair 72 80) (pair 73 50) (pair 74 50) (pair 75 50) (pair 76 50)
        (pair 77 0) (pair 78 0) (pair 79 0) (pair 80 0) (pair 81 0)
    })
)

//------------------------------------------------------------------------------
// Doctrines

(define "DoctrineSetup"
    (map "NoDoctrine" { 
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "SpecialForces" { 
        (pair 1 6) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "BruteStrength" { 
        (pair 1 3) (pair 2 6) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "Sharpshooter" { 
        (pair 1 3) (pair 2 3) (pair 3 6) (pair 4 3) (pair 5 3) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "AcePilot" { 
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 6) (pair 5 3) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "SeaDog" { 
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 6) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "GuerrillaWarfare" { 
        (pair 1 3) (pair 2 3) (pair 3 3) (pair 4 3) (pair 5 3) (pair 6 10) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "ForeignInvader" { 
        (pair 1 5) (pair 2 5) (pair 3 5) (pair 4 5) (pair 5 5) (pair 6 2) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "Conscription" { 
        (pair 1 2) (pair 2 2) (pair 3 2) (pair 4 2) (pair 5 2) (pair 6 5) 
        (pair 7 2) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "EliteTraining" { 
        (pair 1 6) (pair 2 6) (pair 3 6) (pair 4 6) (pair 5 6) (pair 6 5) 
        (pair 7 6) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "GlassCannon" { 
        (pair 1 6) (pair 2 6) (pair 3 6) (pair 4 6) (pair 5 6) (pair 6 5) 
        (pair 7 4) (pair 8 6) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "HardenedResolve" { 
        (pair 1 2) (pair 2 2) (pair 3 2) (pair 4 2) (pair 5 2) (pair 6 5) 
        (pair 7 4) (pair 8 2) (pair 9 4) (pair 10 4) (pair 11 100) (pair 12 100)
    })
    
    (map "PreemptiveStrike" { 
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 6) (pair 10 0) (pair 11 100) (pair 12 100)
    })
    
    (map "Retaliation" { 
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 2) (pair 10 8) (pair 11 100) (pair 12 100)
    })
    
    (map "LadyLuck" { 
        (pair 1 4) (pair 2 4) (pair 3 4) (pair 4 4) (pair 5 4) (pair 6 5) 
        (pair 7 4) (pair 8 4) (pair 9 4) (pair 10 4) (pair 11 50) (pair 12 150)
    })
    
)

//------------------------------------------------------------------------------
// Fog Of War

(define "ClearSites"
    (difference (sites Board) "HiddenSites")
)

(define "HiddenSites"
    (union {(sites "Forest") (sites "Mountain")})
)

(define "VisibilityRangeSites"
    (union {
        (intersection (expand (forEach (players Friend of:(player)) (sites Occupied by:Player container:"Board")) steps:2) "ClearSites")
        (intersection (expand (forEach (players Friend of:(player)) (sites Occupied by:Player container:"Board")) steps:1) "HiddenSites")
        (intersection (expand (intersection (forEach (players Friend of:(player)) (sites Occupied by:Player container:"Board" components:{"Soldier" "Motorbike"})) (sites "Mountain")) steps:3) "ClearSites")
        (intersection (expand (forEach (players Friend of:(player)) (sites Occupied by:Player container:"Board" components:{"Bomber" "Fighter" "Helicopter"})) steps:3) "ClearSites")
        (intersection (expand (intersection (forEach (players Friend of:(player)) (sites Occupied by:Player container:"Board" components:{"Submarine" "Battleship" "Cruiser"})) (sites "Mountain")) steps:3) (union {(sites "DeepWater") (sites "ShallowWater")}))
    })
)

(define "HideSites"
    (forEach Site (intersection (difference (sites Board) ("VisibilityRangeSites")) (difference (sites Board) (sites Hidden What to:#1)))
        (set Hidden {What State Value} at:(site) True to:#1)
    )
)

(define "ShowSites"
    (forEach Site (intersection ("VisibilityRangeSites") (sites Hidden What to:#1))
        (set Hidden {What State Value} at:(site) False to:#1)
    )
)

(define "FogOfWarEachMove"
    (forEach Team (forEach (team) ("HideSites" Player)))
    (forEach Team (forEach (team) ("ShowSites" Player)))
)

(define "FogOfWarAttackCheck"
    (not (is In (to) (sites Hidden What to:Mover)))
)

(define "FogOfWarMetadata"
    (region Colour (intersection (sites Board) (sites Hidden What to:Mover)) (colour 104 120 96))
    (region Colour (intersection (sites "Forest") (sites Hidden What to:Mover)) (colour 0 50 0))
    (region Colour (intersection (sites "ShallowWater") (sites Hidden What to:Mover)) (colour 87 108 115))
    (region Colour (intersection (sites "DeepWater") (sites Hidden What to:Mover)) (colour 14 49 108))
    (region Colour (intersection (sites "Mountain") (sites Hidden What to:Mover)) (colour 97 77 59))
    (region Colour (intersection (sites Occupied by:All container:"Board" components:{"Town" "Dock" "Base" "Factory" "Airport"}) (sites Hidden What to:Mover)) (colour 75 75 75))
)

//------------------------------------------------------------------------------

(game "Maastricht" 
    (players <Scenario:numPlayers>) 
    (equipment { 
        (board <Scenario:boardShape>)
        
        <Scenario:boardRegins>
        
        (hand Shared size:14)
        
        (piece "Base" Each)
        (piece "Factory" Each)
        (piece "Town" Each)
        (piece "Airport" Each)
        (piece "Dock" Each)
        
        (piece "Soldier" Each (or {"HumanMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Motorbike" Each (or {"HumanMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        
        (piece "Speeder" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Shooter" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Tank" Each (or {("VehicleMove" 1) "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        
        (piece "Antiair" Each (or {("VehicleMove" 1) ("RangedAttack" 1 2) "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Launcher" Each (or {("VehicleMove" 1) ("RangedAttack" 2 3) "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Artillery" Each (or {("VehicleMove" 0) ("RangedAttack" 3 5) "HealMoveBuilding" "HealMoveUnit"}))
        
        (piece "Helicopter" Each (or {"AircraftMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Fighter" Each (or {"AircraftMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Bomber" Each (or {"AircraftMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        
        (piece "Cruiser" Each (or {"BoatMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Submarine" Each (or {"BoatMove" "CloseCombatAttack" "HealMoveBuilding" "HealMoveUnit"}))
        (piece "Battleship" Each (or {"BoatMove" ("RangedAttack" 2 4) "HealMoveBuilding" "HealMoveUnit"}))
        
        (piece "Base" Neutral) 
        (piece "Factory" Neutral)
        (piece "Town" Neutral)
        (piece "Airport" Neutral)
        (piece "Dock" Neutral)
        
        (piece "Soldier" Neutral)
        (piece "Motorbike" Neutral)
        
        (piece "Speeder" Neutral)
        (piece "Shooter" Neutral)
        (piece "Tank" Neutral)
        
        (piece "Antiair" Neutral)
        (piece "Launcher" Neutral)
        (piece "Artillery" Neutral)
        
        (piece "Helicopter" Neutral)
        (piece "Fighter" Neutral)
        (piece "Bomber" Neutral)
        
        (piece "Cruiser" Neutral)
        (piece "Submarine" Neutral)
        (piece "Battleship" Neutral)
        (piece "Train" Neutral)
        (piece "Bridge" Neutral)
        (piece "Beer" Each)
        (piece "Restaurant" Neutral)
        (piece "Castle" Neutral)
        (piece "Road" Neutral)
        (piece "Museum" Neutral)
        (piece "Book" Neutral)
        (piece "Hospital" Neutral)
        (piece "Soldier_fantasy" Neutral)
        (piece "Cake" Neutral)
        (piece "Train_track" Neutral)
        (piece "Goose" Neutral)
        
        <Scenario:playerMaps>
        
        "DoctrineSetup"
    }) 
    (rules 
        (meta (passEnd NoEnd))
        (start {  
            <Scenario:buildingSetup>
            <Scenario:pieceSetup>
            <Scenario:teams>
            (set Score Each <Scenario:startingMoney>)
            
            (place "Soldier0" (handSite Shared 0) count:30 state:1 value:30)
            (place "Motorbike0" (handSite Shared 1) count:50 state:1 value:40)
            
            (place "Speeder0" (handSite Shared 2) count:60 state:1 value:60)
            (place "Shooter0" (handSite Shared 3) count:80 state:1 value:60)
            (place "Tank0" (handSite Shared 4) count:100 state:1 value:80)
            
            (place "Antiair0" (handSite Shared 5) count:80 state:1 value:50)
            (place "Launcher0" (handSite Shared 6) count:80 state:1 value:50)
            (place "Artillery0" (handSite Shared 7) count:100 state:1 value:40)
            
            (place "Helicopter0" (handSite Shared 8) count:60 state:1 value:40)
            (place "Fighter0" (handSite Shared 9) count:100 state:1 value:100)
            (place "Bomber0" (handSite Shared 10) count:120 state:1 value:100)
            
            (place "Cruiser0" (handSite Shared 11) count:60 state:1 value:70)
            (place "Submarine0" (handSite Shared 12) count:100 state:1 value:100) 
            (place "Battleship0" (handSite Shared 13) count:120 state:1 value:120) 
            
            <FogOfWar:EachMove>
        })
        
        (play 
            (or 
                (or { 
                    (forEach Piece)
                    ("BuyHumanMove")
                    ("BuyBoatMove") 
                    ("BuyAircraftMove") 
                    ("BuyVehicleMove") 
                    }
                    (then 
                        (and {
                            (forEach Player
                                ("RemovePiecesIfPlayerHasLost" Player)
                            )
                            (moveAgain)
                            (and {<FogOfWar:EachMove>})
                        })
                    )
                )
                (move Pass
                    (then
                        (and {
                            (forEach Site (sites Occupied by:Mover container:"Board")
                                (set State at:(site) (mapEntry "Movement" (what at:(site))))
                            )
                            (set Score 
                                Mover
                                (+ {
                                    (* (count Sites in:(sites Occupied by:Mover component:"Base")) 20) 
                                    (* (count Sites in:(sites Occupied by:Mover component:"Town")) 10) 
                                    (score Mover) 
                                })
                            )
                            (forEach Site (sites Occupied by:Mover components:{"Town" "Base" "Factory" "Dock" "Airport"})
                                (set Value at:(site) (min (mapEntry "MaxHealth" (what at:(site))) (+ (value Piece at:(site)) 10)))
                            )
                            (and {<FogOfWar:EachMove>})
                        })
                    )
                )
            )
        )
        
        (end 
            (forEach NonMover 
                if:(= (where "Base" Player) Off) (result Player Loss)
            )
        )
    )
)

//------------------------------------------------------------------------------

(option "Scenario" <Scenario> args:{<playerMaps> <numPlayers> <boardShape> <boardRegins> <buildingSetup> <pieceSetup> <startingMoney> <teams> <pieceFlip> <terrainScale>}
    {
    
    (item "Maastricht (2-player, square)"
        <
        "TwoPlayerMaps"
        >
        <
        2
        >
        <
        (rectangle 15 25)
        >
        <										 
        (regions "DeepWater" (sites {9 10 35 36 61 62 86 87 111 112 161 162 211 212 235 236 284 285 309 310 335 334 359 360 137 136 186 187 260 261})) 
        (regions "ShallowWater" (sites {160 159 158 157 156 155 154 153 127 101 75})) 
        (regions "Forest" (sites {29 30 31 4 5 6 183 182 129 128 0..3 25..28 50..54 109 184 110 85 60 34 100 76 126 152 151 125 102 77 63 88 113 170 195 220 245
                165..167	
        })) 
        (regions "Mountain" (sites {80 55 56 57 82})) 
        > 
        <
        //(place "Town1" (sites {"A2" "A7" "C1" "C8"}) state:8 value:100) 
        (place "Town1" (sites {68}) state:8 value:100) 
        (place "Town0" (sites {256 350..358 361..372 374 325..333 336..347 349 24 49 74 99 124 149 174 199 249 274 299 11..21 32 33 7 8 300 275 250 225 200 175 23 224
                48 73 98 123 148 173 198 223 324 37..42 44..46 311..322 117 92 193 194 168 169 70 120 176 201 226 251 276 301 177..178 78 79 103 104
        }) state:8 value:100) 
        (place "Base1" (sites {95 278}) state:8 value:100) 
        (place "Base2" (sites {}) state:8 value:100)
        (place "Airport1" (sites {}) state:8 value:100) 
        (place "Airport2" (sites {}) state:8 value:100)
        (place "Train0" (sites {72 273}) state:8 value:100)
        (place "Beer2" (sites {230 66 232 281 282 241 244 292 190 237 280 279 252..254}) state:8 value:100) 
        (place "Bridge0" (sites {136 137 186 187 260 261}) state:8 value:100) 
        (place "Bridge0" (sites {160 156}) state:8 rotation:2 value:100) 
        (place "Castle0" (sites {81}) state:8 value:100) 
        (place "Restaurant0" (sites {231 255 65 189 289 130 290 291 293..297 233 207 277 283}) state:8 value:100) 
        (place "Road0" (sites {135 134 133 132 131 138 139 263 262 259 258 257 209 140..145 67 264..272}) state:8 rotation:2 value:100) 
        (place "Road0" (sites {69 94 119 64 89 114 163 188 213 238 185 210 234 181 206 71 96 121 146 171 196 221 246}) state:8 value:100) 
        (place "Battleship0" (sites {86 310}) state:8 value:100) 
        (place "Museum0" (sites {164}) state:8 value:100)
        (place "Book0" (sites {191}) state:8 value:100)
        (place "Hospital0" (sites {43}) state:8 value:100)
        (place "Soldier_fantasy0" (sites {180}) state:8 value:100)
        (place "Train_track0" (sites {97 122 147 172 197 222 247 248 298 323 348 373 47 22}) state:8 value:100)
        (place "Cake0" (sites {243 208}) state:8 value:100)
        (place "Goose0" (sites {106..108}) state:8 value:100)
        >  
        <
        
        >  
        <
        100
        >  
        <
        > 
        <
        (piece ExtendName P2 "Flip")
        >
        <
        (show Symbol "forest" (sites "Forest"))
        (show Symbol "waves" (sites "ShallowWater"))
        (show Symbol "waves" (sites "DeepWater"))
        (show Symbol "mountain" (sites "Mountain"))
        >    
        "Scenario - Maastricht"
    )**
    
    }
)

//------------------------------------------------------------------------------

(option "Fog of War" <FogOfWar> args:{ <AttackCheck> <EachMove> <Metadata> }
    {
    (item "Off" 	<> <> <> 															"No Fog of War.")**
    (item "On" 	<"FogOfWarAttackCheck"> <"FogOfWarEachMove"> <"FogOfWarMetadata">	"Fog of War.")
})

//------------------------------------------------------------------------------

(option "Player 1 Doctrine" <Doctrine1> args:{ <doctrine> }
    {
    (item "None" 			<"NoDoctrine"> 		"Player 1 - No Doctrine.")**
    (item "Special Forces" 	<"SpecialForces"> 	"Player 1 - Special Forces.")
    (item "Brute Strength"		<"BruteStrength"> 	"Player 1 - Brute Strength.")
    (item "Sharpshooter" 	<"Sharpshooter"> 	"Player 1 - Sharpshooter.")
    (item "Ace Pilot" 		<"AcePilot"> 			"Player 1 - Ace Pilot.")
    (item "Sea Dog" 			<"SeaDog"> 			"Player 1 - Sea Dog.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"Player 1 - Guerrilla Warfare.")
    (item "Foreign Invader" 	<"ForeignInvader"> 	"Player 1 - Foreign Invader.")
    (item "Conscription" 	<"Conscription"> 	"Player 1 - Conscription.")
    (item "Elite Training" 	<"EliteTraining"> 	"Player 1 - Elite Training.")
    (item "Glass Cannon" 	<"GlassCannon"> 		"Player 1 - Glass Cannon.")
    (item "Hardened Resolve" <"HardenedResolve"> 	"Player 1 - Hardened Resolve.")
    (item "Preemptive Strike" 	<"PreemptiveStrike"> 	"Player 1 - Preemptive Strike.")
    (item "Retaliation" 		<"Retaliation"> 		"Player 1 - Retaliation.")
    (item "Lady Luck" 		<"LadyLuck"> 		"Player 1 - Lady Luck.")
})

(option "Player 2 Doctrine" <Doctrine2> args:{ <doctrine> }
    {
    (item "None" 			<"NoDoctrine"> 		"Player 2 - No Doctrine.")**
    (item "Special Forces" 	<"SpecialForces"> 	"Player 2 - Special Forces.")
    (item "Brute Strength"		<"BruteStrength"> 	"Player 2 - Brute Strength.")
    (item "Sharpshooter" 	<"Sharpshooter"> 	"Player 2 - Sharpshooter.")
    (item "Ace Pilot" 		<"AcePilot"> 			"Player 2 - Ace Pilot.")
    (item "Sea Dog" 			<"SeaDog"> 			"Player 2 - Sea Dog.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"Player 2 - Guerrilla Warfare.")
    (item "Foreign Invader" 	<"ForeignInvader"> 	"Player 2 - Foreign Invader.")
    (item "Conscription" 	<"Conscription"> 	"Player 2 - Conscription.")
    (item "Elite Training" 	<"EliteTraining"> 	"Player 2 - Elite Training.")
    (item "Glass Cannon" 	<"GlassCannon"> 		"Player 2 - Glass Cannon.")
    (item "Hardened Resolve" <"HardenedResolve"> 	"Player 2 - Hardened Resolve.")
    (item "Preemptive Strike" 	<"PreemptiveStrike"> 	"Player 2 - Preemptive Strike.")
    (item "Retaliation" 		<"Retaliation"> 		"Player 2 - Retaliation.")
    (item "Lady Luck" 		<"LadyLuck"> 		"Player 2 - Lady Luck.")
})

(option "Player 3 Doctrine" <Doctrine3> args:{ <doctrine> }
    {
    (item "None" 			<"NoDoctrine"> 		"Player 3 - No Doctrine.")**
    (item "Special Forces" 	<"SpecialForces"> 	"Player 3 - Special Forces.")
    (item "Brute Strength"		<"BruteStrength"> 	"Player 3 - Brute Strength.")
    (item "Sharpshooter" 	<"Sharpshooter"> 	"Player 3 - Sharpshooter.")
    (item "Ace Pilot" 		<"AcePilot"> 			"Player 3 - Ace Pilot.")
    (item "Sea Dog" 			<"SeaDog"> 			"Player 3 - Sea Dog.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"Player 3 - Guerrilla Warfare.")
    (item "Foreign Invader" 	<"ForeignInvader"> 	"Player 3 - Foreign Invader.")
    (item "Conscription" 	<"Conscription"> 	"Player 3 - Conscription.")
    (item "Elite Training" 	<"EliteTraining"> 	"Player 3 - Elite Training.")
    (item "Glass Cannon" 	<"GlassCannon"> 		"Player 3 - Glass Cannon.")
    (item "Hardened Resolve" <"HardenedResolve"> 	"Player 3 - Hardened Resolve.")
    (item "Preemptive Strike" 	<"PreemptiveStrike"> 	"Player 3 - Preemptive Strike.")
    (item "Retaliation" 		<"Retaliation"> 		"Player 3 - Retaliation.")
    (item "Lady Luck" 		<"LadyLuck"> 		"Player 3 - Lady Luck.")
})

(option "Player 4 Doctrine" <Doctrine4> args:{ <doctrine> }
    {
    (item "None" 			<"NoDoctrine"> 		"Player 4 - No Doctrine.")**
    (item "Special Forces" 	<"SpecialForces"> 	"Player 4 - Special Forces.")
    (item "Brute Strength"		<"BruteStrength"> 	"Player 4 - Brute Strength.")
    (item "Sharpshooter" 	<"Sharpshooter"> 	"Player 4 - Sharpshooter.")
    (item "Ace Pilot" 		<"AcePilot"> 			"Player 4 - Ace Pilot.")
    (item "Sea Dog" 			<"SeaDog"> 			"Player 4 - Sea Dog.")
    (item "Guerrilla Warfare" 	<"GuerrillaWarfare"> 	"Player 4 - Guerrilla Warfare.")
    (item "Foreign Invader" 	<"ForeignInvader"> 	"Player 4 - Foreign Invader.")
    (item "Conscription" 	<"Conscription"> 	"Player 4 - Conscription.")
    (item "Elite Training" 	<"EliteTraining"> 	"Player 4 - Elite Training.")
    (item "Glass Cannon" 	<"GlassCannon"> 		"Player 4 - Glass Cannon.")
    (item "Hardened Resolve" <"HardenedResolve"> 	"Player 4 - Hardened Resolve.")
    (item "Preemptive Strike" 	<"PreemptiveStrike"> 	"Player 4 - Preemptive Strike.")
    (item "Retaliation" 		<"Retaliation"> 		"Player 4 - Retaliation.")
    (item "Lady Luck" 		<"LadyLuck"> 		"Player 4 - Lady Luck.")
})

//------------------------------------------------------------------------------

(metadata
    
    (info
        {
        (description "Mini Wars is a simplified tabletop war game.")
        (rules "//------------------------------------------------------------------------------
            <b>General Rules:</b>
            
            <u>The following rules apply to all units, unless stated otherwise in their description:</u>
            
            - All units move and measure distance orthogonally.
            - Units may move up to their maximum movement limit and can then attack an adjacent site.
            
            - Attacking a unit will deal damage to it (see damage calculation section).
            - If an attacked unit's health reaches zero, it will be removed from the battlefield.
            - Defending units that survive an attack, will then deal counter damage to their attacker.
            
            - Units can reinforce an adjacent unit of the same type, instead of attacking.
            - Both units must be owned by the same player.
            - Reinforcing will convert health from one unit to the other, transferring as much health as possible.
            - Any units that are left with zero health after reinforcing are removed.
            - A unit which has been reinforced cannot perform any further actions this turn.
            
            <u>The following rules apply to all buildings:</u>
            
            - There are five types of building: Town, Factory, Airport, Dock and Base.
            
            - Attacking a building will deal damage to it (see damage calculation section).
            - If an attacked building's health reaches zero, it will gain 50 health and change ownership to the player who attacked it. 
            - Buildings that are attacked, will not deal counter damage.
            
            - Units can heal at an adjacent building that you own, instead of attacking.
            - Healing at a building, will convert health from the building to the unit, transferring as much health as possible.
            
            - Additional units can be purchased using gold at their corresponding production building.
            - To purchase a unit, drag it from your hand to an available site next to a production building that you own.
            - The cost of purchasing a unit is represented by its count.
            - Purchased units cannot move, attack or heal, on the same turn they are purchased.
            
            - Each player receives 10 gold for every Town they own and 20 gold for every Base they own, at the start of their turn.
            - Buildings gain 10 health at the end of the owning player's turn, up to a maximum of 100.
            - Grey buildings are neutral, and are not owned by any player.
            
            - If a player loses ownership of all their Bases, they lose the game.
            
            //------------------------------------------------------------------------------
            <b>Units:</b>
            
            <u>Human</u> (Purchased from Towns)
            
            Soldier
            Move: 3
            Health: 30
            Cost: 30
            Damage Factor: 50%
            
            Motorbike
            Move: 5
            Health: 40
            Cost: 50
            Damage Factor: 50%
            
            <u>Vehicle</u> (Purchased from Factories)
            
            Speeder
            Move: 6
            Health: 60
            Cost: 60
            Damage Factor: 40%
            
            Shooter
            Move: 4
            Health: 60
            Cost: 80
            Damage Factor: 40%
            - Deals double damage against Humans.
            
            Tank
            Move: 4
            Health: 80
            Cost: 100
            Damage Factor: 50%
            
            Anti-Aircraft
            Move: 4
            Health: 50
            Cost: 80
            Damage Factor: 100%
            - Can only attack Aircraft.
            - Can attack units 1-2 spaces away.
            - Does not deal or receive counter damage during an attack.
            
            Missile Launcher
            Move: 3
            Health: 50
            Cost: 80
            Damage Factor: 50%
            - Cannot attack Aircraft.
            - Can only attack units 2-3 spaces away.
            - Does not deal or receive counter damage during an attack.
            
            Artillery
            Move: 3
            Health: 40
            Cost: 100
            Damage Factor: 100%
            - Cannot attack Aircraft.
            - Can only attack units 3-5 spaces away.
            - Does not deal or receive counter damage during an attack.
            - Cannot attack or heal in the same turn that it moved.
            
            <u>Aircraft</u> (Purchased from Airports)
            
            Helicopter
            Move: 4
            Health: 40
            Cost: 60
            Damage Factor: 70%
            
            Fighter Jet
            Move: 6
            Health: 100
            Cost: 100
            Damage Factor: 100%
            - Can only attack Aircraft.
            
            Bomber
            Move: 5
            Health: 100
            Cost: 120
            Damage Factor: 80%
            - Cannot attack Aircraft.
            
            <u>Boat</u> (Purchased from Docks)
            
            Cruiser
            Move: 5
            Health: 70
            Cost: 60
            Damage Factor: 50%
            
            Submarine
            Move: 5
            Health: 100
            Cost: 100
            Damage Factor: 80%
            - Can only attack Boats.
            
            Battleship
            Move: 4
            Health: 120
            Cost: 120
            Damage Factor: 50%
            - Cannot attack Aircraft.
            - Can only attack units 2-4 spaces away.
            - Does not deal or receive counter damage during an attack.
            
            //------------------------------------------------------------------------------
            <b>Movement Restrictions:</b>
            
            Humans may travel across plains, forests, and shallow water. They may also move 1 space into mountains instead of their regular movement.
            Vehicles may travel across plains. They may also move 1 space into forests or shallow water instead of their regular movement.
            Aircraft may travel across all spaces.
            Boats may travel across shallow and deep water.
            Buildings cannot move (obviously).
            Units cannot move over enemy or neutral occupied spaces.
            
            //------------------------------------------------------------------------------
            <b>Damage Calculation:</b>
            
            An attacking unit deals damage equal to its health, multiplied by its damage factor. 
            For example, A submarine has a damage factor of 80%, so a submarine with 20 health will deal 16 damage when it attacks (20 x 0.8).
            If the defending unit is in shallow or deep water, it takes 25% more damage.
            If the defending unit is in a forest, it takes 25% less damage.
            Aircraft are unaffected by terrain when calculating damage against them.
            All damage values are rounded down to the nearest whole number.
            
            //------------------------------------------------------------------------------
            <b>Fog of War:</b> (Optional)
            
            All friendly units and buildings can see tiles up to 2 spaces away.
            Aircraft can see tiles up to 3 spaces away.
            Boats can see shallow and deep water tiles up to 3 spaces away.
            Humans on a mountain can see tiles up to 3 spaces away.
            Forest and mountain tiles can only be seen if adjacent to them.
            Enemy units and buildings that are not visible cannot be attacked, and have their type and health hidden.
            
            //------------------------------------------------------------------------------
            <b>Army Doctrine:</b>
            
            At the start of the game (selected via the game options) you may pick a doctrine for your army.
            
            None - No effect.
            Special Forces - Human units do 50% more damage, all other units do 25% less damage.
            Brute Strength - Direct Vehicle units (no range on their attack distance) do 50% more damage, all other units do 25% less damage.
            Sharpshooter - Indirect Vehicle units (range on their attack distance) do 50% more damage, all other units do 25% less damage.
            Ace Pilot - Aircraft units do 50% more damage, all other units do 25% less damage.
            Sea Dog - Boat units do 50% more damage, all other units do 25% less damage.
            Guerrilla Warfare - Attacks against buildings deal 50% more damage, but attacks against units deal 25% less damage.
            Foreign Invader - Attacks against buildings deal 50% less damage, but attacks against units deal 25% more damage.
            Conscription - Units cost 50% less gold, but do 50% less damage.
            Elite Training - Units cost 50% more gold, but do 50% more damage.
            Glass Cannon - Units do 50% more damage, but take 50% more damage.
            Hardened Resolve - Units do 50% less damage, but take 50% less damage.
            Preemptive Strike - Units do 50% more damage when attacking, but never deal counter damage.
            Retaliation - Units do 50% less damage when attacking, but deal 100% more counter damage.
            Lady Luck - All attack damage is randomly selected between 50% and 150% of the normal amount.
            
        //------------------------------------------------------------------------------")
        (id "1421")
        (version "1.3.2")
        (classification "board/war/replacement/eliminate/target")
        (author "Matthew Stephenson")
        (credit "Matthew Stephenson and Eric Piette")
        }
    )
    
    (graphics {
        (player Colour P1 (colour Red))
        (player Colour P2 (colour Yellow))
        (player Colour P3 (colour Blue))
        (player Colour P4 (colour Green))
        
        (piece Colour P1 state:0 fillColour:(colour 139 0 0))
        (piece Colour P2 state:0 fillColour:(colour 155 135 12))
        (piece Colour P3 state:0 fillColour:(colour 0 77 156))
        (piece Colour P4 state:0 fillColour:(colour 0 150 0))
        
        (board Colour Phase0 (colour 208 240 192))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (board Colour Symbols (colour Black))
        
        (piece Background image:"square" fillColour:(colour 255 255 255 1) edgeColour:(colour 255 255 255 1))
        
        <Scenario:pieceFlip>
        
        (piece Scale "Factory" 0.55)
        (piece Scale "Base" 0.55)
        (piece Scale "Town" 0.55)
        (piece Scale "Dock" 0.55)
        (piece Scale "Airport" 0.55)
        
        (piece Scale "Antiair" 0.7)
        (piece Scale "Cruiser" 0.7)
        (piece Scale "Motorbike" 0.7)
        (piece Scale "Soldier" 0.6)
        (piece Scale 0.8)
        
        <Scenario:terrainScale>
        
        //(region Colour (sites Occupied by:All container:"Board" components:{"Town" "Dock" "Base" "Factory" "Airport"}) (colour 150 150 150))
        (region Colour "Forest" (colour 0 100 0))
        (region Colour "ShallowWater" (colour 174 216 230))
        (region Colour "DeepWater" (colour 28 98 216))
        (region Colour "Mountain" (colour 194 154 118))
        
        <FogOfWar:Metadata>
        
        (show Score " Gold")
        
        (piece Families {"Defined" "Fantasy"})
    })
    
)
