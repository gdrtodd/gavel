(define "SiteToEnter" (coord "A3"))

(define "Throw" (mapEntry (count Pips)))

(define "SiteToMoveOnTrack" ("NextSiteOnTrack" "Throw" #1 #2))

(define "PieceMovement" <Ruleset:piece>)

(define "SevenPiecesOnBoard"
    (start { 	
        (place "SenetPiece1" (sites {"B3" "D3" "F3" "H3" "J3" "I2" "G2"}))
        (place "SenetPiece2" (sites {"A3" "C3" "E3" "G3" "I3" "J2" "H2"}))
    })
)

(define "FivePiecesOnBoard"
    (start { 	
        (place "SenetPiece1" (sites {"B3" "D3" "F3" "H3" "J3"}))
        (place "SenetPiece2" (sites {"A3" "C3" "E3" "G3" "I3"}))
    })
)

(define "Ankh Waset Site" (coord "F2"))

//---------------------------Define specifically for Kendall------------------------------------------

(define "MoveInFront7Pieces" (fromTo (from (coord "G2")) (to (coord "F2"))))

(define "MoveInFront5Pieces" (fromTo (from (coord "J3")) (to (coord "J2"))))

(define "TwoConsecutiveSpaces" 
    (if (= ("SiteToMoveOnTrack" #1 #2) 19)
        (or (is Line 2 W through:("SiteToMoveOnTrack" #1 #2)) (is Line 2 N through:("SiteToMoveOnTrack" #1 #2)))
        (if (= ("SiteToMoveOnTrack" #1 #2) 29)
            (or (is Line 2 W through:("SiteToMoveOnTrack" #1 #2)) (is Line 2 S through:("SiteToMoveOnTrack" #1 #2)))
            (if (= ("SiteToMoveOnTrack" #1 #2) 10)
                (or (is Line 2 E through:("SiteToMoveOnTrack" #1 #2)) (is Line 2 S through:("SiteToMoveOnTrack" #1 #2)))
                (if (= ("SiteToMoveOnTrack" #1 #2) 0)
                    (or (is Line 2 E through:("SiteToMoveOnTrack" #1 #2)) (is Line 2 N through:("SiteToMoveOnTrack" #1 #2)))
                    (or (is Line 2 W through:("SiteToMoveOnTrack" #1 #2)) (is Line 2 E through:("SiteToMoveOnTrack" #1 #2)))
                )
            )
        )
    )
)

(define "NextSiteFrom" ("NextSiteOnTrack" 1 from:(last From)))

(define "BearOffPiece" (move Remove (from)))

(define "BearOffPieceIfNoPieceInHomeRow" 
    (if (all Sites (sites Occupied by:Mover) if:(not (is In (site) (sites "TopRow"))))
        (move Remove (from))
    )
)

(define "BearOffPieceOnWater" (move Remove (sites "Water")))

(define "BearOffPieceOnWaterIfNoPieceInHomeRow" 
    (if (all Sites (sites Occupied by:Mover) if:(not (is In (site) (sites "TopRow"))))
        (move Remove (sites "Water"))
    )
)

(define "TrapRule"
    (if (and (or {
                ("IsEndTrack" ("SiteToMoveOnTrack")) 
                ("IsOffBoard" ("SiteToMoveOnTrack"))
                (is In ("SiteToMoveOnTrack") (union {(sites "Water") (sites "Baw") (sites "Two Men") (sites "Horus")}))
            })
            (= 1 (count Sites in:(intersection (sites Empty) (sites "Water"))))
        )
        (move (from) (to (sites "Water")))
    )
)

(define "ThrowOfOne" (or (is Mover P1) (and (is Mover P2) (= (value Player Mover) 1))))

(define "NoStartingThrow" True)

(define "StartingThrow" #1)

(define "SetStartingThrow" (then (if (and (!= (value Player Mover) 1) (= 1 ("Throw"))) (set Value Mover 1))))

(define "MovePieceForward"
    (or {
        // Square 26
        (if (is In (from) (sites "Neferu"))
            (if ("IsNotOffBoard" ("SiteToMoveOnTrack"))
                (if ("IsEndTrack" ("SiteToMoveOnTrack"))
                    #1 // Bear off rule
                    (if 
                        (is Empty ("SiteToMoveOnTrack"))
                        (move 
                            (from) 
                            (to ("SiteToMoveOnTrack"))
                        )
                        (if (and (not ("TwoConsecutiveSpaces")) ("IsEnemyAt" ("SiteToMoveOnTrack")))
                            (if (and 
                                    (= 1 (count in:(intersection (sites Empty) (sites "Water")))) 
                                    (is In ("SiteToMoveOnTrack") (union {(sites "Baw") (sites "Two Men") (sites "Horus")}))
                                )
                                (move Swap Pieces
                                    (from) 	
                                    ("SiteToMoveOnTrack") 
                                    (then (fromTo 
                                            (from (last From)) 
                                            (to ("NextSiteFrom"))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        // Squares 28-29
        (if (is In (from) (union {(sites "Two Men") (sites "Baw")}))
            (if ("IsNotOffBoard" ("SiteToMoveOnTrack"))
                (if ("IsEndTrack" ("SiteToMoveOnTrack")) 
                    #1 // Bear off rule
                )
            )
        )
        // Square 30
        (if (is In (from) (sites "Horus"))
            (if (or 
                    ("IsEndTrack" ("SiteToMoveOnTrack")) 
                    ("IsOffBoard" ("SiteToMoveOnTrack"))
                )
                #1 // Bear off rule
            )
        )
        (if (not (is In (from) (union {(sites "Neferu") (sites "Water") (sites "Baw") (sites "Two Men") (sites "Horus")})))
            (or {
                #2 // Trap rule
                // Squares 1 to 25
                (if (not 
                        (or {
                            ("IsEndTrack" ("SiteToMoveOnTrack")) 
                            ("IsOffBoard" ("SiteToMoveOnTrack"))
                            (is In ("SiteToMoveOnTrack") (union {(sites "Water") (sites "Baw") (sites "Two Men") (sites "Horus")}))
                        })
                    )
                    (if 
                        (is Empty ("SiteToMoveOnTrack"))
                        (move 
                            (from) 
                            (to ("SiteToMoveOnTrack"))
                        )
                        (if (and (not ("TwoConsecutiveSpaces")) ("IsEnemyAt" ("SiteToMoveOnTrack")))
                            (move Swap Pieces
                                (from) 	
                                ("SiteToMoveOnTrack") 
                            )
                        )
                    )
                )
            })
        )
    })
)

(define "MovePieceBackward"
    (or {
        // Square 26
        (if (is In (from) (sites "Neferu"))
            (if ("IsNotOffBoard" ("SiteToMoveOnTrack" "TrackOpposite"))
                (if 
                    (is Empty ("SiteToMoveOnTrack" "TrackOpposite"))
                    (move 
                        (from) 
                        (to ("SiteToMoveOnTrack" "TrackOpposite"))
                    )
                    (if (and (not ("TwoConsecutiveSpaces" "TrackOpposite")) ("IsEnemyAt" ("SiteToMoveOnTrack" "TrackOpposite")))
                        (move Swap Pieces
                            (from) 	
                            ("SiteToMoveOnTrack" "TrackOpposite") 
                        )
                    )
                )
            )
        )
        (if (not (is In (from) (union {(sites "Neferu") (sites "Water") (sites "Baw") (sites "Two Men") (sites "Horus")})))
            // Squares 1 to 25
            (if ("IsNotOffBoard" ("SiteToMoveOnTrack" "TrackOpposite"))
                (if 
                    (is Empty ("SiteToMoveOnTrack" "TrackOpposite"))
                    (move 
                        (from) 
                        (to ("SiteToMoveOnTrack" "TrackOpposite"))
                    )
                    (if (and (not ("TwoConsecutiveSpaces" "TrackOpposite")) ("IsEnemyAt" ("SiteToMoveOnTrack" "TrackOpposite")))
                        (move Swap Pieces
                            (from) 	
                            ("SiteToMoveOnTrack" "TrackOpposite") 
                        )
                    )
                )
            )
        )
    })
)

(define "PieceOnAnkhWasetFromWaterHasToMove" 
    (and 
        (= (state at:("Ankh Waset Site")) 1) 
        (= 1 (count Sites in:(intersection (sites Occupied by:Mover) (sites "Ankh Waset"))))
    )	
)

(define "PieceOnAnkhWasetHasMoved" (then (set State at:(last To) 0)))

(define "PieceOnAnkhWasetHasToMove" (then (set State at:(last To) 1)))

(define "PieceOnWater" (= 1 (count Sites in:(intersection (sites Occupied by:Mover) (sites "Water")))))

(define "NoPieceOnAnkhWaset" (= 1 (count Sites in:(intersection (sites Empty) (sites "Ankh Waset")))))

(define "KendallMoves" 
    (if ("PieceOnAnkhWasetFromWaterHasToMove") 
        (priority {
            (if 
                (is Empty ("SiteToMoveOnTrack" from:("Ankh Waset Site")))
                (move 
                    (from ("Ankh Waset Site")) 
                    (to ("SiteToMoveOnTrack" from:("Ankh Waset Site")))
                )
                (if (and 
                        (not ("TwoConsecutiveSpaces" from:("Ankh Waset Site"))) 
                        ("IsEnemyAt" ("SiteToMoveOnTrack" from:("Ankh Waset Site")))
                    )
                    (move Swap Pieces
                        ("Ankh Waset Site") 
                        ("SiteToMoveOnTrack" from:("Ankh Waset Site")) 
                    )
                )
                ("PieceOnAnkhWasetHasMoved")
            )
            (if 
                (is Empty ("SiteToMoveOnTrack" from:("Ankh Waset Site") "TrackOpposite"))
                (move 
                    (from ("Ankh Waset Site")) 
                    (to ("SiteToMoveOnTrack" from:("Ankh Waset Site") "TrackOpposite"))
                )
                (if (and 
                        (not ("TwoConsecutiveSpaces" from:("Ankh Waset Site") "TrackOpposite")) 
                        ("IsEnemyAt" ("SiteToMoveOnTrack" from:("Ankh Waset Site") "TrackOpposite"))
                    )
                    (move Swap Pieces
                        ("Ankh Waset Site") 
                        ("SiteToMoveOnTrack" from:("Ankh Waset Site") "TrackOpposite") 
                    )
                )
                ("PieceOnAnkhWasetHasMoved")
            )
        })
        (if ("PieceOnWater")
            (if (= ("Throw") 4)
                #3 // Bear off rule on water
                (or
                    (if ("NoPieceOnAnkhWaset")
                        (move (from (sites "Water")) (to (sites "Ankh Waset")) ("PieceOnAnkhWasetHasToMove"))
                    )
                    (move Pass)
                )
            )
            
            (if ("StartingThrow" #1)
                (priority {
                    (forEach Piece ("MovePieceForward" #2 #4))
                    (forEach Piece ("MovePieceBackward"))
                    }
                    (then (if (is In ("Throw") (sites {1 4 5})) (moveAgain)))
                )
            )
        )
    )
)

(define "KendallRules" 
    (rules 
        #1 // Starting rules
        (play 
            (do 
                (roll #5)
                next:(if (can Move ("KendallMoves" #2 #3 #4 #6))
                    ("KendallMoves" #2 #3 #4 #6)
                    (move Pass (then (if (is In ("Throw") (sites {1 4 5})) (moveAgain))))
                )
            )
        )
        (end ("EscapeWin"))
    )
)

//------------------------------------------------------------------------------

(game "Senet"
    (players 2) 
    (equipment { 
        (board (rectangle 3 10) 
            { 
            <Track>
            }
        )
        <Dice>
        <Throw>
        (regions "Symbols" (sites {"F2" "F1" "G1" "H1" "I1"}))
        (regions "Ankh Waset" (sites {"F2"}))
        (regions "Neferu" (sites {"F1"}))
        (regions "Water" (sites {"G1"}))
        (regions "Baw" (sites {"H1"}))
        (regions "Two Men" (sites {"I1"}))
        (regions "Horus" (sites {"J1"}))
        (regions "TopRow" (sites Top))
        (regions "MiddleRow" (difference (expand (sites Top)) (sites Top)))
        (regions "BottomRow" (sites Bottom))
        (piece "SenetPiece" Each ("PieceMovement")) 
        (hand Each)
    }) 
    <Ruleset:rules>
)

//------------------------------------------------------------------------------

(option "Track" <Track> args:{<track>}
    {
    (item "Boustrophedon + Backward" 
        <
        (track "Track1" "20,E,S1,W,S1,E,End" P1 directed:True)
        (track "Track2" "20,E,S1,W,S1,E,End" P2 directed:True)
        (track "TrackOpposite1" "9,W,N1,E,N1,W" P1 directed:True)
        (track "TrackOpposite2" "9,W,N1,E,N1,W" P2 directed:True)
        > 
    "The track is a boustrophedon track with backward track.")**
    }
)

//------------------------------------------------------------------------------

(option "Dice" <Dice> args:{<dice>}
    {
    (item "4xD2" <("StickDice" 4)> "Four D2.")**
    }
)

//----------------------------------------------------

(option "Throw" <Throw> args:{<throw>}
    {
    (item "Piccione-Kendall" <(map {(pair 0 5) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)})> "The value of the throw is equal to the sum except when the sum is 0 the throw = 5.")**
    }
)

//----------------------------------------------------

(option "Play Rules" <Ruleset> args:{<piece> <rules>}
    {
    (item "Kendall 5 pieces" 
        <>
        <
        ("KendallRules" ("FivePiecesOnBoard") ("NoStartingThrow") ("BearOffPiece") ("BearOffPieceOnWater"))
        > 
    "The rules of Kendall with 5 pieces.")**
})

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (rules "Dessa regler föreslogs av egyptologen Timothy Kendall. >Pjäser rör sig enligt tärningarnas kast längs brädet. Målet är att flytta alla pjäser från brädet med ett exakt kast. Om en spelare landar på motståndarens pjäs skickas den tillbaka till start. Att ha två pjäser i på varandra följande utrymmen hindrar din motståndare från att kunna göra detta. Markerade utrymmen på tavlan indikerar antingen säkra utrymmen eller farliga utrymmen som bör undvikas.")
        }
    )
    
    (graphics {
        
        (show Symbol "3nefer" Cell 5 scale:0.75)
        (show Symbol "water" Cell 6 scale:0.75)
        (show Symbol "3flags" Cell 7 scale:0.75)
        (show Symbol "2flags" Cell 8 scale:0.75)
        (show Symbol "horus" Cell 9 scale:0.9)
        
        (board Colour Symbols (colour DarkBrown))
        (piece ExtendName P2 "2")  
    })
    
)
