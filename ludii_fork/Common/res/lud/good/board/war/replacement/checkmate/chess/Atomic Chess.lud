(define "Boom"
    (forEach Site (sites Around #1 includeSelf:False)
        (if (and { 
                (is Occupied (site)) 
                (and
                    (not ("IsPieceAt" "Pawn" P1 (site))) 
                    (not ("IsPieceAt" "Pawn" P2 (site))) 
                )
            })
            (remove (site))
        )
    )		
)

(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))))
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    )
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if ("IsEnemyAt" (to))
            (and {
                (remove (to))
                ("Boom" (to))
                (set Counter)
            })
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    ) 
)

(define "DecideToCastle"
    (move Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "Castling"
    (if (and 
            ("HasNeverMoved" "King")
            (not ("IsInCheck" "King" Mover)) 
        )
        (or
            (if (and 
                    ("HasNeverMoved" "RookLeft")
                    (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                )
                "BigCastling"
            )
            (if (and 
                    ("HasNeverMoved" "RookRight")
                    (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                )
                "SmallCastling"
            )
        )
    )		
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (and {
                (remove (ahead (last To) Backward))
                (remove (last To))
                ("Boom" (last To))
            })
        )
    )
)

(define "CaptureForwardDiagonal"
    ("StepToEnemy" (directions {FR FL}) 
        (then
            (and {
                (remove (last To))
                ("Boom" (last To))
            })
        )
    )
)

//------------------------------------------------------------------------------

(game "Atomic Chess" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    ("DoubleStepForwardToEmpty" "SetEnPassantLocation")
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion")) 
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (move Slide 
                Orthogonal 
                (to 
                    if:("IsEnemyAt" (to)) 
                    "CaptureToPieceAndResetCounter"
                ) 
                ("RememberPieceHasMoved")
            )
        )
        (piece "King" Each 
            (move Step 
                (to 
                    if:(is Empty (to))
                ) 
                ("RememberPieceHasMoved")
            )
        )
        (piece "Bishop" Each 
            (move Slide 
                Diagonal 
                (to 
                    if:("IsEnemyAt" (to)) 
                    ("CaptureToPieceAndResetCounter")
                ) 
            )
        )
        (piece "Knight" Each 
            (move Leap 
                "KnightWalk" 
                (to 
                    if:(not ("IsFriendAt" (to))) 
                    ("CaptureToPieceAndResetCounter")
                ) 
            )
        )
        (piece "Queen" Each 
            (move Slide 
                (to 
                    if:("IsEnemyAt" (to)) 
                    ("CaptureToPieceAndResetCounter")
                ) 
            ) 
        )
        
        (map "King" {(pair 1 "E1") (pair 2 "E8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top))
        (regions "Promotion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) 
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1) 
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do 
                    (or 
                        (forEach Piece)
                        ("Castling")
                    )
                    ifAfterwards:(and
                        (not ("IsInCheck" "King" Mover))
                        ("IsNotOffBoard" (where "King" Mover))
                    )
                )
            )
        )
        
        (end {
            (if (or
                    (and 
                        ("IsInCheck" "King" Next)
                        ("NextCanNotMove")
                    ) 
                    ("IsOffBoard" (where "King" Next))
                )
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) 
        })
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Atomic chess is a chess variant. Standard rules of chess apply, but all captures result in an \"explosion\" through which all surrounding white and black pieces other than pawns are removed from play.")
        (rules "In standard chess, the captured piece is removed from the board and the capturing piece takes its place. In atomic chess, a capture causes an \"explosion\" through which both pieces are removed from the board as well as all non-pawn pieces in the eight squares immediately surrounding the capture. Pawns are removed only when capturing, captured directly, or promoted. In case of en passant, the capture is considered to take place on the sixth rank square where the capturing pawn would have landed. Captures that result in the explosion of a player's own king are illegal, and therefore a king can never capture any other piece.
            
        To win, a checkmate or an explosion of the opponent king is necessary.")
        (id "1781")
        (source "<a href=\"https://en.wikipedia.org/wiki/Atomic_chess\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.10")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        (date "1995")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
    (ai
        "Atomic Chess_ai"
    )
)
