(define "IsSingleAt" (= 1 (size Stack at:#1)))
(define "IsDoubleAt" (= 2 (size Stack at:#1)))

(define "Transpose"
    (if ("IsDoubleAt" (from))
        (move Step (directions {FR FL})
            (to 
                if:(and
                    (is Friend (who at:(to)))
                    ("IsSingleAt" (to))
                )
            )
        )
    )	
)

(define "SlideDiagonal"
    (move Slide 
        (if ("IsSingleAt" (from))
            (directions {FR FL}) 
            (directions {BR BL}) 
        )
        stack:True
    )
)

(define "FurthestRow" (sites Mover))
(define "NearestRow" (sites Next))

(define "OwnedSitesInFurthestRow"
    (intersection (sites Occupied by:Mover) ("FurthestRow"))
)

(define "OwnedSitesNotInFurthestRow"
    (difference (sites Occupied by:Mover) ("FurthestRow"))
)

(define "IsSingleInFurthestRow"
    (not
        (all Sites ("OwnedSitesInFurthestRow")
            if:(not ("IsSingleAt" (site)))
        )
    )
)

(define "SingleNotInFurthestRow"
    (not
        (all Sites ("OwnedSitesNotInFurthestRow")
            if:(not ("IsSingleAt" (site)))
        )
    )		
)

(define "CanCrown"
    (and
        ("IsSingleInFurthestRow")
        ("SingleNotInFurthestRow")
    )	
)

(define "Crown"
    (move
        (from "OwnedSitesNotInFurthestRow" if:("IsSingleAt" (from)))
        (to ("OwnedSitesInFurthestRow") if:("IsSingleAt" (to)))
    )	
)

//------------------------------------------------------------------------------

(game "Goal and Crown" 
    (players {(player N) (player S)})
    (equipment { 
        (board (square 8)) 
        (piece "Pawn" Each 
            (priority {
                ("Transpose")
                ("SlideDiagonal") 
            })
        )
        (regions P1 (sites Top))
        (regions P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Bottom))
            (place "Pawn2" (sites Top))
            (place Stack "Pawn1" (sites {"B7" "D7" "F7" "H7"}) count:2)
            (place Stack "Pawn2" (sites {"B2" "D2" "F2" "H2"}) count:2)
        })
        
        (play 
            (if ("SameTurn")
                ("Crown")
                (forEach Piece
                    (then
                        (if 
                            ("CanCrown")
                            (moveAgain)
                        )
                    )		
                )
            )
        )
        
        (end (if (no Pieces Mover) (result Mover Win))) 
    )
)

//------------------------------------------------------------------------------

(metadata
    
    (graphics {
        (board Style Chess)
    })
    
)
