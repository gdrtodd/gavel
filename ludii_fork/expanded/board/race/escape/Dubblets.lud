2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Two six-sided dice. Play occurs only in two quadrants of the board, opposite one another, a player's pieces only leaving their quadrant to bear off. Two pieces are stacked each on the first three points, and three are stacked in the second three points. Players use throws to unstack pieces on their points, unstacking one piece per die which corresponds to that point. Doubles allow the player to unstack or bear off a number of pieces equal to the total number of the throw. When all of the pieces are unstacked, that player may begin bearing their pieces off. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The first player to bear off all their pieces wins.
(game "Dubblets" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5} P1 directed:True) (track "Track2" {12 13 14 15 16 17} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die if:(notEqual (pips) 0) (if (equals (trackSite Move steps:(pips)) -1) (move Remove (from)) (move (from) (to (trackSite Move steps:(pips))))))) (hand Each) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2}) count:2) (place Stack "Disc1" (sites {3 4 5}) count:3) (place Stack "Disc2" (sites {12 13 14}) count:2) (place Stack "Disc2" (sites {15 16 17}) count:3)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(if (or (lt 0 (var "Double")) (all DiceEqual)) (do (if (ge 0 (var "Double")) (set Var "Double" (count Pips))) next:(forEach Site (sites Occupied by:Mover) (if (equals (state at:(site)) 0) (move Select (from (site)) (then (if (equals 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 2))))) (if (equals (state at:(site)) 1) (move Select (from (site)) (then (forEach Level (last To) (set State at:(last To) level:(level) 2)))))) (then (and (if (lt 1 (var "Double")) (moveAgain)) (set Var "Double" (sub (var "Double") 1)))))) (forEach Die if:(notEqual (pips) 0) (or (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 0) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and (if (equals 3 (size Stack at:(last To))) (forEach Level (last To) (set State at:(last To) level:(level) 1)) (forEach Level (last To) (set State at:(last To) level:(level) 2))) (if (not (all DiceUsed)) (moveAgain)))))) (if (equals (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(sub (pips) 1))) (then (and (forEach Level (last To) (set State at:(last To) level:(level) 2)) (if (not (all DiceUsed)) (moveAgain))))))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (or (equals (state at:(site)) 0) (equals (state at:(site)) 1)))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll)) next:(if (or (lt 0 (var "Double")) (all DiceEqual)) (do (if (ge 0 (var "Double")) (set Var "Double" (count Pips))) next:(forEach Site (sites Occupied by:Mover) (move Remove (site)) (then (and (if (lt 1 (var "Double")) (moveAgain)) (set Var "Double" (sub (var "Double") 1)))))) (forEach Piece top:True)) (then (if (not (all DiceUsed)) (moveAgain))))) (end (if (no Pieces Mover) (result Mover Win))))})) 
