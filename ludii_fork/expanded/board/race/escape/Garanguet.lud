The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has fifteen pieces, which all begin on the first point of their track. Three dice are used. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a player rolls triples, the throw is played three times. If a player throws a pair among the three dice, they play the dice as normal if the third die has a greater value than the value which appears twice. If the value of the third die is lower, the player plays the doubles twice and the single value once. When a piece lands on a point with a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the quadrant of the board from which it began. When a piece reaches the end of the track, it may bear off the board with a throw greater than the number of points remaining in the track. The player who bears off all their pieces first wins.
(game "Garanguet" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice num:3) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {7 8 9 10 11 12}) (regions "Home" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 12 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (forEach Site (sites Occupied by:Mover) (if (equals (trackSite Move from:(site) steps:(div (count Pips) 3)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(div (count Pips) 3)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (lt (value Player Mover) 8) (and (moveAgain) (if (lt (value Player Mover) 0) (set Value Mover 1) (set Value Mover (add 1 (value Player Mover))))) (set Value Mover 0)))) (if (or {(and (equals (face 26) (face 27)) (gt (face 26) (face 28))) (and (equals (face 26) (face 28)) (gt (face 26) (face 27))) (and (equals (face 27) (face 28)) (gt (face 27) (face 26)))}) (or (if (not (and (equals (value Player Mover) 0) (notEqual (count MovesThisTurn) 0))) (forEach Site (sites Occupied by:Mover) (if (equals (trackSite Move from:(site) steps:(if (and (equals (face 26) (face 27)) (gt (face 26) (face 28))) (face 26) (if (and (equals (face 26) (face 28)) (gt (face 26) (face 27))) (face 26) (face 27)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (equals (face 26) (face 27)) (gt (face 26) (face 28))) (face 26) (if (and (equals (face 26) (face 28)) (gt (face 26) (face 27))) (face 26) (face 27)))) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (and (if (lt (count MovesThisTurn) 4) (moveAgain)) (if (lt (value Player Mover) 3) (if (lt (value Player Mover) 0) (set Value Mover 1) (set Value Mover (add 1 (value Player Mover)))) (set Value Mover 0)))))) (if (or (or (equals (count MovesThisTurn) (value Player Mover)) (and (equals (count MovesThisTurn) 0) (lt (value Player Mover) 0))) (and (notEqual (count MovesThisTurn) 0) (equals (value Player Mover) 0))) (forEach Site (sites Occupied by:Mover) (if (equals (trackSite Move from:(site) steps:(if (and (equals (face 26) (face 27)) (gt (face 26) (face 28))) (face 28) (if (and (equals (face 26) (face 28)) (gt (face 26) (face 27))) (face 27) (face 26)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (equals (face 26) (face 27)) (gt (face 26) (face 28))) (face 28) (if (and (equals (face 26) (face 28)) (gt (face 26) (face 27))) (face 27) (face 26)))) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (lt (count MovesThisTurn) 4) (moveAgain) (set Value Mover 0)))))) (forEach Die if:(notEqual (pips) 0) (forEach Site (sites Occupied by:Mover) (if (equals (trackSite Move from:(site) steps:(pips)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (equals 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (not (all DiceUsed)) (moveAgain))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
