5x5 board, marked with an X in the central square and the midpoints of the outer circuit of spaces. Four players. Four pieces per player. Four seeds, with one white side and one dark side, used as dice. The values of the throws are equal to the number of white sides up, except when no white sides are up the throw equals 8. Throws of 1, 4, and 8 grant the player another throw. Players make all of the throws in their turn first, and then move the values of the throws individually. A player cannot subdivide the value of a single throw between pieces, but may move more than one piece in a turn if they have multiple throws, moving a piece the value of an entire throw. Pieces may only enter the board with a throw of 1. When a player has no pieces on the board, throws made before a throw of 1 do not count and cannot be played. Pieces enter on the marked square on the outer track of the square in front of the player. Pieces move anticlockwise around the outer squares of the board until they reach the square just before the square from which they started, then moving to the inner track and moving clockwise, and then onto the central square. Multiple pieces may occupy the same square. If a player's piece lands on a spot occupied by an opponent's piece, the opponent's piece is removed from the board and must be entered again. If the opponent has multiple pieces on this spot, they all are sent to the beginning. Sending an opponent's piece off the board grants the player another throw. Pieces on marked squares cannot be sent off the board. If a player has two pieces on the marked square on the opposite side of the board from the one in which they begin, the player may declare these as a twin which then play as one piece. Twins move half the value of a throw, rounding down. Twins may only be sent off the board by another twin. Twins may not send back to start a single piece belonging to an opponent. When sent off the board, the twins enter the board again as single pieces. When the twin reaches the central space, it becomes two single pieces again. When all of a player's pieces are in the central square, they may begin bearing them off. A throw of 1 is required to bear a piece off. The player who bears off all their pieces first wins.
(game "Thaayam" (players 4) (equipment {(board (square 5) {(track "Track1" "2,E,N,W,S,E1,N3,E2,S2,W1,N1" P1 directed:True) (track "Track2" "14,N,W,S,E,N1,W3,N2,E2,S1,W1" P2 directed:True) (track "Track3" "22,W,S,E,N,W1,S3,W2,N2,E1,S1" P3 directed:True) (track "Track4" "10,S,E,N,W,S1,E3,S2,W2,N1,E1" P4 directed:True)}) (hand Each) (regions "MarkedCells" (union {(sites Centre) (intersection (sites Outer) (sites Row (row of:(centrePoint)))) (intersection (sites Outer) (sites Column (column of:(centrePoint))))})) (piece "Counter" Each (or (if (notEqual (trackSite Move steps:(value)) -1) (move (from (from) level:(level)) (to (trackSite Move steps:(value)) (apply if:True (and (if (and {(is Enemy (who at:(to))) (equals (value Piece at:(to)) 1) (not (is In (to) (sites "MarkedCells")))}) (fromTo (from (to)) (to (handSite (who at:(to))) (apply if:True (and (set Pending) (moveAgain)))) count:(size Stack at:(to)) stack:True)) (forget Value (value))))))) (if (and (equals 1 (value)) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Centre)))) (move (from (from) level:(level)) (to (handSite Mover) (apply if:True (forget Value (value)))) (then (remove (last To))))))) (piece "DoubleCounter" Each (if (and (gt (div (value) 2) 0) (notEqual (trackSite Move steps:(div (value) 2)) -1)) (move (from (from) level:(level)) (to (trackSite Move steps:(div (value) 2)) (apply if:True (and (if (and {(is Enemy (who at:(to))) (equals (value Piece at:(to)) 2) (not (is In (to) (sites "MarkedCells")))}) (and {(remove (to)) (add (piece (if (equals (who at:(to)) P1) (id "Counter" P1) (if (equals (who at:(to)) P2) (id "Counter" P2) (if (equals (who at:(to)) P3) (id "Counter" P3) (id "Counter" P4))))) (to (handSite (who at:(to)))) count:2 stack:True) (set Pending) (moveAgain)})) (forget Value (value))))) (then (if (equals (centrePoint) (last To)) (and (remove (last To)) (add (piece (if (equals (who at:(last To)) P1) (id "Counter" P1) (if (equals (who at:(last To)) P2) (id "Counter" P2) (if (equals (who at:(last To)) P3) (id "Counter" P3) (id "Counter" P4))))) (to (last To)) count:2 stack:True))))))) (dice d:2 from:0 num:4) (map "Start" {(pair P1 2) (pair P2 14) (pair P3 22) (pair P4 10)}) (map "OppositeStart" {(pair P1 22) (pair P2 10) (pair P3 2) (pair P4 14)})}) (rules (start {(place Stack "Counter1" (handSite P1) count:4 value:1) (place Stack "Counter2" (handSite P2) count:4 value:1) (place Stack "Counter3" (handSite P3) count:4 value:1) (place Stack "Counter4" (handSite P4) count:4 value:1)}) (play (if (can Move (if (or (not (is Prev Mover)) (is Pending)) (do (roll) next:(move Pass (then (and {(if (or {(equals (if (equals 0 (count Pips)) 8 (count Pips)) 1) (equals (if (equals 0 (count Pips)) 8 (count Pips)) 4) (equals (if (equals 0 (count Pips)) 8 (count Pips)) 8)}) (set Pending)) (if (not (all Sites (sites Occupied by:Mover) if:(not (is In (site) (sites Board))))) (remember Value (if (equals 0 (count Pips)) 8 (count Pips))) (if (or (equals (if (equals 0 (count Pips)) 8 (count Pips)) 1) (is In 1 (values Remembered))) (remember Value (if (equals 0 (count Pips)) 8 (count Pips))))) (moveAgain)})))) (or (forEach Value (values Remembered) (or (if (and (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site))))) (equals 1 (value))) (move (from (handSite Mover)) (to (mapEntry "Start" (mover)) (apply if:True (forget Value (value)))))) (forEach Piece) (then (if (notEqual 0 (size Array (values Remembered))) (moveAgain))))) (if (and {(equals (size Stack at:(mapEntry "OppositeStart" (mover))) 2) (equals (who at:(mapEntry "OppositeStart" (mover)) level:0) Mover) (equals (who at:(mapEntry "OppositeStart" (mover)) level:1) Mover)}) (move Select (from (mapEntry "OppositeStart" (mover))) (then (and {(remove (mapEntry "OppositeStart" (mover)) count:2) (add (piece (id "DoubleCounter" Mover)) (to (mapEntry "OppositeStart" (mover))) (then (set Value at:(mapEntry "OppositeStart" (mover)) 2))) (moveAgain)}))))))) (if (or (not (is Prev Mover)) (is Pending)) (do (roll) next:(move Pass (then (and {(if (or {(equals (if (equals 0 (count Pips)) 8 (count Pips)) 1) (equals (if (equals 0 (count Pips)) 8 (count Pips)) 4) (equals (if (equals 0 (count Pips)) 8 (count Pips)) 8)}) (set Pending)) (if (not (all Sites (sites Occupied by:Mover) if:(not (is In (site) (sites Board))))) (remember Value (if (equals 0 (count Pips)) 8 (count Pips))) (if (or (equals (if (equals 0 (count Pips)) 8 (count Pips)) 1) (is In 1 (values Remembered))) (remember Value (if (equals 0 (count Pips)) 8 (count Pips))))) (moveAgain)})))) (or (forEach Value (values Remembered) (or (if (and (not (all Sites (sites Hand Mover) if:(equals 0 (count Cell at:(site))))) (equals 1 (value))) (move (from (handSite Mover)) (to (mapEntry "Start" (mover)) (apply if:True (forget Value (value)))))) (forEach Piece) (then (if (notEqual 0 (size Array (values Remembered))) (moveAgain))))) (if (and {(equals (size Stack at:(mapEntry "OppositeStart" (mover))) 2) (equals (who at:(mapEntry "OppositeStart" (mover)) level:0) Mover) (equals (who at:(mapEntry "OppositeStart" (mover)) level:1) Mover)}) (move Select (from (mapEntry "OppositeStart" (mover))) (then (and {(remove (mapEntry "OppositeStart" (mover)) count:2) (add (piece (id "DoubleCounter" Mover)) (to (mapEntry "OppositeStart" (mover))) (then (set Value at:(mapEntry "OppositeStart" (mover)) 2))) (moveAgain)})))))) (move Pass (then (forEach Value (values Remembered) (forget Value (value))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
