Played on an 8x8 board with "trap" squares at C6, F6, C3 and F3. Each player has 16 pieces, in order from strongest to weakest: Elephant (1) Camel (1) Horse (2) Dog (2) Cat(2) Rabbit (8) Each player places their pieces in any configuration on their side of the board. Pieces can move one space orthogonally, except rabbits cannot move backward. The goal is for one of a player's rabbits to reach the opposing player's edge of the board. Players can capture an opponent's pieces by pulling or pushing them into one of the trap squares as long as there is no piece friendly to the piece being pulled or pushed adjacent to the trap square. Pieces can only push and pull adjacent opponent's pieces of a lower rank than the piece making the move. Pushing and pulling cannot happen simultaneously. Pieces can be frozen, or prevented from moving, when they are adjacent to an opposing stronger piece.
(game "Arimaa" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each size:6) (piece "Rabbit" Each (move Step (directions {Forward Rightward Leftward}) (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (piece "Cat" Each (move Step Orthogonal (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (piece "Dog" Each (move Step Orthogonal (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (piece "Horse" Each (move Step Orthogonal (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (piece "Camel" Each (move Step Orthogonal (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (piece "Elephant" Each (move Step Orthogonal (to if:(and (or (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0) (and (not (equals (count Sites in:(sites Around (from) Orthogonal if:(and (is Enemy (who at:(to))) (gt (value Piece at:(to)) (value Piece at:(from)))))) 0)) (not (equals (count Sites in:(sites Around (from) Orthogonal if:(equals (who at:(to)) Mover))) 0)))) (or (is Empty (to)) (and {(lt (count MovesThisTurn) 3) (not (equals (count Sites in:(sites Around (to) Orthogonal if:(is Empty (to)))) 0)) (is Enemy (who at:(to))) (lt (value Piece at:(to)) (value Piece at:(from)))}))) (apply (fromTo (from (to)) (to (handSite Mover))))))) (regions "Traps" (sites {"C3" "C6" "F3" "F6"})) (regions "Home" P1 (expand (sites Bottom))) (regions "Home" P2 (expand (sites Top))) (regions "Goal" P1 (sites Top)) (regions "Goal" P2 (sites Bottom))}) (rules (start {(place "Rabbit" "Hand" count:8 value:1) (place "Cat" "Hand" count:2 value:2) (place "Dog" "Hand" count:2 value:3) (place "Horse" "Hand" count:2 value:4) (place "Camel" "Hand" count:1 value:5) (place "Elephant" "Hand" count:1 value:6)}) phases:{(phase "PlacementP1" (play (move (from (sites Occupied by:Mover container:(mover))) (to (forEach (sites Mover "Home") if:(is Empty (site)))) (then (if (not (all Sites (sites Hand P1) if:(equals 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(equals 0 (count Cell at:(site)))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Occupied by:Mover container:(mover))) (to (forEach (sites Mover "Home") if:(is Empty (site)))) (then (if (all Sites (sites Hand P2) if:(equals 0 (count Cell at:(site)))) (remember State) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(equals 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (avoidStoredState (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (sites Around (last To) Orthogonal if:(and (notEqual (last From) (to)) (is Empty (to))))) (then (and (forEach Site (sites "Traps") (if (or (and (equals (who at:(to)) P1) (equals (count Sites in:(sites Around (site) Orthogonal if:(equals (who at:(to)) P1))) 0)) (and (equals (who at:(to)) P2) (equals (count Sites in:(sites Around (site) Orthogonal if:(equals (who at:(to)) P2))) 0))) (do (set Pending (value Piece at:(to))) next:(remove (to))))) (if (lt (count MovesThisTurn) 3) (moveAgain) (remember State))))) (or (or (if (and (is Prev Mover) (is In (last From) (sites Board))) (move (from (sites Around (last From) Orthogonal if:(and (is Enemy (who at:(to))) (if (and (is In (last To) (sites "Traps")) (is Pending)) (lt (value Piece at:(to)) (value Pending)) (lt (value Piece at:(to)) (value Piece at:(last To))))))) (to (last From)))) (forEach Piece) (then (and (forEach Site (sites "Traps") (if (or (and (equals (who at:(to)) P1) (equals (count Sites in:(sites Around (site) Orthogonal if:(equals (who at:(to)) P1))) 0)) (and (equals (who at:(to)) P2) (equals (count Sites in:(sites Around (site) Orthogonal if:(equals (who at:(to)) P2))) 0))) (do (set Pending (value Piece at:(to))) next:(remove (to))))) (if (lt (count MovesThisTurn) 3) (moveAgain) (remember State))))) (move Pass (then (remember State))))))) (end (if (not (is Next Mover)) {(if (notEqual 0 (count Sites in:(forEach (sites Occupied by:P1 component:"Rabbit") if:(is In (site) (sites P1 "Goal"))))) (result P1 Win)) (if (notEqual 0 (count Sites in:(forEach (sites Occupied by:P2 component:"Rabbit") if:(is In (site) (sites P2 "Goal"))))) (result P2 Win)) (if (and (not (equals (what at:(handSite P2)) (id "Rabbit" P1))) (equals (count Sites in:(sites Occupied by:P1 component:"Rabbit")) 0)) (result P2 Win)) (if (and (not (equals (what at:(handSite P1)) (id "Rabbit" P2))) (equals (count Sites in:(sites Occupied by:P2 component:"Rabbit")) 0)) (result P1 Win)) (if (no Moves Next) (result Next Loss))})))})) 
