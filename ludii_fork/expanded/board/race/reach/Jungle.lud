Each turn consists of moving a piece one square orthogonally in any direction. An animal may eat any animal smaller than itself by moving on to its square. The only exception to this rule is that the rat can kill the elephant. If the same animals meet, the animal moving on to a square eats the animal already there. Three pieces have special powers. When the rat reaches the river it can enter it and move along those squares squares as if it were any other. If it is in the river no other animal can attack it. The rat is unable to attack the elephant from the river. If both rats meet in the river the moving piece eats the other one. When a lion or a tiger reaches a square on the edge of the river, at the next move it can jump over the river in any orthogonal direction, landing on the nearest land square. It captures any smaller animal on that square: if, however, there is a rat in the river in the line of the jump, it blocks this move. Each side has three trap-squares and the player's own pieces may move on and off them without restriction, but if an enemy animal occupies a trap-square, it loses all its power and becomes weaker than any defending piece. As soon as it moves out of the trap it regains its full strength. A player may not move any of his animals on to his own den. The player who moves any of their pieces into the enemy's den wins.
(game "Jungle" (players 2) (equipment {(board (rectangle 9 7)) (piece "Elephant" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to)))))) (piece "Lion" Each (or {(move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to))))) (move Hop (directions {W E}) (between (max 2) if:(is In (between) (forEach (sites "Water") if:(is Empty (site)))) (apply (remove (between)))) (to if:(and {(not (is In (to) (sites "Water"))) (not (is Friend (who at:(to)))) (le (state at:(to)) (state at:(from)))}))) (move Hop (directions {N S}) (between (max 3) if:(is In (between) (forEach (sites "Water") if:(is Empty (site)))) (apply (remove (between)))) (to if:(and {(not (is In (to) (sites "Water"))) (not (is Friend (who at:(to)))) (le (state at:(to)) (state at:(from)))})))})) (piece "Tiger" Each (or {(move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to))))) (move Hop (directions {W E}) (between (max 2) if:(is In (between) (forEach (sites "Water") if:(is Empty (site)))) (apply (remove (between)))) (to if:(and {(not (is In (to) (sites "Water"))) (not (is Friend (who at:(to)))) (le (state at:(to)) (state at:(from)))}))) (move Hop (directions {N S}) (between (max 3) if:(is In (between) (forEach (sites "Water") if:(is Empty (site)))) (apply (remove (between)))) (to if:(and {(not (is In (to) (sites "Water"))) (not (is Friend (who at:(to)))) (le (state at:(to)) (state at:(from)))})))})) (piece "Leopard" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to)))))) (piece "Dog" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to)))))) (piece "Wolf" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to)))))) (piece "Cat" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (union (sites "Water") (sites Mover)))) (le (state at:(to)) (state at:(from)))) (apply (remove (to)))))) (piece "Rat" Each (move Step Orthogonal (to if:(and (is In (to) (difference (union (sites Occupied by:Next) (sites Empty)) (sites Mover))) (or (le (state at:(to)) (state at:(from))) (and (not (is In (from) (sites "Water"))) (equals (what at:(to)) (id "Elephant" Next))))) (apply (remove (to)))))) (regions "Water" (sites {"B4" "C4" "B5" "C5" "B6" "C6" "E4" "F4" "E5" "F5" "E6" "F6"})) (regions "Trap" (sites {"C1" "E1" "D2" "D8" "C9" "E9"})) (regions "Den" P1 (sites {"D1"})) (regions "Den" P2 (sites {"D9"})) (map {(pair 1 8) (pair 2 8) (pair 3 7) (pair 4 7) (pair 5 6) (pair 6 6) (pair 7 5) (pair 8 5) (pair 9 4) (pair 10 4) (pair 11 3) (pair 12 3) (pair 13 2) (pair 14 2) (pair 15 1) (pair 16 1)})}) (rules (start {(place "Rat1" coord:"G3" state:1) (place "Rat2" coord:"A7" state:1) (place "Cat1" coord:"B2" state:2) (place "Cat2" coord:"F8" state:2) (place "Wolf1" coord:"C3" state:3) (place "Wolf2" coord:"E7" state:3) (place "Dog1" coord:"F2" state:4) (place "Dog2" coord:"B8" state:4) (place "Leopard1" coord:"E3" state:5) (place "Leopard2" coord:"C7" state:5) (place "Tiger1" coord:"A1" state:6) (place "Tiger2" coord:"G9" state:6) (place "Lion1" coord:"G1" state:7) (place "Lion2" coord:"A9" state:7) (place "Elephant1" coord:"A3" state:8) (place "Elephant2" coord:"G7" state:8)}) (play (forEach Piece (then (and (if (is In (last From) (sites "Trap")) (set State at:(last To) (mapEntry (what at:(last To))))) (if (is In (last To) (sites "Trap")) (set State at:(last To) 0)))))) (end (if (is In (last To) (sites Next)) (result Mover Win))))) 
