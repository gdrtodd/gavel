Forty stones, arranged in a circle, with larger gaps (doors) between the stones after every ten. The gaps between the stones are the playing spaces. Any number of players. One stick per player. Three sticks used as dice, one marked with two notches, one marked with three notches, the other marked with ten notches. The value of the throw is the number of notches which land face up. Players move their sticks around the board, beginning at one of the doors. Players may choose in which direction to proceed around the board. When a player lands on the same space as an opponent, the opponent's piece is sent back to the starting door. The first player to complete the circuit of the board wins. The game has 2 players.
(game "Kawasukuts" (players 2) (equipment {(board (add (remove (concentric {44}) vertices:{43 21 0 22}) edges:{{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} loop:True) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} loop:True)} use:Edge) (regions "Gates" (sites {36 37 38 39})) (piece "Marker" Each (if (equals (value Player Mover) -1) (or (if (notEqual (trackSite Move "TrackCW" steps:(count Pips)) -1) (if (or (is In (trackSite Move "TrackCW" steps:(count Pips)) (sites Empty)) (is Enemy (who at:(trackSite Move "TrackCW" steps:(count Pips))))) (move (from (from) level:(level)) (to (trackSite Move "TrackCW" steps:(count Pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to)))))))) (then (if (equals (value Player Mover) -1) (set Value Mover 1)))) (if (notEqual (trackSite Move "TrackCCW" steps:(count Pips)) -1) (if (or (is In (trackSite Move "TrackCCW" steps:(count Pips)) (sites Empty)) (is Enemy (who at:(trackSite Move "TrackCCW" steps:(count Pips))))) (move (from (from) level:(level)) (to (trackSite Move "TrackCCW" steps:(count Pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to)))))))) (then (if (equals (value Player Mover) -1) (set Value Mover 2))))) (if (notEqual (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(count Pips)) (trackSite Move "TrackCW" steps:(count Pips))) -1) (if (or (is In (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(count Pips)) (trackSite Move "TrackCW" steps:(count Pips))) (sites Empty)) (is Enemy (who at:(if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(count Pips)) (trackSite Move "TrackCW" steps:(count Pips)))))) (move (from (from) level:(level)) (to (if (equals (value Player Mover) 2) (trackSite Move "TrackCCW" steps:(count Pips)) (trackSite Move "TrackCW" steps:(count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (value Piece at:(to))))))))))) (dice d:2 facesByDie:{{0 2} {0 3} {0 10}} num:3) (hand Each)}) (rules (start (place "Marker" "Hand")) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites "Gates")) (then (set Value at:(last To) (last To))))) (nextPhase Mover "Playing")) (phase "Playing" (play (do (roll) next:(forEach Piece))) (end (if (and (notEqual 0 (count Pips)) (if (equals 1 (value Player Mover)) (is In (value Piece at:(where "Marker" Mover)) (sites Track "TrackCW" from:(trackSite Move from:(last From) "TrackCW" steps:1) to:(last To))) (is In (value Piece at:(where "Marker" Mover)) (sites Track "TrackCCW" from:(trackSite Move from:(last From) "TrackCCW" steps:1) to:(last To))))) (result Mover Win))))})) 
