Four 3x8 rectangles, arranged in a cross-shaped board. the fourth square, counting from the outer corners, in the outer rows of each arm are marked. Four pieces per player. Six cowrie shells are used as dice. The value of the throws is as follows: one mouth up = 10; two mouths up = 2, three mouths up = 3; four mouths up = 5; five mouths up = 25; six mouths up = 12; all mouths down = 6. On the first turn, players get three throws, and enter a piece for every throw of 10 or 25. On the top left square in their arm. Players move their pieces around the board in an anti-clockwise direction. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must enter again. Pieces resting on marked squares are safe from being removed from the board. When a piece completes a circuit of the board. It moves toward the central row in the player's arm, and progresses up the central row into the large square in the center of the board. The player who moves all of their pieces into the center first wine.
(game "Pasit" (players 4) (equipment {(board (add (hole (merge (shift 0 (div (sub 19 3) 2) (rectangle 3 19)) (shift (div (sub 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "8,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 directed:True) (track "Track2" "42,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "Track3" "53,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "Track4" "11,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (equals (trackSite Move from:(from) steps:(mapEntry "Throw" (count Pips))) -1) (move (from (from) level:(level)) (to (centrePoint))) (move (from (from) level:(level)) (to (trackSite Move from:(from) steps:(mapEntry "Throw" (count Pips))) if:True (apply (if (and (not (is In (to) (sites "SafeSites"))) (is Enemy (who at:(to)))) (forEach Level (to) FromTop (fromTo (from (to) level:(level)) (to (handSite (who at:(to) level:(level)))))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 5) (pair 5 25) (pair 6 12)}) (map "Entry" {(pair P1 8) (pair P2 42) (pair P3 53) (pair P4 11)}) (regions "SafeSites" (sites {63 65 15 47 84 86 38 3}))}) (rules (start {(place Stack "Pawn1" (handSite P1) count:4) (place Stack "Pawn2" (handSite P2) count:4) (place Stack "Pawn3" (handSite P3) count:4) (place Stack "Pawn4" (handSite P4) count:4)}) phases:{(phase "Opening" (play (do (roll) next:(if (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30})) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover))) (move Pass) (then (and (if (notEqual 1 (value Player Mover)) (moveAgain)) (set Value Mover (add 1 (value Player Mover)))))))) (nextPhase Mover (equals 2 (value Player Mover)) "Moving")) (phase "Moving" (play (do (roll) next:(or (if (and (is Occupied (handSite Mover)) (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30}))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)))) (forEach Piece)))))} (end (if (and (equals 1 (count Sites in:(sites Occupied by:Mover top:False))) (is In (centrePoint) (sites Occupied by:Mover top:False))) (result Mover Win))))) 
