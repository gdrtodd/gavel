4x4 board, with an extension of four squares extending from the left of the bottom row. Two or more players, each with one piece. A piece of charcoal plays the part of the Ghoula. Four sticks, with one green side and one white side, used as dice. The throws are as follows: One white side up = 1, this throw is known as "sig"; two white sides up = 0; three white sides up = 3; four white sides up = 4; all green sides up = 6. Throws of sig, 6, and 4 grant the player another throw. All pieces begin on the top left square of the grid, proceed in a boustrophedon path down the grid, toward the space at the end of the extension, the Ka'aba. Players must throw a sig to move from the first space. When a player reaches the fifteenth space in the track, they must make seven throws of sig before moving on, moving to the sixteenth spot on the seventh throw. After reaching the sixteenth spot, only throws of sig and 3 are used; sig to move one space, and 3 to move the Ghoula three spaces. The goal for each player is to reach the Ka'aba. Upon reaching the Ka'aba, the player continues to throw, all throws used to control the Ghoula, but throws of 0 now counts as 2. The Ghoula, when reaching a space occupied by a player, continues their turn dragging the player back to the starting space. If the Ghoula succeeds in bringing the piece back to the starting space, that player loses. The Ghoula cannot move past the fifteenth space in the track. The game has 4 players.
(game "Sig wa Duqqan (Houmt al-Arbah)" (players 4) (equipment {(board (merge {(shift -4 0 (rectangle 1 4)) (square 4) (shift -4 3 (square 1))}) {(track "Track" "16,E,S1,W,S1,E,S1,W2" directed:True) (track "ExtensionTrack" "4,W" directed:True) (track "GhoulaTrack" "20,16,E,S1,W,S1,E,S1,W2" directed:True) (track "ReverseGhoulaTrack" "6,E,N1,W,N1,E,N1,W" directed:True)}) (piece "Ghoula" Neutral) (piece "Stick" Each (if (equals (from) 6) (if (equals (state at:(from) level:(level)) 8) (move (from (from) level:(level)) (to 4)) (if (equals (mapEntry "Throw" (count Pips)) 1) (move Select (from (from) level:(level)) (then (set State at:(last To) level:(last LevelTo) (add 1 (state at:(last To) level:(last LevelTo)))))))) (if (is In (from) (sites Track "Track")) (move (from (from) level:(level) if:(if (le 1 (state at:(from) level:(level))) True (equals (mapEntry "Throw" (count Pips)) 1))) (to (trackSite Move "Track" steps:(mapEntry "Throw" (count Pips))) if:True) (then (if (not (le 1 (state at:(last To) level:(topLevel at:(last To))))) (set State at:(last To) level:(topLevel at:(last To)) 1)))) (if (is In (from) (sites Track "ExtensionTrack")) (or {(if (and (notEqual (from) 0) (equals (mapEntry "Throw" (count Pips)) 1)) (move (from (from) level:(level)) (to (trackSite Move "ExtensionTrack" steps:1)))) (if (equals (from) 0) (move Pass (then (and (if (equals 0 (mapEntry "Throw" (count Pips))) (set Var 2) (set Var (mapEntry "Throw" (count Pips)))) (moveAgain)))) (if (equals 3 (mapEntry "Throw" (count Pips))) (move Pass (then (and (set Var 3) (moveAgain))))))})))) maxState:8) (dice d:2 from:0 num:4) (map "Throw" {(pair 0 4) (pair 1 3) (pair 2 0) (pair 3 1) (pair 4 6)})}) (rules (start {(place Stack "Ghoula0" 20) (place Stack items:{"Stick4" "Stick3" "Stick2" "Stick1"} 16)}) (play (do (if (le (var) 0) (roll)) next:(if (gt (var) 0) (if (equals 1 (size Stack at:(where "Ghoula" Neutral))) (move (from (where "Ghoula" Neutral) level:(where Level "Ghoula" Neutral at:(where "Ghoula" Neutral))) (to (trackSite Move from:(where "Ghoula" Neutral) "GhoulaTrack" steps:1))) (move (from (where "Ghoula" Neutral) level:(where Level "Ghoula" Neutral at:(where "Ghoula" Neutral))) (to (trackSite Move from:(where "Ghoula" Neutral) "ReverseGhoulaTrack" steps:1)) (then (if (equals (last From) 17) (forEach Level (last From) FromTop (remove (last From) level:(level))) (forEach Level (last From) FromTop (fromTo (from (last From) level:(level)) (to (last To))))))) (then (if (and (equals 1 (size Stack at:(where "Ghoula" Neutral))) (equals 6 (where "Ghoula" Neutral))) (set Var 0) (and (if (gt (var) 1) (moveAgain)) (set Var (sub (var) 1)))))) (if (notEqual 0 (mapEntry "Throw" (count Pips))) (forEach Piece))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {1 6 4})) (moveAgain))))) (end {(forEach Player if:(no Pieces Player) (result Player Loss)) (forEach Player if:(and (equals 1 (size Stack at:(where "Ghoula" Neutral))) (equals 6 (where "Ghoula" Neutral))) (result Player Win))}))) 
