4x5 board. Five counters per hole. Players can sow from any hole. Sowing occurs orthogonally in any direction, and a player can change direction orthogonally at any point in the move, but can never double back. When the last counter falls into a hole, sowing continues if there are counters in the following holes; these are picked up and sowing continues from there. The hole from which the sowing continues will always be the next one in the opposite direction from the penultimate hole in which a counter was dropped. Therefore, if the sowing ends when a sowing hits an edge or corner, sowing does not continue. When the hole after the end of a sowing is empty, the counters in the next hole following it are captured, but captures cannot be made when the final counter falls into a hole from which a new direction must be chosen. Captures cannot be made from the central two holes of the board. The player who captures the most counters wins.
(game "Dongjintian (Four Players)" (players 4) (equipment {(mancalaBoard 4 5 store:None) (piece "Seed" Shared) (hand Each) (regions "ProtectingHoles" (sites {7 12}))}) (rules (start (set Count 5 to:(sites Board))) (play (if (and (is Prev Mover) (notEqual 0 (var "NumToSow"))) (if (can Move (move Select (from (last To)) (to (difference (sites Around (last To)) (sites (values Remembered "SowedSites")))) (then (and (add (piece (id "Seed" Shared)) (to (last To))) (if (lt 1 (var "NumToSow")) (and {(set Var "NumToSow" (sub (var "NumToSow") 1)) (moveAgain) (remember Value "SowedSites" (last From))}) (and {(forget Value "SowedSites" All) (set Var "NumToSow" 0) (if (notEqual (last To) (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (moveAgain) (if (notEqual (last To) (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (and (fromTo (from (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To))))) (if (and (notEqual (last To) (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To)))) (notEqual (last To) (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))) (if (and (is Occupied (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (is Empty (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To))))) (fromTo (from (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))))))))))})))))) (move Select (from (last To)) (to (difference (sites Around (last To)) (sites (values Remembered "SowedSites")))) (then (and (add (piece (id "Seed" Shared)) (to (last To))) (if (lt 1 (var "NumToSow")) (and {(set Var "NumToSow" (sub (var "NumToSow") 1)) (moveAgain) (remember Value "SowedSites" (last From))}) (and {(forget Value "SowedSites" All) (set Var "NumToSow" 0) (if (notEqual (last To) (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (moveAgain) (if (notEqual (last To) (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (and (fromTo (from (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To))))) (if (and (notEqual (last To) (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To)))) (notEqual (last To) (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))) (if (and (is Occupied (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (is Empty (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To))))) (fromTo (from (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))))))))))}))))) (do (and {(add (piece (id "Seed" Shared)) (to (last To)) count:(var "NumToSow")) (forget Value "SowedSites" All) (set Var "NumToSow" 0)}) next:(move Pass))) (if (is Prev Mover) (move (from (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (to (sites Around (from))) (then (and {(if (is Occupied (last From)) (and {(moveAgain) (set Var "NumToSow" (count at:(last From))) (remember Value "SowedSites" (last From))}) (if (notEqual (last To) (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (moveAgain) (if (notEqual (last To) (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (and (fromTo (from (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To))))) (if (and (notEqual (last To) (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To)))) (notEqual (last To) (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))) (if (and (is Occupied (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (is Empty (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To))))) (fromTo (from (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))))))))))) (remove (last From) count:(count at:(last From)))}))) (move (from (sites Board) if:(is Occupied (from))) (to (sites Around (from))) (then (and {(if (is Occupied (last From)) (and {(moveAgain) (set Var "NumToSow" (count at:(last From))) (remember Value "SowedSites" (last From))}) (if (notEqual (last To) (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:1 (directions Vertex from:(last From) to:(last To)))) (moveAgain) (if (notEqual (last To) (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (if (is Occupied (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (and (fromTo (from (ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:2 (directions Vertex from:(last From) to:(last To))))) (if (and (notEqual (last To) (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To)))) (notEqual (last To) (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))) (if (and (is Occupied (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (is Empty (ahead (last To) steps:3 (directions Vertex from:(last From) to:(last To))))) (fromTo (from (ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To)))) (to (handSite Mover)) count:(count at:(ahead (last To) steps:4 (directions Vertex from:(last From) to:(last To))))))))))))) (remove (last From) count:(count at:(last From)))})))))) (end (if (le (count Pieces All in:(sites Board)) 1) (byScore {(score P1 (count Cell at:(handSite P1))) (score P2 (count Cell at:(handSite P2))) (score P3 (count Cell at:(handSite P3))) (score P4 (count Cell at:(handSite P4)))}))))) 
