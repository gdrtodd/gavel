4x6-28 board; 16-20 is most common, only even numbers of holes. Two counters in each hole except the leftmost on the inner row, which is left empty, and the one to its right which contains one counter. Players sow by picking up the counters in any of their holes and sowing them in an anti-clockwise direction. Sowing continues when the last counter falls into an occupied hole by picking up the counters in that hole and continuing in the same direction. When the final counter lands in an empty hole in the inner row, the counters in the opponent's hole opposite in the inner row are captured; if there are also counters in the opponent's outer row opposite, these are also captured. The player is also entitled to capture counters in any other hole on the opponent's side. The turn ends with a capture and the opponent's turn begins. Play always begins with a stylized move, where the counters are taken from the third hole from the left in the inner row, sowing and making captures as described above. Players may not sow single counters unless there are no holes on their side containing multiple counters. Play ends when one player has captured all of their opponent's counters. Each player has 16 holes per row.
(game "Mefuvha" (players 2) (equipment {(mancalaBoard 4 16 store:None {(track "Track1" "0,E,N1,W" loop:True P1) (track "Track2" "32,E,N1,W" loop:True P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 2 to:(difference (union (sites P1 "Home") (sites P2 "Home")) (union (expand (intersection (sites Row 1) (sites Left)) steps:1 E) (expand (intersection (sites Row 2) (sites Right)) steps:1 W)))) (set Count 1 to:(union (difference (expand (intersection (sites Row 1) (sites Left)) steps:1 E) (sites Left)) (difference (expand (intersection (sites Row 2) (sites Right)) steps:1 W) (sites Right))))}) (play (if (and (is Pending) (is Prev Mover)) (move Select (from (sites Next "Home") if:(gt (count at:(from)) 0)) (then (fromTo (from (last From)) (to (handSite Mover)) count:(count at:(last From))))) (priority (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (if (lt (count Turns) 3) (if (is Mover P1) (difference (expand (intersection (sites Row 1) (sites Left)) steps:2 E) (expand (intersection (sites Row 1) (sites Left)) steps:1 E)) (difference (expand (intersection (sites Row 2) (sites Right)) steps:2 W) (expand (intersection (sites Row 2) (sites Right)) steps:1 W))) (sites Mover "Home"))) if:(gt (count at:(from)) 1)) (then (sow "Track" owner:(mover) apply:(if (gt (count at:(to)) 1) (moveAgain) (if (is In (to) (sites Mover "Inner")) (and {(fromTo (from (to)) (to (handSite Mover)) count:(count at:(to))) (if (gt (count at:(if (is Mover P1) (add (to) 16) (sub (to) 16))) 0) (fromTo (from (if (is Mover P1) (add (to) 16) (sub (to) 16))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) 16) (sub (to) 16))))) (if (gt (count at:(if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))) 0) (fromTo (from (if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))))) (set Pending) (moveAgain)})))))) (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (sites Mover "Home")) if:(equals (count at:(from)) 1)) (then (sow "Track" owner:(mover) apply:(if (gt (count at:(to)) 1) (moveAgain) (if (is In (to) (sites Mover "Inner")) (and {(fromTo (from (to)) (to (handSite Mover)) count:(count at:(to))) (if (gt (count at:(if (is Mover P1) (add (to) 16) (sub (to) 16))) 0) (fromTo (from (if (is Mover P1) (add (to) 16) (sub (to) 16))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) 16) (sub (to) 16))))) (if (gt (count at:(if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))) 0) (fromTo (from (if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))) (to (handSite Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 16 2)) (sub (to) (mul 16 2)))))) (set Pending) (moveAgain)}))))))))) (end (if (no Moves Mover) (byScore {(score P1 (add (count Cell at:(handSite P1)) (count in:(sites P1 "Home")))) (score P2 (add (count Cell at:(handSite P2)) (count in:(sites P2 "Home"))))}))))) 
