4x8 board. May have one or two stores per player. Stores are located to the right hand side of the player's two rows, centered with respect to the player's two rows. If each player has two stores, the second store is located between the fourth and fifth holes of the player's rows; i.e., in the center of the board. One counter in each hole except the stores. Opening play: Player sows from any one of their holes, thus making a pair. They then take the counter in the next hole and sow it, making another pair. This continues until the last pair is made. When the last pair is made, the player sows this pair normally. Main phase: Sowing occurs in an anti-clockwise direction. When the final counter falls into an occupied hole, these are picked up and sowing continues. The turn ends when the final counter falls into an empty hole. When this empty hole is in the inner row, the counters in the opponent's hole opposite are captured. If the opponent's inner row hole are occupied, then any contents in the outer row opposite are also captured. Several rules apply to the stores: They are not used during the opening play; They may only hold one counter at a time; The counter in the store cannot be captured; It is the player's choice whether to include the store in sowing; they are considered to be in the player's inner row of holes for the purposes of sowing. The game is played on a 4x8 board.
(game "Tchela" (players 2) (equipment {(board (merge {(square 4) (shift 5 0 (square 4)) (shift 4 0.5 (square 1)) (shift 4 2.5 (square 1)) (shift -1 2.5 (square 1)) (shift 9 0.5 (square 1))}) {(track "TrackCCW1" {0 1 2 3 16 17 18 19 23 22 21 20 7 6 5 4} loop:True P1) (track "TrackCCW2" {8 9 10 11 24 25 26 27 31 30 29 28 15 14 13 12} loop:True P2) (track "TrackExtendedCCW1" {0 1 2 3 16 17 18 19 23 22 21 20 32 7 6 5 4} loop:True P1) (track "TrackExtendedCCW2" {8 9 10 11 33 24 25 26 27 31 30 29 28 15 14 13 12} loop:True P2)} use:Vertex) (piece "Seed" Shared) (regions "HomeNotExtented" P1 (sites Track "TrackCCW1")) (regions "HomeNotExtented" P2 (sites Track "TrackCCW2")) (regions "Home" P1 (sites Track "TrackExtendedCCW1")) (regions "Home" P2 (sites Track "TrackExtendedCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map {(pair P1 34) (pair P2 35)}) (map "ExtraStore" {(pair P1 32) (pair P2 33)})}) (rules (start (set Count 1 to:(difference (sites Board) (sites {32 33 34 35})))) phases:{(phase "Opening" (play (move Select (from (if (lt (value Player Mover) 0) (sites Mover "HomeNotExtented") (sites {(trackSite Move from:(value Player Mover) "TrackCCW" steps:2)}))) (then (and (sow "TrackCCW" owner:(mover)) (set Value Mover (last To)))))) (nextPhase Mover (equals 0 (count at:(trackSite Move from:(value Player Mover) "TrackCCW" steps:2))) "OpeningPair")) (phase "OpeningPair" (play (move Select (from (sites {(trackSite Move from:(value Player Mover) "TrackCCW" steps:1)})) (then (sow "TrackCCW" owner:(mover))))) (nextPhase Mover "Playing")) (phase "Playing" (play (or (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (sites Mover "HomeNotExtented")) if:(lt 0 (count at:(from)))) (then (sow "TrackCCW" owner:(mover) apply:(if (gt (count at:(to)) 1) (moveAgain) (if (and (is In (to) (sites Mover "Inner")) (gt (count at:(if (is Mover P1) (add (to) 4) (sub (to) 4))) 0)) (and (fromTo (from (if (is Mover P1) (add (to) 4) (sub (to) 4))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) 4) (sub (to) 4)))) (if (gt (count at:(if (is Mover P1) (add (to) 4) (sub (to) 4))) 0) (fromTo (from (if (is Mover P1) (add (to) (mul 4 2)) (sub (to) (mul 4 2)))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 4 2)) (sub (to) (mul 4 2)))))))))))) (do (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (sites Mover "Home")) if:(lt 0 (count at:(from)))) (then (sow "TrackExtendedCCW" owner:(mover) apply:(if (notEqual (to) (mapEntry "ExtraStore" Mover)) (if (gt (count at:(to)) 1) (moveAgain) (if (and (is In (to) (sites Mover "Inner")) (gt (count at:(if (is Mover P1) (add (to) 4) (sub (to) 4))) 0)) (and (fromTo (from (if (is Mover P1) (add (to) 4) (sub (to) 4))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) 4) (sub (to) 4)))) (if (gt (count at:(if (is Mover P1) (add (to) 4) (sub (to) 4))) 0) (fromTo (from (if (is Mover P1) (add (to) (mul 4 2)) (sub (to) (mul 4 2)))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) (mul 4 2)) (sub (to) (mul 4 2))))))))))))) ifAfterwards:(le (count at:(mapEntry "ExtraStore" Mover)) 1)))))} (end (if (no Moves Mover) (byScore {(score P1 (add (count at:(mapEntry P1)) (count in:(sites P1 "Home")))) (score P2 (add (count at:(mapEntry P2)) (count in:(sites P2 "Home"))))}))))) 
