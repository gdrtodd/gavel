6x3 or 6 board. Two counters in each hole. Sowing occurs from one of the holes in the player's outermost row which contains counters, in either direction. Sowing moves in a boustrophedon path along the holes, moving from the last hole in the innermost row to the beginning of the outer row. When the final counter lands in an occupied hole, the contents of this hole are picked up and sowing continues. If this hole is in the player's inner row, the contents of the opponent's hole opposite it are captured, and these counters are also used along with the hole in which the last counter fell for the sowing to continue. If the opponent's inner row hole is empty, counters may be captured from their central row, and if both the inner and central rows are empty, captures may be made from the outer hole. Sowing ends when the final counter lands in an empty hole. When a player has only one counter on their side of the board, it may capture by moving from the central row directly to the inner row hole above it to make a capture (i.e., without following the normal track), and on the move prior to the capture, from the outer to the central row. Play continues until one player has captured all of the counters. 6 Holes per row.
(game "Katro" (players 2) (equipment {(mancalaBoard 6 6 store:None {(track "TrackCCW1" "0,E,N1,W,N1,E" loop:True P1) (track "TrackCW1" "5,W,N1,E,N1,W" loop:True P1) (track "TrackCW2" "18,E,N1,W,N1,E" loop:True P2) (track "TrackCCW2" "23,W,N1,E,N1,W" loop:True P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (sites Row 2)) (regions "Inner" P2 (sites Row 3)) (regions "Middle" P1 (sites Row 1)) (regions "Middle" P2 (sites Row 4)) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top))}) (rules (start (set Count 2 to:(sites Board))) (play (or {(if (or (equals (value Player Mover) 1) (le (value Player Mover) 0)) (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (if (notEqual 0 (count in:(sites Mover "Outer"))) (sites Mover "Outer") (if (notEqual 0 (count in:(sites Mover "Middle"))) (sites Mover "Middle") (sites Mover "Inner")))) if:(gt (count at:(from)) 0)) (then (sow "TrackCCW" owner:(mover) apply:(if (gt (count at:(to)) 1) (and {(if (le (value Player Mover) 0) (set Value Mover 1)) (moveAgain) (if (is In (to) (sites Mover "Inner")) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (to)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2))))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (to (to)) count:(count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2))))) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3))))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3)))) (to (to)) count:(count at:(if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3)))))))))}) (set Value Mover 0)))))) (if (or (equals (value Player Mover) 2) (le (value Player Mover) 0)) (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (if (notEqual 0 (count in:(sites Mover "Outer"))) (sites Mover "Outer") (if (notEqual 0 (count in:(sites Mover "Middle"))) (sites Mover "Middle") (sites Mover "Inner")))) if:(gt (count at:(from)) 0)) (then (sow "TrackCW" owner:(mover) apply:(if (gt (count at:(to)) 1) (and {(if (le (value Player Mover) 0) (set Value Mover 2)) (moveAgain) (if (is In (to) (sites Mover "Inner")) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (to)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6)))) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2))))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2)))) (to (to)) count:(count at:(if (is Mover P1) (add (to) (mul 6 2)) (sub (to) (mul 6 2))))) (if (notEqual 0 (count at:(if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3))))) (fromTo (from (if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3)))) (to (to)) count:(count at:(if (is Mover P1) (add (to) (mul 6 3)) (sub (to) (mul 6 3)))))))))}) (set Value Mover 0)))))) (if (and (equals (count in:(sites Mover "Home")) 1) (equals (count in:(sites Mover "Outer")) 1)) (move (from (sites Mover "Outer") if:(gt (count at:(from)) 0)) (to (if (is Mover P1) (ahead (from) N) (ahead (from) S))))) (if (and (equals (count in:(sites Mover "Home")) 1) (equals (count in:(sites Mover "Middle")) 1)) (move (from (sites Mover "Middle") if:(and (gt (count at:(from)) 0) (lt 1 (count in:(sites Column (column of:(from))))))) (to (if (is Mover P1) (ahead (from) N) (ahead (from) S))) (then (and (if (notEqual 0 (count at:(if (is Mover P1) (add (last To) 6) (sub (last To) 6)))) (fromTo (from (if (is Mover P1) (add (last To) 6) (sub (last To) 6))) (to (last To)) count:(count at:(if (is Mover P1) (add (last To) 6) (sub (last To) 6)))) (if (notEqual 0 (count at:(if (is Mover P1) (add (last To) (mul 6 2)) (sub (last To) (mul 6 2))))) (fromTo (from (if (is Mover P1) (add (last To) (mul 6 2)) (sub (last To) (mul 6 2)))) (to (last To)) count:(count at:(if (is Mover P1) (add (last To) (mul 6 2)) (sub (last To) (mul 6 2))))) (if (notEqual 0 (count at:(if (is Mover P1) (add (last To) (mul 6 3)) (sub (last To) (mul 6 3))))) (fromTo (from (if (is Mover P1) (add (last To) (mul 6 3)) (sub (last To) (mul 6 3)))) (to (last To)) count:(count at:(if (is Mover P1) (add (last To) (mul 6 3)) (sub (last To) (mul 6 3)))))))) (moveAgain)))))})) (end (forEach NonMover if:(all Sites (sites Player "Home") if:(equals 0 (count at:(site)))) (result Player Loss))))) 
