Played on a board with two rows of five holes with store holes on either side. To start, ten counters are placed in each hole except the stores. Play begins from any of a player's holes, and sowing proceeds in either direction, at the player's choice. The first seed is sown in the hole from which play started. When the last counter of a sowing falls into a hole, making the contents of that hole odd (but not more than nine), the counters are captured. The first capture must be of three counters, the second of one counter. The first capture must be of three counters, the second of one counter.
(game "Ako Okwe" (players 2) (equipment {(mancalaBoard 2 5 {(track "TrackCCW" "1,E,N,W" loop:True) (track "TrackCW" "6,E,S,W" loop:True)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 10 to:(sites Track))) (play (or (move Select (from (sites Mover) if:(gt (count at:(from)) 0)) (then (sow "TrackCW" if:(or {(and {(le (count at:(to)) 9) (is Odd (count at:(to))) (ge (value Player Mover) 2)}) (and (equals (value Player Mover) -1) (equals (count at:(to)) 3)) (and (equals (value Player Mover) 1) (equals (count at:(to)) 1))}) apply:(fromTo (from (to)) (to (mapEntry (mover))) count:(count at:(to)) (then (and (if (equals (value Player Mover) 1) (set Value Mover 2)) (if (equals (value Player Mover) -1) (set Value Mover 1))))) origin:True))) (move Select (from (sites Mover) if:(gt (count at:(from)) 0)) (then (sow "TrackCCW" if:(or {(and {(le (count at:(to)) 9) (is Odd (count at:(to))) (ge (value Player Mover) 2)}) (and (equals (value Player Mover) -1) (equals (count at:(to)) 3)) (and (equals (value Player Mover) 1) (equals (count at:(to)) 1))}) apply:(fromTo (from (to)) (to (mapEntry (mover))) count:(count at:(to)) (then (and (if (equals (value Player Mover) 1) (set Value Mover 2)) (if (equals (value Player Mover) -1) (set Value Mover 1))))) origin:True))))) (end (if (no Moves Mover) (byScore {(score P1 (add (count at:(mapEntry P1)) (count in:(sites P1)))) (score P2 (add (count at:(mapEntry P2)) (count in:(sites P2))))}))))) 
