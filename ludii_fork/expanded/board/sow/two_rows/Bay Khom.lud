2x4 board with two stores on either end, the store on a player's right belonging to them. Four counters per hole, five in each store. Players sow in the direction of their choosing from one of the holes in their row, not from the stores, on each turn, sowing also into the stores. If the next hole has counters, these are picked up and sowing continues with these counters. When this next hole is empty, the counters in the next hole after that are captured and the turn ends. If there are a series of alternating empty holes and holes with counters, the counters in these holes are captured until two empty or full holes are reached. When the point of the game is reached that play cannot continue, the players claim the counters in their holes, and a new game begins. The players refill their holes, beginning with their store, which receives five counters, and four in each other. Holes are only filled with exactly four counters, any extra are set aside. If a player cannot fill any of their holes with counters, these holes are eliminated from play. Play continues in this way until one player captures all of the counters or the other player cannot fill any holes.
(game "Bay Khom" (players 2) (equipment {(mancalaBoard 2 4 {(track "TrackCW" "0,5,E,9,4,W" loop:True) (track "TrackCCW" "0,1,E,9,8,W" loop:True)}) (piece "Seed" Shared) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start {(set Count 4 to:(union (sites P1) (sites P2))) (set Count 5 at:(mapEntry 1)) (set Count 5 at:(mapEntry 2)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) phases:{(phase "Sowing" (play (or (if (or (le (var "Direction") 0) (equals (var "Direction") 1)) (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) if:(is Occupied (from))) (then (sow "TrackCW" apply:(if (is Occupied (trackSite Move from:(to) "TrackCW" steps:1)) (and (moveAgain) (set Var "Direction" 1)) (and (if (is Occupied (trackSite Move from:(to) "TrackCW" steps:2)) (and (fromTo (from (trackSite Move from:(to) "TrackCW" steps:2)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCW" steps:2))) (if (and (is Empty (trackSite Move from:(to) "TrackCW" steps:3)) (is Occupied (trackSite Move from:(to) "TrackCW" steps:4))) (and (fromTo (from (trackSite Move from:(to) "TrackCW" steps:4)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCW" steps:4))) (if (and (is Empty (trackSite Move from:(to) "TrackCW" steps:5)) (is Occupied (trackSite Move from:(to) "TrackCW" steps:6))) (and (fromTo (from (trackSite Move from:(to) "TrackCW" steps:6)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCW" steps:6))) (if (and (is Empty (trackSite Move from:(to) "TrackCW" steps:7)) (is Occupied (trackSite Move from:(to) "TrackCW" steps:8))) (fromTo (from (trackSite Move from:(to) "TrackCW" steps:8)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCW" steps:8)))))))))) (set Var "Direction" 0))))))) (if (or (le (var "Direction") 0) (equals (var "Direction") 2)) (move Select (from (if (is Prev Mover) (sites {(last To afterConsequence:True)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) if:(is Occupied (from))) (then (sow "TrackCCW" apply:(if (is Occupied (trackSite Move from:(to) "TrackCCW" steps:1)) (and (moveAgain) (set Var "Direction" 2)) (and (if (is Occupied (trackSite Move from:(to) "TrackCCW" steps:2)) (and (fromTo (from (trackSite Move from:(to) "TrackCCW" steps:2)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCCW" steps:2))) (if (and (is Empty (trackSite Move from:(to) "TrackCCW" steps:3)) (is Occupied (trackSite Move from:(to) "TrackCCW" steps:4))) (and (fromTo (from (trackSite Move from:(to) "TrackCCW" steps:4)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCCW" steps:4))) (if (and (is Empty (trackSite Move from:(to) "TrackCCW" steps:5)) (is Occupied (trackSite Move from:(to) "TrackCCW" steps:6))) (and (fromTo (from (trackSite Move from:(to) "TrackCCW" steps:6)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCCW" steps:6))) (if (and (is Empty (trackSite Move from:(to) "TrackCCW" steps:7)) (is Occupied (trackSite Move from:(to) "TrackCCW" steps:8))) (fromTo (from (trackSite Move from:(to) "TrackCCW" steps:8)) (to (mapEntry Mover)) count:(count at:(trackSite Move from:(to) "TrackCCW" steps:8)))))))))) (set Var "Direction" 0))))))) (then (if (all Sites (union (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) if:(is Empty (site))) (and {(forEach Site (sites P1) (fromTo (from (site)) (to (handSite P1)) count:(count at:(site)))) (if (is Occupied (mapEntry P1)) (fromTo (from (mapEntry P1)) (to (handSite P1)) count:(count at:(mapEntry P1)))) (forEach Site (sites P2) (fromTo (from (site)) (to (handSite P2)) count:(count at:(site)))) (if (is Occupied (mapEntry P2)) (fromTo (from (mapEntry P2)) (to (handSite P2)) count:(count at:(mapEntry P2)))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) if:(equals 0 (count at:(site)))) {(if (gt 9 (count Cell at:(handSite P1))) (result P2 Win)) (if (gt 9 (count Cell at:(handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) if:(equals 0 (count at:(site)))) "BetweenRounds")) (phase "BetweenRounds" (play (if (is Empty (mapEntry Mover)) (move (from (handSite Mover)) (to (mapEntry Mover)) count:5) (if (le 4 (count Cell at:(handSite Mover))) (move (from (handSite Mover)) (to (sites Mover) if:(is Empty (to))) count:4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To)))))))) (nextPhase (all Passed) "Sowing"))})) 
