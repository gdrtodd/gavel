2x6 board, with stores on either end. The store to a player's left belongs to them. Four counters in each hole. Players sow in an anti-clockwise direction from any hole in their row. When the final counter lands in a hole in the opponent's row, causing it to contain two or four counters, these are captured and put in the store. The player also captures the contents of any adjacent holes in the opponent's row if they also contain two or four counters. Play continues until one player has no counters in their row, their opponent capturing the remaining counters. A new round begins. Players fill up their holes with four counters, beginning from the left. Any excess counters are placed in that player's store; the final hole of the player with fewer counters may contain fewer than four counters. Any empty holes are out of play. Play continues as before. The game repeats in this fashion until one player has no counters remaining, their opponent is the winner.
(game "Erherhe" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" loop:True)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "LeftMost" {(pair P1 1) (pair P2 12)}) (piece "Seed" Shared)}) (rules (start {(set Count 4 to:(sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) phases:{(phase "Sowing" (play (or {(move Select (from (sites Mover) if:(and (is Occupied (from)) (is In (from) (sites (values Remembered "Playable"))))) (then (sow apply:(if (and (is In (to) (sites Next)) (or (equals 2 (count at:(to))) (equals 4 (count at:(to))))) (and {(fromTo (from (to)) (to (mapEntry Mover)) count:(count at:(to))) (if (notEqual (to) (ahead (to) W)) (if (or (equals 2 (count at:(ahead (to) W))) (equals 4 (count at:(ahead (to) W)))) (fromTo (from (ahead (to) W)) (to (mapEntry Mover)) count:(count at:(ahead (to) W))))) (if (notEqual (to) (ahead (to) E)) (if (or (equals 2 (count at:(ahead (to) E))) (equals 4 (count at:(ahead (to) E)))) (fromTo (from (ahead (to) E)) (to (mapEntry Mover)) count:(count at:(ahead (to) E)))))})) skipIf:(not (is In (to) (sites (values Remembered "Playable")))))))} (then (if (or (all Sites (sites Bottom) if:(equals 0 (count at:(site)))) (all Sites (sites Top) if:(equals 0 (count at:(site))))) (and {(forEach Site (sites P1) (fromTo (from (site)) (to (mapEntry P1)) count:(count at:(site)))) (forEach Site (sites P2) (fromTo (from (site)) (to (mapEntry P2)) count:(count at:(site)))) (forget Value "Playable" All)}))))) (end (if (all Sites (union (sites Top) (sites Bottom)) if:(equals 0 (count at:(site)))) {(if (equals 0 (count at:(mapEntry P1))) (result P2 Win)) (if (equals 0 (count at:(mapEntry P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) if:(equals 0 (count at:(site)))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) if:(is Occupied (site)))) (if (le 4 (count at:(mapEntry Mover))) (move (from (mapEntry Mover)) (to (trackSite FirstSite from:(mapEntry "LeftMost" Mover) if:(is Empty (to)))) count:4 (then (remember Value "Playable" (last To)))) (move (from (mapEntry Mover)) (to (trackSite FirstSite from:(mapEntry "LeftMost" Mover) if:(is Empty (to)))) count:(count at:(mapEntry Mover)) (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))})) 
