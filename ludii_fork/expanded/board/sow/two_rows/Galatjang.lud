2x6 board with two stores. Seven counters in each hole. Play moves in an anti-clockwise direction and players sow into the store on their right hand side. A move may begin from any of the player's holes except their store. If the last counter falls into the store, they can sow again from any of the holes in their row. If it lands in a hole with counters in it, these are picked up and sowing continues. If the last counter falls into an empty hole the move ends, but if the hole is in the player's own row, any counters in the hole opposite it are captured and placed in the store. When no more moves can be made, a new round begins and each player fills as many holes as they can by putting seven in each. Surplus counters are placed in the store. Any unfilled holes are excluded from play. Play continues until one player cannot fill a hole with seven counters, and the opponent wins.
(game "Galatjang" (players 2) (equipment {(mancalaBoard 2 6 {(track "Track1" "1,E,ENE,WNW,W" loop:True P1) (track "Track2" "12,W,WSW,ESE,E" loop:True P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)})}) (rules (start {(set Count 7 to:(union (sites Bottom) (sites Top))) (forEach Value min:1 max:12 (set RememberValue (value)))}) phases:{(phase "Round" (play (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(last To afterConsequence:True)}) (forEach (sites Mover "Home") if:(is In (site) (values Remembered)))) if:(gt (count at:(from)) 0)) (then (sow "Track" owner:(mover) apply:(if (equals (to) (mapEntry Mover)) (and (moveAgain) (set Pending)) (if (gt (count at:(to)) 1) (moveAgain) (if (and (is In (to) (sites Mover "Home")) (gt (count at:(if (is Mover P1) (add (to) 6) (sub (to) 6))) 0)) (fromTo (from (if (is Mover P1) (add (to) 6) (sub (to) 6))) (to (mapEntry Mover)) count:(count at:(if (is Mover P1) (add (to) 6) (sub (to) 6))))))) (then (if (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) if:(is In (site) (values Remembered))) if:(equals 0 (count at:(site)))) (and (forEach Site (difference (sites P1 "Home") (sites Empty)) (fromTo (from (site)) (to (mapEntry P1)) count:(count at:(site)))) (forEach Site (difference (sites P2 "Home") (sites Empty)) (fromTo (from (site)) (to (mapEntry P2)) count:(count at:(site))))))))))) (nextPhase (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) if:(is In (site) (values Remembered))) if:(equals 0 (count at:(site)))) "BetweenRound")) (phase "BetweenRound" (play (if (ge (count at:(mapEntry Mover)) 7) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover "Home"))) count:7) (then (if (or (and (gt 7 (count at:(mapEntry P2))) (equals 42 (count in:(sites Bottom)))) (and (gt 7 (count at:(mapEntry P1))) (equals 42 (count in:(sites Top))))) (and (forget Value All) (forEach Site (sites Board) (if (equals 7 (count at:(site))) (remember Value (site))))))))) (nextPhase (or (and (gt 7 (count at:(mapEntry P2))) (equals 42 (count in:(sites Bottom)))) (and (gt 7 (count at:(mapEntry P1))) (equals 42 (count in:(sites Top))))) "Round"))} (end (if (gt 7 (count in:(difference (sites Board) (mapEntry Mover)))) (result Mover Win))))) 
