2x6 board. Four counters in each hole. In the opening phase, the player takes all of the counters in their rightmost hole and places them in the opponent's opposite hole. The player then takes the contents of the next hole, placing all of them into the hole following it, until the entire board has alternating holes with eight and zero counters. When the final hole is made with eight counters, these are picked up and the player sows as normal in an anti-clockwise direction. When the final counter falls into an occupied hole, the counters are picked up and sowing continues. When the final counter falls into an empty hole, the player captures the counters in the opposite hole. If a player cannot play, they must pass their turn until there are counters available for them to play. Play continues until there is one piece or fewer on the board, the player to whom the row in which the single piece is located captures it. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, and if each player has two remaining counters ownership is determined by chance. Play continues in several rounds like this until one player takes all the counters.
(game "Jimafesosh" (players 2) (equipment {(mancalaBoard 2 6 store:None {(track "TrackCCW" "0,E,N,W" loop:True) (track "TrackCW" "5,W,N,E" loop:True)}) (piece "Seed" Shared) (hand Each) (map "RightMost" {(pair P1 5) (pair P2 6)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 to:(sites Track "TrackCCW"))}) phases:{(phase "Opening1" (play (move Select (from (if (is Prev Mover) (var "Replay") 5)) (then (sow numPerHole:4 "TrackCCW" apply:(and (moveAgain) (if (is Occupied (trackSite Move from:(to) "Track" steps:1)) (set Var "Replay" (trackSite Move from:(to) "Track" steps:1)) (set Var "Replay" -1))))))) (nextPhase (equals -1 (var "Replay")) "Opening2")) (phase "Opening2" (play (move Select (from (if (and (is Prev Mover) (notEqual -1 (var "Replay"))) (var "Replay") 4)) (then (sow "TrackCCW" apply:(if (lt 1 (count at:(to))) (and (moveAgain) (set Var "Replay" (to))) (if (is Occupied (if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6)))))))))) (nextPhase (not (is Next Prev)) "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) if:(is Occupied (from))) (then (sow "TrackCCW" apply:(if (lt 1 (count at:(to))) (and (moveAgain) (set Var "Replay" (to))) (if (is Occupied (if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6))) (fromTo (from (if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6))) (to (handSite Mover)) count:(count at:(if (is In (to) (sites Bottom)) (add (to) 6) (sub (to) 6)))))))))} (then (if (ge 1 (count Pieces All in:(sites Board))) (and {(forEach Site (sites P1) (fromTo (from (site)) (to (handSite P1)) count:(count at:(site)))) (forEach Site (sites P2) (fromTo (from (site)) (to (handSite P2)) count:(count at:(site)))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) if:(equals 0 (count at:(site)))) {(if (equals 0 (count Cell at:(handSite P1))) (result P2 Win)) (if (equals 0 (count Cell at:(handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) if:(equals 0 (count at:(site)))) "BetweenRounds")) (phase "BetweenRounds" (play (if (le 4 (count Cell at:(handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (equals 3 (count Cell at:(handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:3) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))))}) (if (equals 2 (count Cell at:(handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:2) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) count:2) (if (lt 50 (value Random (range 1 100))) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" from:(mapEntry "RightMost" Mover) if:(is Empty (to)))))})))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))})) 
