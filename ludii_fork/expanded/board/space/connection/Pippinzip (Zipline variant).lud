This game is played on a square grid board of any size, though 13x13 or 19x19 are recommended. Then the players take it in turns to place 1-3 White stones each turn until one decides to pass; that player then becomes White, and the other becomes Black. After that, Black places two stones per turn on any empty point, while White places just one White stone per turn. If Black connects any two sides of the board with a single orthogonally-connected group, they win; White wins if they connect all four sides with a group connected either orthogonally or diagonally. During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action). Alternatively, you may Pass at the start of your turn to take White. After that, play continues with White playing one stone and Black playing two, until one player forms a connection (draws are impossible). Played on a size 13 board.
(game "Pippinzip (Zipline variant)" (players 2) (equipment {(board (square 13) use:Vertex) (piece "Disc" Each)}) (rules phases:{(phase "Opening" (play (or (or (move Add (piece (id "Disc" P2)) (to (sites Empty)) (then (if (lt (count MovesThisTurn) 2) (moveAgain)))) (move Set NextPlayer (player (next)))) (if (equals (count MovesThisTurn) 0) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now White. Player 2 is now Black." to:All))) (note "Player 1 is now Black. Player 2 is now White." to:All) (then (do (set NextPlayer (player 1)) next:(set Var 1))))))))) (nextPhase (equals 1 (var)) "Playing")) (phase "Playing" (play (or (move Add (to (sites Empty) if:(equals (id P1) (mover))) (then (if (equals 0 (count MovesThisTurn)) (moveAgain)))) (move Add (to (sites Empty) if:(equals (id P2) (mover)))))))} (end {(if (and (not (equals 1 (var))) (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})) (result Mover Win)) (if (and {(equals (id P1) (mover)) (or (is Connected Orthogonal {(sites Side N) (sites Side S)}) (is Connected Orthogonal {(sites Side E) (sites Side W)}))}) (result P1 Win)) (if (and {(equals (id P2) (mover)) (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})}) (result P2 Win))}))) 
