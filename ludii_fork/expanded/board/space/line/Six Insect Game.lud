4x4 board. Six pieces per player, which begin on opposite rows of the board and in the two outer squares in the row in front of it. Players alternate turns moving a piece orthogonally to an adjacent space on the board. When a player moves a piece such that it creates three in a row: two of their own pieces (which must be adjacent to one another) and one of the opponent's pieces (which must have a vacant space on the opposite side of it), the opponent's piece is captured. However, when the opponent's piece moves in line with two of the player's piece on the opponent's turn, the player does not capture the opponent's piece. The player who captures all of the opponent's pieces wins.
(game "Six Insect Game" (players 2) (equipment {(board (square 4)) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to))) (then (if (is Line 2 Orthogonal) (or {(if (notEqual (ahead (last To) N) (last To)) (if (equals (mover) (who at:(ahead (last To) N))) (or (if (notEqual (ahead (last To) steps:2 N) (last To)) (if (equals (next) (who at:(ahead (last To) steps:2 N))) (if (notEqual (ahead (last To) steps:3 N) (last To)) (if (is Empty (ahead (last To) steps:3 N)) (remove (ahead (last To) steps:2 N)))))) (if (notEqual (ahead (last To) S) (last To)) (if (equals (next) (who at:(ahead (last To) S))) (if (notEqual (ahead (last To) steps:2 S) (last To)) (if (is Empty (ahead (last To) steps:2 S)) (remove (ahead (last To) S))))))))) (if (notEqual (ahead (last To) S) (last To)) (if (equals (mover) (who at:(ahead (last To) S))) (or (if (notEqual (ahead (last To) steps:2 S) (last To)) (if (equals (next) (who at:(ahead (last To) steps:2 S))) (if (notEqual (ahead (last To) steps:3 S) (last To)) (if (is Empty (ahead (last To) steps:3 S)) (remove (ahead (last To) steps:2 S)))))) (if (notEqual (ahead (last To) N) (last To)) (if (equals (next) (who at:(ahead (last To) N))) (if (notEqual (ahead (last To) steps:2 N) (last To)) (if (is Empty (ahead (last To) steps:2 N)) (remove (ahead (last To) N))))))))) (if (notEqual (ahead (last To) E) (last To)) (if (equals (mover) (who at:(ahead (last To) E))) (or (if (notEqual (ahead (last To) steps:2 E) (last To)) (if (equals (next) (who at:(ahead (last To) steps:2 E))) (if (notEqual (ahead (last To) steps:3 E) (last To)) (if (is Empty (ahead (last To) steps:3 E)) (remove (ahead (last To) steps:2 E)))))) (if (notEqual (ahead (last To) W) (last To)) (if (equals (next) (who at:(ahead (last To) W))) (if (notEqual (ahead (last To) steps:2 W) (last To)) (if (is Empty (ahead (last To) steps:2 W)) (remove (ahead (last To) W))))))))) (if (notEqual (ahead (last To) W) (last To)) (if (equals (mover) (who at:(ahead (last To) W))) (or (if (notEqual (ahead (last To) steps:2 W) (last To)) (if (equals (next) (who at:(ahead (last To) steps:2 W))) (if (notEqual (ahead (last To) steps:3 W) (last To)) (if (is Empty (ahead (last To) steps:3 W)) (remove (ahead (last To) steps:2 W)))))) (if (notEqual (ahead (last To) E) (last To)) (if (equals (next) (who at:(ahead (last To) E))) (if (notEqual (ahead (last To) steps:2 E) (last To)) (if (is Empty (ahead (last To) steps:2 E)) (remove (ahead (last To) E)))))))))})))))}) (rules (start {(place "Marker1" (union (intersection (union (sites Right) (sites Left)) (sites Row 1)) (sites Bottom))) (place "Marker2" (union (intersection (union (sites Right) (sites Left)) (sites Row 2)) (sites Top)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss))))) 
