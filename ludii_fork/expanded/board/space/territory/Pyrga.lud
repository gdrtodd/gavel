White starts by playing any piece on any space. Players take turns to play one of their pieces. Each space of the board can support only one Tower. Each Tower is made of one piece of each kind (Square, Triangle, Circle), and pieces may be played in any order. If the active player cannot play according to the last piece's rule, they may play on any empty space. A Tower is controlled by the player with the most pieces. SQUARES The opponent must play in an orthogonally adjacent space. TRIANGLES The active player selects the orientation, it must point to at least one space. The opponent must play in the line indicated by the Triangle. CIRCLES The opponent must play on the same space. SCORES: The scores show the column counts. For example: 211 means 2 Towers, 1 controlled pair and 1 singleton GAME END The first player to control 3 completed Towers wins (i.e. a score of 300+). If the active player has no possible moves the game ends with tiebreaks: most completed towers, or most two-piece towers, or most one-piece towers. Stack is owned by player with majority of pieces there. Square is placed othogonally - next piece goes on adjacent spaces. Next piece may be placed any distance ahead of triangle but may not be placed around its tails.
(game "Pyrga" (players 2) (equipment {(board (square 4) use:Cell) (hand Each size:15) (piece "Disc" Each) (piece "SquareOrtho" Each) (piece "SquareDiag" Each) (piece "TriangleN" Each) (piece "TriangleS" Each) (piece "TriangleE" Each) (piece "TriangleW" Each)}) (rules (start {(place "Disc1" (handSite P1 0)) (place "Disc1" (handSite P1 1)) (place "Disc1" (handSite P1 2)) (place "Disc1" (handSite P1 3)) (place "Disc1" (handSite P1 4)) (place "SquareOrtho1" (handSite P1 5)) (place "SquareOrtho1" (handSite P1 6)) (place "SquareOrtho1" (handSite P1 7)) (place "SquareOrtho1" (handSite P1 8)) (place "SquareOrtho1" (handSite P1 9)) (place "TriangleN1" (handSite P1 10)) (place "TriangleN1" (handSite P1 11)) (place "TriangleN1" (handSite P1 12)) (place "TriangleN1" (handSite P1 13)) (place "TriangleN1" (handSite P1 14)) (place "Disc2" (handSite P2 0)) (place "Disc2" (handSite P2 1)) (place "Disc2" (handSite P2 2)) (place "Disc2" (handSite P2 3)) (place "Disc2" (handSite P2 4)) (place "SquareOrtho2" (handSite P2 5)) (place "SquareOrtho2" (handSite P2 6)) (place "SquareOrtho2" (handSite P2 7)) (place "SquareOrtho2" (handSite P2 8)) (place "SquareOrtho2" (handSite P2 9)) (place "TriangleN2" (handSite P2 10)) (place "TriangleN2" (handSite P2 11)) (place "TriangleN2" (handSite P2 12)) (place "TriangleN2" (handSite P2 13)) (place "TriangleN2" (handSite P2 14))}) (play (priority (or {(move Add (piece (id "Disc" Mover)) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 1 (state at:(to) level:0)) (notEqual 1 (state at:(to) level:1)) (lt 0 (count Pieces Mover "Disc" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 1) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "Disc" Mover) (what at:(site))))))) (remember Value (last To))}))) (forEach Value (array {0}) (move Add (piece (if (equals 0 (value)) (id "SquareOrtho" Mover) (id "SquareDiag" Mover))) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 2 (state at:(to) level:0)) (notEqual 2 (state at:(to) level:1)) (lt 0 (count Pieces Mover "SquareOrtho" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 2) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "SquareOrtho" Mover) (what at:(site))))))) (if (equals (id "SquareOrtho" Mover) (what at:(last To) level:(topLevel at:(last To)))) (forEach Site (sites Around (last To) Orthogonal) (remember Value (site))) (forEach Site (sites Around (last To) Diagonal) (remember Value (site))))})))) (do (move Add (piece (id "TriangleN" Mover)) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 3 (state at:(to) level:0)) (notEqual 3 (state at:(to) level:1)) (lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step N (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleE" Mover)) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 3 (state at:(to) level:0)) (notEqual 3 (state at:(to) level:1)) (lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step E (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleS" Mover)) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 3 (state at:(to) level:0)) (notEqual 3 (state at:(to) level:1)) (lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step S (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleW" Mover)) (to (sites (values Remembered)) if:(and {(gt 3 (count Stack at:(to))) (notEqual 3 (state at:(to) level:0)) (notEqual 3 (state at:(to) level:1)) (lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))})) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step W (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered))))}) (or {(move Add (piece (id "Disc" Mover)) (to (sites Empty) if:(lt 0 (count Pieces Mover "Disc" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 1) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "Disc" Mover) (what at:(site))))))) (remember Value (last To))}))) (forEach Value (array {0}) (move Add (piece (if (equals 0 (value)) (id "SquareOrtho" Mover) (id "SquareDiag" Mover))) (to (sites Empty) if:(lt 0 (count Pieces Mover "SquareOrtho" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 2) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "SquareOrtho" Mover) (what at:(site))))))) (if (equals (id "SquareOrtho" Mover) (what at:(last To) level:(topLevel at:(last To)))) (forEach Site (sites Around (last To) Orthogonal) (remember Value (site))) (forEach Site (sites Around (last To) Diagonal) (remember Value (site))))})))) (do (move Add (piece (id "TriangleN" Mover)) (to (sites Empty) if:(lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step N (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleE" Mover)) (to (sites Empty) if:(lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step E (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleS" Mover)) (to (sites Empty) if:(lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step S (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered)))) (do (move Add (piece (id "TriangleW" Mover)) (to (sites Empty) if:(lt 0 (count Pieces Mover "TriangleN" in:(sites Hand Mover)))) stack:True (then (and {(forget Value All) (set State at:(last To) level:(topLevel at:(last To)) 3) (remove (min (array (forEach (sites Hand Mover) if:(equals (id "TriangleN" Mover) (what at:(site)))))))} (then (and (forEach Site (sites Distance (step W (to (sites Board))) from:(last To) (range 1 1000000000)) (remember Value (site))) (forEach Site (sites {}) (remember Value (site)))))))) ifAfterwards:(lt 0 (size Array (values Remembered))))}) (then (and {(set Score (player (mover)) 0 (then (forEach Site (sites Board) (if (gt (add {(if (equals (mover) (who at:(site) level:0)) 1 0) (if (equals (mover) (who at:(site) level:1)) 1 0) (if (equals (mover) (who at:(site) level:2)) 1 0)}) (div (add 1 (topLevel at:(site))) 2)) (addScore (player (mover)) (pow 10 (topLevel at:(site)))))))) (set Score (player (next)) 0 (then (forEach Site (sites Board) (if (gt (add {(if (equals (next) (who at:(site) level:0)) 1 0) (if (equals (next) (who at:(site) level:1)) 1 0) (if (equals (next) (who at:(site) level:2)) 1 0)}) (div (add 1 (topLevel at:(site))) 2)) (addScore (player (next)) (pow 10 (topLevel at:(site))))))))})))) (end (if (or {(ge (score Mover) 300) (ge (score Next) 300) (no Moves Next)}) (byScore))))) 
