There are 30 game-pieces for each player and eleven castles. The gameboard is divided into three sections: homes and center section. Object of the game is to capture four castles (among those of the central section and the other side) or 28 pawns of your opponent. In a turn a player moves one of their pieces, horizontally, vertically. A pawn can step to an adjacent empty cell. Additionally a pawn can jump over another pawn as long as the square behind that pawn is free. Multiple jumps are allowed and all enemy pawns are captured this way and removed from the deck. A pawn can capture a maximum of five enemy pieces, and his movement ends after the fifth piece is captured. A castle is conquered when it is surrounded by three pawns.
(game "Castello" (players 2) (equipment {(board (rectangle 15 21)) (piece "Pawn" Each (or (move Hop Orthogonal (between if:(and (notEqual (what at:(between)) (id "Castle0")) (is Occupied (between))) (apply (if (equals (who at:(between)) (next)) (remove (between))))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) Orthogonal (between if:(if (lt (counter) (sub 5 1)) (and (notEqual (what at:(between)) (id "Castle0")) (is Occupied (between))) (is Friend (who at:(between)))) (apply (if (equals (who at:(between)) (next)) (remove (between))))) (to if:(and (is Empty (to)) (not (is Visited (to))))))) (moveAgain) (set Counter)))) (move Step Orthogonal (to if:(is Empty (to)))))) (piece "Castle" Neutral) (hand Each size:3) (regions "LeftPart" (expand (sites Left) steps:6)) (regions "RightPart" (expand (sites Right) steps:6)) (regions "Middle" (expand (sites Centre)))}) (rules (start {(place "Pawn1" (expand (sites Left))) (place "Pawn2" (expand (sites Right))) (place "Castle0" (sites {"G2" "F6" "G10" "F14" "K3" "K8" "K13" "P2" "O6" "P10" "O14"}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Orthogonal (between if:(if (lt (counter) 5) (and (notEqual (what at:(between)) (id "Castle0")) (is Occupied (between))) (is Friend (who at:(between)))) (apply (if (equals (who at:(between)) (next)) (remove (between))))) (to if:(and (is Empty (to)) (not (is Visited (to))))) (then (if (can Move (hop (from (last To)) Orthogonal (between if:(if (lt (counter) (sub 5 1)) (and (notEqual (what at:(between)) (id "Castle0")) (is Occupied (between))) (is Friend (who at:(between)))) (apply (if (equals (who at:(between)) (next)) (remove (between))))) (to if:(and (is Empty (to)) (not (is Visited (to))))))) (moveAgain) (set Counter)))) (move Pass)) (forEach Piece) (then (and (if (is In (last To) (sites "LeftPart")) (if (lt (count Cell at:(handSite Mover)) 3) (surround (from (last To)) Orthogonal (between if:(equals (what at:(between)) (id "Castle0")) (apply (fromTo (from (between)) (to (handSite Mover))))) (to if:(is Friend (who at:(to)))) except:1)) (if (is In (last To) (sites "RightPart")) (surround (from (last To)) Orthogonal (between if:(equals (what at:(between)) (id "Castle0")) (apply (fromTo (from (between)) (to (handSite Mover 2))))) (to if:(is Friend (who at:(to)))) except:1) (if (is In (last To) (sites "Middle")) (if (gt (count Cell at:(handSite Mover 2)) 0) (surround (from (last To)) Orthogonal (between if:(equals (what at:(between)) (id "Castle0")) (apply (fromTo (from (between)) (to (handSite Mover 1))))) (to if:(is Friend (who at:(to)))) except:1)) (surround (from (last To)) Orthogonal (between if:(equals (what at:(between)) (id "Castle0")) (apply (fromTo (from (between)) (to (handSite Mover 1))))) (to if:(is Friend (who at:(to)))) except:1)))) (set Counter))))) (end {(if (le (count Pieces Next) 3) (result Next Loss)) (if (gt (count in:(sites Hand Mover)) 3) (result Mover Win))}))) 
