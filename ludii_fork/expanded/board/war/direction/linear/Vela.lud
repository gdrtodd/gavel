9x5 intersecting lines with diagonals in each square formed by 3x3 intersecting lines. Each player has 22 pieces, starting on the intersections of the lines except in the centre position, placed on opposite rows of the board, but alternating in the central row. Pieces move to an adjacent intersection along the lines. In the first phase of play, one player cannot capture until they have been reduced to five pieces. The opponent may only capture, according to the following rules, but only one piece at a time is captured, even when multiple would normally be allowed. When the one player is reduced to five pieces, play continues as follows. Players must capture pieces when possible. Capturing is accomplished by moving to an adjacent intersection to an opposing piece in the continuing direction of the capturing stones movement, or by moving away from an adjacent opposing pieces in such a direction. When an opponent's piece is captured, all other of the opponent's pieces in that line are also captured. Multiple captures can be made, but cannot be done by moving twice in the same direction. Multiple captures are optional. A player wins by capturing all of the other player's pieces.
(game "Vela" (players 2) (equipment {(board (rectangle 5 9 diagonals:Alternating) use:Vertex) (piece "Marker" Each)}) (rules (start {(place "Marker1" (union (expand (sites Bottom)) (sites {"B3" "D3" "G3" "I3"}))) (place "Marker2" (union (sites {"A3" "C3" "F3" "H3"}) (expand (sites Top))))}) phases:{(phase "CapturingFirstPhase" (play (priority {(if (is Mover P1) (or (forEach Piece (move Select (from) (to (sites Around (from)) if:(and (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection))))) (then (and (fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))))))) (forEach Piece (move Select (from) (to (sites Around (from)) if:(and (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection))))) (then (and (fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))))))))) (forEach Piece (move Step (to if:(is Empty (to)))))})) (nextPhase (le (count Pieces P2) 5) "FanoronaPhase")) (phase "FanoronaPhase" (play (if (is Prev Mover) (or (if (is Occupied (last To)) (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))})))) (or (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))) (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last From)) (to (sites Around (last From)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))))) (move Pass)) (priority {(or (forEach Piece (move Select (from) (to (sites Around (from)) if:(and (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection))))) (then (and (fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))))) (then (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))))) (moveAgain)))) (forEach Piece (move Select (from) (to (sites Around (from)) if:(and (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection))))) (then (and (fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))))) (then (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last To)) (directions Vertex from:(last From) to:(last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))})) (then (and {(fromTo (from (last From)) (to (last To))) (directional (from (last From)) (directions Vertex from:(last To) to:(last From)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (can Move (or (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (to) SameDirection)))}))) (move Select (from (last To)) (to (sites Around (last To)) if:(and {(not (is Visited (to))) (is Empty (to)) (is Enemy (who at:(ahead (from) OppositeDirection)))}))))) (moveAgain))}))))) (moveAgain))))) (forEach Piece (move Step (to if:(is Empty (to)))))}))) (end (if (no Pieces Mover) (result Next Win))))})) 
