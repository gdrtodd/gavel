Played on a 7x7 board. Each player has 11 pieces. they move diagonally one space or can capture opposing pieces by jumping. When captured, a piece is placed underneath the capturing piece, creating columns. When columns are captured, only the piece at the top of the column is taken. Columns are controlled by the player whose piece is on top of the column. When a piece or column reaches the opposite side of the board they become promoted to officer and can move backwards. A player wins by capturing all of the opponent's pieces. The game is played in a Chess board.
(game "Lasca" (players {(player N) (player S)}) (equipment {(board (square 7)) (piece "Counter" Each) (piece "CounterStar" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) steps:2) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) steps:2) (sites Phase 1)))}) (play (if (is Prev Mover) (if (equals (what at:(last To) level:(topLevel at:(last To))) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True)) (moveAgain))))) (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True (then (if (can Move (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True)) (moveAgain))))) (priority {(or {(forEach Piece "Counter" (move Hop (directions {FR FL}) (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True (then (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True)) (moveAgain)))) top:True (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True (then (if (can Move (move Hop (from (last To)) Diagonal (between if:(is Enemy (who at:(between))) (apply (fromTo (from (between)) (to)))) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True)) (moveAgain)))) top:True)}) (or {(forEach Piece "Counter" (move Step (directions {FR FL}) (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True) top:True (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Step Diagonal (to if:(and (is In (from) (sites Occupied by:Mover)) (is Empty (to)))) stack:True) top:True)})}))) (end (if (no Moves Next) (result Mover Win))))) 
