10x10 board. Twenty pieces per player, which begin in the four rows closest to the players. Pieces move diagonally forward one space. Pieces capture orthogonally or diagonally, in any direction, when there is one empty space between the piece and the opponent's piece, and an empty space immediately on the opposite side of the opponent's piece. Pieces are promoted to Queen when they reach the edge of the board opposite from where they start. Queens may capture orthogonally or diagonally in any direction over any distance, as long as there are no other pieces intervening and there is an empty spot immediately after the piece to be captured, which is where the Queen lands to make the capture. Multiple captures are allowed for Queens and regular pieces. Queens move orthogonally or diagonally any distance. The player who captures all of the opponent's pieces wins.
(game "Maleys" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) steps:(sub 4 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) steps:(sub 4 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (or (if (equals (what at:(last To)) (id "Counter" Mover)) (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain))))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0)) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain)))))) (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain)))))) (move Pass)) (or (forEach Piece "Counter" (or {(move Step (directions {FR FL}) (to if:(is Empty (to))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (move Hop (from) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain))))) (do (move Hop (from) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0)) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain)))))})) (forEach Piece "DoubleCounter" (or {(do (move Slide) ifAfterwards:(is In (last To) (sites Phase 0))) (move Hop (from) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain)))) (do (move Hop (from) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between before:1 if:(and (equals 2 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (do (move Hop (from (last To)) Orthogonal (between before:3 after:1 if:(and (equals 4 (count Steps (from) (between))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) ifAfterwards:(is In (last To) (sites Phase 0))))) (moveAgain))))}))))) (end (if (no Pieces Next) (result Next Loss))))) 
