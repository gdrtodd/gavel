6x7 lines forming a grid. Diagonals in each small square, with a point where the diagonals cross. 28 pieces, which begin on opposite sides of the board. In addition, each player has a Prince piece, which begins on the rightmost point immediately in front of the other pieces, and a King piece, which begins on the rightmost point in the line in front of the Prince. All pieces move one space to an empty adjacent spot along the lines. A piece may capture an adjacent opponent's piece by hopping over it to an empty adjacent spot on the opposite side of it. Multiple captures are allowed. Captures are not compulsory and neither are the maximum number of captures. Pieces may only capture other pieces of the same rank or lower. A player wins when they capture all of the opponent's pieces, or by blocking a higher ranking piece from being able to move if it is the only remaining piece belonging to the opponent. If players are left with only one piece each of the same rank, one player may declare single combat, and both pieces must move toward one another until one captures the other. If only the Kings are left on the board the game is a draw.
(game "Dablot Prejjesne" (players {(player S) (player N)}) (equipment {(board (rectangle 7 6 diagonals:Solid) use:Vertex) (piece "Cone" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (piece "Prince" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (piece "King" Each (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Cone1" (expand (sites Bottom) steps:2)) (place "Cone2" (expand (sites Top) steps:2)) (place "Prince1" coord:"H4" value:1) (place "Prince2" coord:"E9" value:1) (place "King1" coord:"I4" value:2) (place "King2" coord:"D9" value:2)}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (is Enemy (who at:(between))) (ge (value Piece at:(from)) (value Piece at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (if (and {(equals 1 (count Pieces P1)) (equals 1 (count Pieces P2)) (equals (max (results from:(sites Occupied by:P1) to:(sites Occupied by:P1) (value Piece at:(to)))) (max (results from:(sites Occupied by:P2) to:(sites Occupied by:P2) (value Piece at:(to)))))}) (forEach Piece (priority (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(and (is Empty (to)) (lt (count Steps (to) (regionSite (sites Occupied by:Next) index:0)) (count Steps (from) (regionSite (sites Occupied by:Next) index:0)))))))) (forEach Piece)))) (end {(if (no Pieces Next) (result Next Loss)) (if (and {(lt (max (results from:(sites Occupied by:Mover) to:(sites Occupied by:Mover) (value Piece at:(to)))) (max (results from:(sites Occupied by:Next) to:(sites Occupied by:Next) (value Piece at:(to))))) (equals 1 (count Pieces Next)) (no Moves Next)}) (result Mover Win)) (if (and {(equals 1 (count Pieces P1)) (notEqual (where "King" P1) -1) (equals 1 (count Pieces P2)) (notEqual (where "King" P2) -1)}) (result Mover Draw))}))) 
