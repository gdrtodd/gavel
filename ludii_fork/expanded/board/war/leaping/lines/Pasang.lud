11x11 intersecting lines, with the central nine points out of play. Diagonal lines connect the corners of the central square of the board to the outer corners. Played with two to four players. Black and white stones fill the board, alternating color, with black in the corners of the board. The first player captures one of the stones on one of the corners of the board. Subsequent moves involve capturing a stone by hopping over it with an adjacent stone to an empty space. Multiple captures are possible, but only one, three, five, or seven are allowed in a turn. If an even number of captures is possible, the final capture cannot be taken. Players are not required to capture as many as may be possible. The game ends when no more captures are possible. The player with the highest score wins: black stones count as one, white as two. 2 Players.
(game "Pasang" (players 2) (equipment {(board (add (remove (square 11) vertices:{48 49 50 59 60 61 70 71 72}) edges:{{0 12} {12 24} {24 36} {10 20} {20 30} {30 40} {75 87} {87 99} {99 111} {71 81} {81 91} {91 101}}) use:Vertex) (piece "Marker" Shared (move Hop (from) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1)))) (then (if (and (lt (count MovesThisTurn) 6) (can Move (move Hop (from (last To)) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1))))))) (moveAgain) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (set State at:(site) 0))))))) (piece "Disc" Shared (move Hop (from) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1)))) (then (if (and (lt (count MovesThisTurn) 6) (can Move (move Hop (from (last To)) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1))))))) (moveAgain) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (set State at:(site) 0)))))))}) (rules (start {(place "Marker" (forEach (sites {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 56 57 58 59 60 61 62 63}) if:(is Even (site)))) (place "Disc" (forEach (sites {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 56 57 58 59 60 61 62 63}) if:(is Odd (site)))) (place "Marker" (forEach (sites {48 49 50 51 52 53 54 55 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111}) if:(is Odd (site)))) (place "Disc" (forEach (sites {48 49 50 51 52 53 54 55 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111}) if:(is Even (site))))}) phases:{(phase "InitPhase" (play (move Remove (sites Corners) (then (set Score Mover 1)))) (nextPhase "MainPhase")) (phase "MainPhase" (play (if (is Prev Mover) (and (move Pass (then (forEach Site (sites Board) (if (equals 1 (state at:(site))) (set State at:(site) 0))))) (move Hop (from (last To)) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1)))) (then (if (and (lt (count MovesThisTurn) 6) (can Move (move Hop (from (last To)) (between if:(and (is Occupied (between)) (notEqual 1 (state at:(between))))) (to if:(is Empty (to)) (apply (if (is Even (count MovesThisTurn)) (and {(remove (between)) (if (equals (what at:(between)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (and (remove (site)) (if (equals (what at:(site)) (id "Marker" Shared)) (addScore Mover 1) (addScore Mover 2)))))}) (set State at:(between) 1))))))) (moveAgain) (forEach Site (sites Board) (if (equals 1 (state at:(site))) (set State at:(site) 0))))))) (forEach Piece Shared))))} (end (if (no Moves Next) (byScore))))) 
