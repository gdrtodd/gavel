8x8 board. Pieces have special moves, as follows: Rátu (king), moves one square in any direction, but on the first move, if it has not been checked, may move two spaces in any direction or like a Járan; Pateh (minister), moves orthogonally or diagonally any number of spaces; Mántri (x2); move diagonally any distance; Járan (horse) x2, moves orthogonally one space then diagonal one space from there, jumping over any intervening pieces; Práhu (vessel) x2, moves orthogonally any distance; Bídak (pawn) x8: moves one square forward or one square forward diagonally to capture. May move two spaces forward orthogonally if it is that piece's first move. Upon reaching the opposite edge of the board, the Bídak must move backward diagonally three spaces before being promoted to Pateh, unless it is in one of the corner spaces, in which case it is promoted immediately. There is no limit to the number of Patehs on the board. To castle, the Práhu moves next to the Rátu, and then at any turn in the future the Rátu may move to the space on the other side of it, provided the Rátu has not yet been checked and that the space to which it moves remains available. The Rátu cannot be in check at the end of its turn. When this is unavoidable, it is checkmate and the opponent wins. If the Rátu is the only piece belonging to the player on the board, that player wins.
(game "Chatur" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" (or (move Step (to if:(not (is Friend (who at:(to)))) (apply (remove (to)))) (then (if (not (equals 1 (state at:(last To)))) (set State at:(last To) 1)))) (if (not (equals 1 (state at:(from)))) (or {(move Slide (between (exact 2)) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to)))))) (if (is In (from) (sites {"E1" "D8"})) (or (if (and {(is Empty (ahead (from) steps:2 W)) (equals (what at:(ahead (from) W)) (id "Rook" Mover)) (not (equals 1 (state at:(ahead (from) W))))}) (move (from) (to (ahead (from) steps:2 W)))) (if (and {(is Empty (ahead (from) steps:2 E)) (equals (what at:(ahead (from) E)) (id "Rook" Mover)) (not (equals 1 (state at:(ahead (from) E))))}) (move (from) (to (ahead (from) steps:2 E))))))} (then (set State at:(last To) 1)))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (if (and (not (equals 1 (state at:(last To)))) (not (is In (last To) (sites {"D1" "F1" "C8" "E8"})))) (set State at:(last To) 1))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to))))))) (piece "Pawn" (if (is In (from) (sites Mover "Promotion")) (move Slide (directions {BR BL}) (between (exact 3)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))) (then (promote (last To) (piece "Queen") Mover))) (or (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (then (if (is In (last To) (intersection (sites Corners) (sites Mover "Promotion"))) (promote (last To) (piece "Queen") Mover)))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King_noCross1" coord:"E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Queen2" coord:"E8") (place "King_noCross2" coord:"D8")}) (play (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King_noCross" Mover))) (then (if (is Threatened (id "King_noCross" Next)) (if (not (equals 1 (state at:(where "King_noCross" Next)))) (set State at:(where "King_noCross" Next) 1)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (equals (count Pieces Next) 1) (result Mover Loss))}))) 
