Brusky Chess is played on a hexagonal board with sides of length 4, 5, and 9, and each space oriented vertically. It has 84 spaces. Piece Movement: * Queens, Rooks, Bishops, and Knights move as in Glinski Chess. - Queens slide in any of the 12 directions. - Rooks slide in any of the 6 adjacent directions. - Bishops slide in any of the 6 'diagonal' directions. - Knights move two spaces in any adjacent direction, then one space in another direction. * Kings step in any of the 12 direction, and castle either kingside (moving two spaces) or queenside (moving three spaces). Castling can only take place when neither the King nor the Rook being moved have moved before. * Pawns, when moving from a Pawn start space, can advance without capturing to either of the two spaces slightly left of forward, or either of the two spaces slightly right of forward, unless they are 'blocked'. A Pawn on a Pawn start space is 'blocked' if an enemy piece is adjacent to it in either of the forward adjacent directions. Pawns not on a Pawn start space can only advance one space without capturing. Pawns capture in a forward diagonal direction (i.e., to a space one row forward and off to the side, to a space connected by an edge, and having the same colour). A Pawn on a Pawn start space can also capture forwards (i.e., to the space directly ahead, having the same colour). En passant capture and Pawn promotion take place as in Glinski Chess. The game ends on a checkmate or stalemate.
(game "Brusky Chess" (players {(player N) (player S)}) (equipment {(board (remove (hex Rectangle 8 13) cells:{0 1 13 25 75 88 11 12 24 37 62 74 86 87 98 99})) (piece "King" Each (or {(move Step All (to if:(or (is In (to) (sites Empty)) (is Enemy (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0)))) (if (and {(equals (what at:(mapEntry "King" (mover))) (id "King" Mover)) (equals (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))}) (or {(if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True)))))) (if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is In (to) (sites Empty)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 3) if:(and (is In (to) (sites Empty)) (not (is Threatened (id "King" Mover) at:(to))))) (then (and (set State at:(last To) 0) (move Slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True))))))}))})) (piece "Queen" Each (move Slide All (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (if (is Mover P1) (and (is In (ahead (from) steps:1 NNW) (sites Empty)) (is In (ahead (from) steps:1 NNE) (sites Empty))) (and (is In (ahead (from) steps:1 SSW) (sites Empty)) (is In (ahead (from) steps:1 SSE) (sites Empty)))) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to if:(is In (to) (sites Empty))))) (if (is In (from) (sites Start (piece (what at:(from))))) (or (move Step (if (is Mover P1) (directions {N}) (directions {S})) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (if (if (is Mover P1) (and (is In (ahead (from) steps:1 NNW) (sites Empty)) (is In (ahead (from) steps:1 NNE) (sites Empty))) (and (is In (ahead (from) steps:1 SSW) (sites Empty)) (is In (ahead (from) steps:1 SSE) (sites Empty)))) (if (is Mover P1) (or (move Hop NNW (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) SSE)) (set Var (last To))}))) (move Hop NNE (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) SSW)) (set Var (last To))})))) (or (move Hop SSW (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) NNE)) (set Var (last To))}))) (move Hop SSE (between if:(is In (between) (sites Empty))) (to if:(is In (to) (sites Empty))) (then (and {(set Pending (ahead (last To) NNW)) (set Var (last To))}))))))) (move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to if:(and (is Pending) (equals (to) (value Pending)))) (then (remove (var)))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain)) (set Counter))))) (map "King" {(pair 1 "F1") (pair 2 "I8")}) (map "RookLeft" {(pair 1 "A1") (pair 2 "D8")}) (map "RookRight" {(pair 1 "I1") (pair 2 "L8")}) (regions "PromotionZone" P1 (sites Top)) (regions "PromotionZone" P2 (sites Bottom)) (regions "Region-Dark" (sites Phase 2)) (regions "Region-Light" (sites Phase 1)) (regions "Region-Medium" (sites Phase 0))}) (rules (start {(place "King1" coord:"F1" state:1) (place "Queen1" coord:"D1") (place "Rook1" {"A1" "I1"} state:1) (place "Bishop1" {"C1" "G1" "E1"}) (place "Knight1" {"B1" "H1"}) (place "King2" coord:"I8" state:1) (place "Queen2" coord:"G8") (place "Rook2" {"D8" "L8"} state:1) (place "Bishop2" {"F8" "H8" "J8"}) (place "Knight2" {"E8" "K8"}) (place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6))}) phases:{(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) ifAfterwards:(not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (equals (counter) 100)) (result Mover Draw))}))})) 
