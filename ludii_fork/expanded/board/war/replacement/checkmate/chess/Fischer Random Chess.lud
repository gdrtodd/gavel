Before the game, a starting position is randomly determined and set up, subject to certain requirements. White's pieces (not pawns) are placed randomly on the first rank, following two rules: The bishops must be placed on opposite-color squares. The king must be placed on a square between the rooks. Black's pieces are placed equal-and-opposite to White's pieces. (For example, if the white king is randomly determined to start on f1, then the black king is placed on f8.) Pawns are placed on the players' second ranks as in classical chess. After setup, the game is played the same as classical chess in all respects.
(game "Fischer Random Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (remove (to))))) (or (if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to if:(and (is Pending) (equals (to) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain)) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (remove (to) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (remove (to) (then (set Counter))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Rook1" (sites Random (difference (sites Bottom) (expand (sites Right)))) state:1) (place "King1" (sites Random (difference (intersection {(sites Bottom) (expand (sites Occupied by:Mover) steps:8 E) (sites Empty)}) (sites Right))) state:1) (place "Rook1" (sites Random (intersection {(sites Bottom) (expand (sites Occupied by:Mover component:"King") steps:8 E) (sites Empty)})) state:1) (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 0)}))) (place "Bishop1" (sites Random (intersection {(sites Bottom) (sites Empty) (sites Phase 1)}))) (place "Knight1" (sites Random (intersection (sites Bottom) (sites Empty)) num:2)) (place "Queen1" (sites Random (intersection (sites Bottom) (sites Empty)))) (place "Pawn1" (sites Row 1)) (place "Rook2" (forEach (sites Top) if:(equals (id "Rook1") (what at:(ahead (site) steps:7 S)))) state:1) (place "Bishop2" (forEach (sites Top) if:(equals (id "Bishop1") (what at:(ahead (site) steps:7 S))))) (place "Knight2" (forEach (sites Top) if:(equals (id "Knight1") (what at:(ahead (site) steps:7 S))))) (place "Queen2" (forEach (sites Top) if:(equals (id "Queen1") (what at:(ahead (site) steps:7 S))))) (place "King2" (forEach (sites Top) if:(equals (id "King1") (what at:(ahead (site) steps:7 S)))) state:1) (place "Pawn2" (sites Row 6))}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (or (forEach Piece) (if (and (equals (state at:(where "King" Mover)) 1) (not (is Threatened (id "King" Mover)))) (if (is Mover P1) (forEach Site (sites Occupied by:Mover component:"Rook") (if (equals (state at:(site)) 1) (if (lt (column of:(site)) (column of:(where "King" Mover))) (if (or (can Move (slide (from (site)) (if (lt (column of:(site)) (column of:(coord "D1"))) E W) (between (exact (count Steps (coord "D1") (site))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (equals (site) (coord "D1"))) (if (equals (where "King" Mover) (coord "C1")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (lt (column of:(where "King" Mover)) (column of:(coord "C1"))) E W) (between (exact (count Steps (coord "C1") (where "King" Mover))) if:(and (or (is Empty (to)) (equals (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (equals (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (equals (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (lt (column of:(var "RookToMove")) (column of:(coord "D1"))) E W) (between (exact (count Steps (coord "D1") (var "RookToMove"))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "D1"))))))) (if (or (can Move (slide (from (site)) (if (lt (column of:(site)) (column of:(coord "F1"))) E W) (between (exact (count Steps (coord "F1") (site))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (equals (site) (coord "F1"))) (if (equals (where "King" Mover) (coord "G1")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (lt (column of:(where "King" Mover)) (column of:(coord "G1"))) E W) (between (exact (count Steps (coord "G1") (where "King" Mover))) if:(and (or (is Empty (to)) (equals (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (equals (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (equals (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (lt (column of:(var "RookToMove")) (column of:(coord "F1"))) E W) (between (exact (count Steps (coord "F1") (var "RookToMove"))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "F1")))))))))) (forEach Site (sites Occupied by:Mover component:"Rook") (if (equals (state at:(site)) 1) (if (gt (column of:(site)) (column of:(where "King" Mover))) (if (or (can Move (slide (from (site)) (if (lt (column of:(site)) (column of:(coord "F8"))) E W) (between (exact (count Steps (coord "F8") (site))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (equals (site) (coord "F8"))) (if (equals (where "King" Mover) (coord "G8")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (lt (column of:(where "King" Mover)) (column of:(coord "G8"))) E W) (between (exact (count Steps (coord "G8") (where "King" Mover))) if:(and (or (is Empty (to)) (equals (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (equals (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (equals (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (lt (column of:(var "RookToMove")) (column of:(coord "F8"))) E W) (between (exact (count Steps (coord "F8") (var "RookToMove"))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "F8"))))))) (if (or (can Move (slide (from (site)) (if (lt (column of:(site)) (column of:(coord "D8"))) E W) (between (exact (count Steps (coord "D8") (site))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0))))) (equals (site) (coord "D8"))) (if (equals (where "King" Mover) (coord "C8")) (do (set Var "RookToMove" (site)) next:(move Select (from (where "King" Mover)))) (move Slide (from (where "King" Mover)) (if (lt (column of:(where "King" Mover)) (column of:(coord "C8"))) E W) (between (exact (count Steps (coord "C8") (where "King" Mover))) if:(and (or (is Empty (to)) (equals (to) (site))) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply if:(or (equals (to) (site)) (is Empty (to))) (and (set State at:(from) 0) (set Var "RookToMove" (site)))))) (then (if (equals (what at:(var "RookToMove")) (id "Rook" Mover)) (slide (from (var "RookToMove")) (if (lt (column of:(var "RookToMove")) (column of:(coord "D8"))) E W) (between (exact (count Steps (coord "D8") (var "RookToMove"))) if:(or (is Empty (to)) (equals (what at:(to)) (id "King" Mover)))) (to if:True (apply if:(or (equals (what at:(to)) (id "King" Mover)) (is Empty (to))) (set State at:(from) 0)))) (add (piece (id "Rook" Mover)) (to (coord "D8"))))))))))))) ifAfterwards:(not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (equals (counter) 99)) (result Mover Draw))}))) 
