Played on an 8x8 board with pieces with specialized moves: Pawns (8): can move one space forward, or one space diagonally forward to capture; Players agree at the beginning of the game whether pawns may move two spaces on their first turn. Two pawns may be moved by a player in their first turn of the game. Pawns may only be promoted to a piece that has already been captured. If none have been captured, the pawn must remain in place until a piece has been captured. Rooks (2): can move any number of spaces orthogonally; Bishops (2): can move any number of spaces diagonally; Knight (2): moves in any direction, one space orthogonally with one space forward diagonally, jumping over any intervening pieces; Queens (1): can move any number of spaces orthogonally or diagonally; Kings (1): can move one space orthogonally or diagonally. A King cannot castle if it has ever been checked. Players capture pieces by moving onto a space occupied by an opponent's piece. A player must say 'Gardez la reine' (Guard the Queen) when the queen is threatened. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. A player who causes a stalemate loses. The pawns can double step from the starting positions.
(game "Korkserschach" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (if (notEqual (last To) (from)) (or {(if (and (or {(is In (id "Queen" Mover) (values Remembered "CapturedPieces")) (is In (id "Knight" Mover) (values Remembered "CapturedPieces")) (is In (id "Rook" Mover) (values Remembered "CapturedPieces")) (is In (id "Bishop" Mover) (values Remembered "CapturedPieces"))}) (is In (from) (sites Mover "Promotion"))) (or {(if (is In (id "Queen" Mover) (values Remembered "CapturedPieces")) (move Promote (from) (piece {"Queen"}) Mover)) (if (is In (id "Knight" Mover) (values Remembered "CapturedPieces")) (move Promote (from) (piece {"Knight"}) Mover)) (if (is In (id "Rook" Mover) (values Remembered "CapturedPieces")) (move Promote (from) (piece {"Rook"}) Mover)) (if (is In (id "Bishop" Mover) (values Remembered "CapturedPieces")) (move Promote (from) (piece {"Bishop"}) Mover))} (then (set Pending)))) (if (is In (from) (sites Start (piece (what at:(from))))) (move Slide Forward (between (exact 2) if:(is Empty (between))) (to if:(is Empty (to))))) (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (and (remember Value "CapturedPieces" (what at:(to))) (remove (to))))))} (then (and (if (and (is In (last To) (sites Mover "Promotion")) (or {(is In (id "Queen" Mover) (values Remembered "CapturedPieces")) (is In (id "Knight" Mover) (values Remembered "CapturedPieces")) (is In (id "Rook" Mover) (values Remembered "CapturedPieces")) (is In (id "Bishop" Mover) (values Remembered "CapturedPieces"))})) (moveAgain)) (if (and (not (is Prev Mover)) (le (count Turns) 2)) (and (set Pending) (moveAgain)))))))) (piece "Rook" Each (move Slide Orthogonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (remember Value "CapturedPieces" (what at:(to))) (remove (to)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "King" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (and (remember Value "CapturedPieces" (what at:(to))) (remove (to)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (remember Value "CapturedPieces" (what at:(to))) (remove (to)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Enemy (who at:(to))) (and (remember Value "CapturedPieces" (what at:(to))) (remove (to)))))))) (piece "Queen" Each (move Slide (to if:(is Enemy (who at:(to))) (apply (if (is Enemy (who at:(to))) (and (remember Value "CapturedPieces" (what at:(to))) (remove (to)))))))) (map "King" {(pair 1 "E1") (pair 2 "E8")}) (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")}) (map "RookRight" {(pair 1 "H1") (pair 2 "H8")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1" state:1) (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8" state:1)}) (play (if (and (not (is Pending)) (is Prev Mover)) (or {(if (is In (id "Queen" Mover) (values Remembered "CapturedPieces")) (move Promote (last To) (piece {"Queen"}) Mover)) (if (is In (id "Knight" Mover) (values Remembered "CapturedPieces")) (move Promote (last To) (piece {"Knight"}) Mover)) (if (is In (id "Rook" Mover) (values Remembered "CapturedPieces")) (move Promote (last To) (piece {"Rook"}) Mover)) (if (is In (id "Bishop" Mover) (values Remembered "CapturedPieces")) (move Promote (last To) (piece {"Bishop"}) Mover))}) (do (if (is Pending) (or (move Pass) (forEach Piece "Pawn" Mover)) (or (forEach Piece) (if (and (equals (state at:(mapEntry "King" (mover))) 1) (not (is Threatened (id "King" Mover)))) (or (if (and (equals (state at:(mapEntry "RookLeft" (mover))) 1) (can Move (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) W (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookLeft" (mover))) E (between (exact 3) if:True) (to if:True (apply (set State at:(from) 0))))))) (if (and (equals (state at:(mapEntry "RookRight" (mover))) 1) (can Move (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:(is Empty (to))) (to if:True (apply (set State at:(from) 0)))))) (move Slide (from (mapEntry "King" (mover))) E (between (exact 2) if:(and (is Empty (to)) (not (is Threatened (id "King" Mover) at:(to))))) (to if:True (apply (set State at:(from) 0))) (then (slide (from (mapEntry "RookRight" (mover))) W (between (exact 2) if:True) (to if:True (apply (set State at:(from) 0))))))))))) ifAfterwards:(not (is Threatened (id "King" Mover)))) (then (and (if (or (is Threatened (id "Queen" P1)) (is Threatened (id "Queen" P2))) (note "Gardez la reine")) (if (and (equals (state at:(where "King" Next)) 1) (is Threatened (id "King" Next))) (set State at:(where "King" Next) 0)))))) (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) ifAfterwards:(not (is Threatened (id "King" Next))))))) (result Mover Win))))) 
