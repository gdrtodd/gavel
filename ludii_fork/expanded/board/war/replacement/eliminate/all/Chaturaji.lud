8x8 board. Four players. Two dice. Four pawns, one ship, one horse, one elephant, and one king per player. The king moves one square in any direction. Pawns move one square forward, and capture one square forward diagonally. Horses move three squares diagonally. Ships move two squares diagonally. The Elephant moves any number of squares orthogonally. Moves are determined by dice roll: 5= pawn or king, 4= elephant, 3= horse, 2= ship. Captures are made by moving onto the space occupied by an opponent's piece. If a ship moves into a space to make a 2x2 square with only ships, it captures the other three ships. Pawns may promote but only to the other piece that begins in that rank or file, including a king, and that piece must have already been captured. Points are awarded based on captures: pawns=1, ships=2, horses=3, elephants=4, kings=5. If a player captures their opponents' three kings while theirs remains, they receive 54 points. The player who accumulates the most points wins. The rules are describing with the Wikipedia ruleset.
(game "Chaturaji" (players {(player N) (player W) (player S) (player E)}) (equipment {(board (square 8)) (dice d:4 from:2 num:1) (piece "Pawn" Each (or (move Step Forward (to if:(is Empty (to)))) (move Step (directions {FR FL}) (to if:(is Enemy (who at:(to))) (apply (if (is Occupied (to)) (and (addScore Mover (value Piece at:(to))) (remove (to))))))) (then (if (is In (last To) (sites Mover "Promotion")) (and (moveAgain) (set Pending)))))) (piece "Boat" Each (move Hop Diagonal (to if:(not (is Friend (who at:(to)))) (apply (if (is Occupied (to)) (and (addScore Mover (value Piece at:(to))) (remove (to)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to if:(not (is Friend (who at:(to)))) (apply (if (is Occupied (to)) (and (addScore Mover (value Piece at:(to))) (remove (to)))))))) (piece "Elephant" Each (move Slide Orthogonal (between if:(is Empty (between))) (to if:(is Enemy (who at:(to))) (apply (if (is Occupied (to)) (and (addScore Mover (value Piece at:(to))) (remove (to)))))))) (piece "King_noCross" Each (move Step (to if:(not (is Friend (who at:(to)))) (apply (if (is Occupied (to)) (and (addScore Mover (value Piece at:(to))) (remove (to)))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Left)) (regions "Promotion" P3 (sites Bottom)) (regions "Promotion" P4 (sites Right))}) (rules (start {(place "Pawn1" {"A2" "B2" "C2" "D2"} value:1) (place "Pawn2" {"G1" "G2" "G3" "G4"} value:1) (place "Pawn3" {"H7" "G7" "E7" "F7"} value:1) (place "Pawn4" {"B5" "B6" "B7" "B8"} value:1) (place "Boat1" coord:"A1" value:2) (place "Boat2" coord:"H1" value:2) (place "Boat3" coord:"H8" value:2) (place "Boat4" coord:"A8" value:2) (place "Knight1" coord:"B1" value:3) (place "Knight2" coord:"H2" value:3) (place "Knight3" coord:"G8" value:3) (place "Knight4" coord:"A7" value:3) (place "Elephant1" coord:"C1" value:4) (place "Elephant2" coord:"H3" value:4) (place "Elephant3" coord:"F8" value:4) (place "Elephant4" coord:"A6" value:4) (place "King_noCross1" coord:"D1" value:5) (place "King_noCross2" coord:"H4" value:5) (place "King_noCross3" coord:"E8" value:5) (place "King_noCross4" coord:"A5" value:5)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (and (is Prev Mover) (is Pending)) (or {(if (equals (where "Boat" Mover) -1) (move Promote (last To) (piece "Boat") Mover (then (set Value at:(last To) 2)))) (if (equals (where "Knight" Mover) -1) (move Promote (last To) (piece "Knight") Mover (then (set Value at:(last To) 3)))) (if (equals (where "Elephant" Mover) -1) (move Promote (last To) (piece "Elephant") Mover (then (set Value at:(last To) 4)))) (if (equals (where "King_noCross" Mover) -1) (move Promote (last To) (piece "King_noCross") Mover (then (set Value at:(last To) 5))))}) (forEach Die (if (equals (pips) 5) (or (forEach Piece "Pawn") (forEach Piece "King_noCross")) (if (equals (pips) 4) (forEach Piece "Elephant") (if (equals (pips) 3) (forEach Piece "Knight") (if (equals (pips) 2) (forEach Piece "Boat")))))) (then (if (can Move (forEach Die (if (equals (pips) 5) (or (forEach Piece "Pawn") (forEach Piece "King_noCross")) (if (equals (pips) 4) (forEach Piece "Elephant") (if (equals (pips) 3) (forEach Piece "Knight") (if (equals (pips) 2) (forEach Piece "Boat"))))))) (moveAgain)))))) (end (if (equals (count Pieces Mover) (sub (count Pieces All) 1)) (byScore))))) 
