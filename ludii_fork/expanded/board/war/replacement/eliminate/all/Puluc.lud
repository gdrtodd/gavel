Ten corn kernels are placed in a line; the spaces between the kernels are the playing spaces. Four kernels of corn are used as dice, blackened on one side. The throws are as follows: Two of the same side up = 2, three of the same side up = 3; four black sides up = 4; four unblackened sides up = 5. Five pieces per player. Players take turns moving pieces according to the throws of the corn, with two throws per turn. When a player reaches the opposite end of the board, they move to the start and continue moving in the same direction. If a piece lands on a space occupied by an opponent's piece, the player then moves in the reverse direction, carrying the opponent's piece with it in an attempt to move past the starting points and off the board. Upon moving off the board, the opponent's piece is captured. The player then enters their piece again on their next turn. However, if the opponent lands on a piece carrying one of their pieces away, they then start carrying both of those pieces back to their starting point, freeing the captured piece and capturing the other player's piece. The player who captures all of the opponent's pieces wins.
(game "Puluc" (players 2) (equipment {(board (rectangle 1 10) {(track "Track1" {0 1 2 3 4 5 6 7 8} loop:True P1) (track "Track2" {8 7 6 5 4 3 2 1 0} loop:True P2) (track "CaptureTrack1" {8 7 6 5 4 3 2 1 0} P1 directed:True) (track "CaptureTrack2" {0 1 2 3 4 5 6 7 8} P2 directed:True)} use:Edge) (piece "Marker" Each (or (if (equals 0 (state at:(from) level:(level))) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(mapEntry "Throw" (count Pips)))) (then (if (is In (last To) (sites Occupied by:Enemy top:False)) (forEach Level (last To) FromTop (and (if (is Enemy (who at:(last To) level:(level))) (set State at:(last To) level:(level) 2)) (if (is Friend (who at:(last To) level:(level))) (set State at:(last To) level:(level) 1)))))))) (if (equals 1 (state at:(from) level:(level))) (if (notEqual (trackSite Move from:(from) "CaptureTrack" steps:(mapEntry "Throw" (count Pips))) -1) (move (from (from) level:(level)) (to (trackSite Move from:(from) "CaptureTrack" steps:(mapEntry "Throw" (count Pips)))) (then (and (forEach Level (last From) FromTop (if (equals 2 (state at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To))))) (forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0)))))) (move Remove (from) level:(level) (then (and {(forEach Level (last From) FromTop (if (is Friend (who at:(last From) level:(level))) (set State at:(last From) level:(level) 0))) (forEach Level (last From) FromTop (if (equals 2 (state at:(last From) level:(level))) (remove (last From) level:(level)))) (add (piece (id "Marker" Mover)) (to (handSite Mover)))}))))))) (regions "AllSites" (sites Board Vertex)) (map "Throw" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "Entry" {(pair 1 0) (pair 2 8)}) (dice d:2 from:0 num:4) (hand Each)}) (rules (start {(place Stack "Marker1" (handSite P1) count:5) (place Stack "Marker2" (handSite P2) count:5)}) (play (do (roll) next:(or {(if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move from:(mapEntry "Entry" (mover)) "Track" steps:(sub (mapEntry "Throw" (count Pips)) 1))))) (forEach Piece)}) (then (if (not (is Prev Mover)) (moveAgain))))) (end {(if (no Pieces P2) (result P2 Loss)) (if (no Pieces P1) (result P1 Loss))}))) 
