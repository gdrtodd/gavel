Four rows of holes, of any number. Each player has as many pieces as are in one row. The pieces start in the outer row of the board for each player. Six sticks used as dice, with a green side and a white side. The throws are as follows: one white up = 0; two white up = 2; three white up = 1; four white up = 4; five white up = 0; zero white or six white up = 6. Each piece's first move must be with a throw of 1 or 6. This first throw moves the piece one space only. Play moves from left to right in the player's home row, from right to left in the second row, left to right in the third row, and right to left in the opponent's home row. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board. The player who captures all of the opponent's pieces wins. Each row has 20 holes.
(game "Sig (Mzab)" (players 2) (equipment {(board (rectangle 4 20) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 directed:True) (track "Track2" "79,W,S1,E,S1,W,S1,E" P2 directed:True)} use:Vertex) (piece "Stick" Each (if (or (equals (state at:(from)) 0) (and (or (equals 1 (mapEntry (count Pips))) (equals 6 (mapEntry (count Pips)))) (equals (state at:(from)) 1))) (if (notEqual (trackSite Move steps:(if (equals (state at:(from)) 1) 1 (mapEntry (count Pips)))) -1) (if (or (is In (trackSite Move steps:(if (equals (state at:(from)) 1) 1 (mapEntry (count Pips)))) (sites Empty)) (is Enemy (who at:(trackSite Move steps:(if (equals (state at:(from)) 1) 1 (mapEntry (count Pips))))))) (move (from) (to (trackSite Move steps:(if (equals (state at:(from)) 1) 1 (mapEntry (count Pips)))) (apply if:(is Enemy (who at:(to))) (remove (to)))))) (then (if (equals (state at:(last To)) 1) (set State at:(last To) 0)))))) (regions "AllSites" (sites Board)) (dice d:2 from:0 num:6) (map {(pair 0 6) (pair 1 0) (pair 2 2) (pair 3 1) (pair 4 1) (pair 5 0) (pair 6 6)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Stick1" (sites Bottom) state:1) (place "Stick2" (sites Top) state:1)}) (play (do (roll) next:(forEach Piece))) (end {(if (no Pieces Next) (result Next Loss)) (if (and (equals (count Sites in:(difference (sites Occupied by:P1) (sites P2))) 0) (equals (count Sites in:(difference (sites Occupied by:P2) (sites P1))) 0)) (result Mover Draw))}))) 
