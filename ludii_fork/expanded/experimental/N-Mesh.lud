Goal: Deprive any of your opponent's stones access to an empty shaded Liberty cell, by surrounding or 'Enmeshing' them. Play: -- Black starts with an empty board. -- White has the option to convert Black's first stone to white instead of placing elsewhere. (pie move) -- Turns alternate. -- On your turn place one of your stones on an empty site. Ending the game: -- The game ends as soon as any stone is enmeshed. (see definitions below). -- If both player's stones are simultaneously 'enmeshed', the player with the most 'enmeshed' stones loses. -- If this is still equal, the moving player loses. Definitions: A stone is 'Enmeshed' if it has no path in the play area to an empty shaded liberty cell without crossing a connection between the opponent's stones. There is a connection between stones of the same color if they: -- 1. are on adjacent squares, -- 2. are diagonally adjacent, (player's connections can cross each other) -- 3. are at knight's distance, with at least one empty space between. Notes: Knight's connections can cross each other, but cease to exist when 2 pieces are placed in between. When a stone is placed on a shaded cell, that cell no longer serves as a liberty for either player. Order 6 board
(game "N-Mesh" (players 2) (equipment {(board (square 6) use:Cell) (regions "Marked" (forEach (sites Board) if:(equals 0 (mod (add {(if (equals 0 (mod (sub 6 1) 5)) 1 0) (site) (mul (sub 7 6) (div (site) 6))}) 5)))) (piece "Ball" P1 maxState:1) (piece "Ball" P2 maxState:1) (piece "I" P1 maxState:5) (piece "I" P2 maxState:5)}) (rules (play (or (if (equals 0 (counter)) (move Add (to (sites Occupied by:Next) (apply (remove (to)))))) (move Add (piece (id "Ball" Mover)) (to (sites Empty)) (then (and {(if (can Move (leap (from Cell (last To)) {{F F L F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (gt 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (forEach Value (results from:(last To) to:(sites To (leap (from Cell (last To)) {{F F L F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (gt 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (regionSite (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:1)))) index:0)) (add (piece (id "I" Mover)) (to Edge (value) (apply (set Var "ToEdge" (value)))) stack:True (then (set State Edge at:(var "ToEdge") (add 1 (if (or (equals (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) E)) (equals (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) W))) 0 2))))))) (if (can Move (leap (from Cell (last To)) {{F F R F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (gt 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (forEach Value (results from:(last To) to:(sites To (leap (from Cell (last To)) {{F F R F}} (to Cell (sites Occupied by:Mover) if:(and {(is Mover (who at:(to))) (not (is Within (id "Ball" Mover) in:(intersection (sites Around Cell (to)) (sites Around Cell (last To))))) (gt 2 (count Pieces All in:(intersection (sites Around Cell (to) Adjacent) (sites Around Cell (last To) Adjacent))))})))) (regionSite (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (difference (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:0)) (sites Incident Edge of:Cell at:(regionSite (intersection (sites Around Cell (to)) (sites Around Cell (last To))) index:1)))) index:0)) (add (piece (id "I" Mover)) (to Edge (value) (apply (set Var "ToEdge" (value)))) stack:True (then (set State Edge at:(var "ToEdge") (add 2 (if (or (equals (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) E)) (equals (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:0) (ahead Cell (regionSite (sites Incident Cell of:Edge at:(var "ToEdge")) index:1) W))) 0 2))))))) (and {(forEach Site (sites Around Cell (last To) Orthogonal) (apply if:(is Mover (who at:(site))) (remove Edge (regionSite (difference (sites Incident Edge of:Cell at:(site)) (difference (sites Incident Edge of:Cell at:(site)) (sites Incident Edge of:Cell at:(last To)))) index:0) count:2))) (forEach Site (sites Incident Edge of:Cell at:(last To)) (apply if:(equals (mover) (who Edge at:(site))) (remove Edge (site) count:2)))}) (and (do (if (or (equals 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (last To)))) (equals 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Mover (who at:(to)))) (or {(equals (to) (from)) (and (is Mover (who at:(from))) (is Mover (who at:(to)))) (not (or (and (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (from) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (from) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (to) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (to) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (to) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (to) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (from) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (from) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (last To) (difference (intersection (sites "Marked") (sites Empty)) (last To))))) (and {(trigger "Enmeshed" Mover) (set State at:(last To) 1) (forEach Value (array (sites Occupied by:Mover on:Cell)) (if (or (equals 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (value)))) (equals 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Mover (who at:(to)))) (or {(equals (to) (from)) (and (is Mover (who at:(from))) (is Mover (who at:(to)))) (not (or (and (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (from) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (from) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (to) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (to) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (to) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (to) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Mover)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (from) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (from) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (value) (difference (intersection (sites "Marked") (sites Empty)) (value))))) (set State at:(value) 1)))})) next:(set Score Mover (sub 0 (count Pieces Cell Mover in:(sites State Cell 1))))) (do (forEach Value (array (sites Occupied by:Next on:Cell)) (if (or (equals 0 (count Sites in:(difference (intersection (sites "Marked") (sites Empty)) (value)))) (equals 1000000000 (count Steps (step (from (from)) Orthogonal (to if:(and (or (is Empty (to)) (is Next (who at:(to)))) (or {(equals (to) (from)) (and (is Next (who at:(from))) (is Next (who at:(to)))) (not (or (and (notEqual 0 (count Pieces of:(sub 3 (id Next)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (from) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (from) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (from) S) (sites Around (from) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Next)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (to) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (to) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (to) S) (sites Around (to) E))))))) (and (notEqual 0 (count Pieces of:(sub 3 (id Next)) in:(if (equals (from) (ahead Cell (to) E)) (sites Around (to) N) (if (equals (from) (ahead Cell (to) N)) (sites Around (to) W) (if (equals (from) (ahead Cell (to) W)) (sites Around (to) S) (sites Around (to) E)))))) (notEqual 0 (count Pieces of:(sub 3 (id Next)) in:(if (equals (to) (ahead Cell (from) E)) (sites Around (from) N) (if (equals (to) (ahead Cell (from) N)) (sites Around (from) W) (if (equals (to) (ahead Cell (from) W)) (sites Around (from) S) (sites Around (from) E)))))))))})))) (value) (difference (intersection (sites "Marked") (sites Empty)) (value))))) (and (trigger "Enmeshed" Next) (set State at:(value) 1)))) next:(set Score Next (sub 0 (count Pieces Cell Next in:(sites State Cell 1))))))}))))) (end (if (or (is Triggered "Enmeshed" Mover) (is Triggered "Enmeshed" Next)) {(if (equals (score Mover) (score Next)) (result Next Win)) (if (notEqual (score Mover) (score Next)) (byScore))} (byScore))))) 
