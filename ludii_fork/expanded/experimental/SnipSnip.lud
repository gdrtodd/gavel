SnipSnip is a 2-player strategy game It may be played: -- on a hex grid -- on a square grid -- on a square plus diagonal grid Goal: Largest Group (in Misere, the largest Group loses.) Definitions: A Group is a set of all the pieces that can be reached from any one of them by a series of steps, where a step means movement from one piece to another of the same color, next to it. Note: For the Diagonal-Linked Group options a step also include diagonals (double-steps that are not in the same grid direction). A site is a board intersection. 'Between' Variant: -- A Capture site is any site adjacent to two stones of opposite color in the same line (i.e. directly between them.) 'Diagonal' Variant: -- A Capture site is any site adjacent to each of two stones of opposite color, where those stones are not on the same grid-line. Play: Players take turn, starting on an empty board with White to play. On a turn 1) The mover places to an empty site that is not a Capture site. 2) Then, if possible, the mover removes one of the opponent's checkers from a Capture site that lies adjacent to the placement just made. In the case of Misere, the mover must take an additional turn after each capture. Otherwise, the next player becomes the mover. The game ends when no placement is possible. In the case of a tie, the player who would have been next to place loses. Misere: Score one negative point for each stone in your largest group of adjacent stones Capture one of the opponent's stones on the 2  sites orthogonally between your stone and a diagonally adjacent opponent's stone. Board & size: Equiversi Hexhex with edges alternating 2 and 4
(game "SnipSnip" (players 2) (equipment {(board (tri {2 4 2 4 2}) use:Vertex) (piece "Ball" Each)}) (rules (start {(set Score Each 0)}) (play (if (equals 1 (value Player Mover)) (move Remove (sites (results from:(last To) to:(forEach of:(intersection (difference (difference (sites Around (sites Around (from) Orthogonal) Orthogonal) (sites (from) {{F} {F F}})) (from)) (sites Occupied by:Next)) (intersection {(sites Around (from) Orthogonal) (sites Around (site) Orthogonal) (sites Occupied by:Next)})) (to))) (then (and {(set Value Mover 0) (moveAgain)}))) (move Add (to (difference (sites Empty) (sites (results from:(sites Occupied by:P1) to:(forEach of:(intersection (difference (difference (sites Around (sites Around (from) Orthogonal) Orthogonal) (sites (from) {{F} {F F}})) (from)) (sites Occupied by:P2)) (intersection {(sites Around (from) Orthogonal) (sites Around (site) Orthogonal) (sites Empty)})) (to))))) (then (if (lt 0 (count Pieces in:(sites (results from:(last To) to:(forEach of:(intersection (difference (difference (sites Around (sites Around (from) Orthogonal) Orthogonal) (sites (from) {{F} {F F}})) (from)) (sites Occupied by:Next)) (intersection {(sites Around (from) Orthogonal) (sites Around (site) Orthogonal) (sites Occupied by:Next)})) (to))))) (set Value Mover 1 (then (moveAgain)))))) (then (forEach Player (set Score (player (player)) (mul -1 (max 0 (max (sizes Group Orthogonal of:(player)))))))))) (end {(if (and (no Moves Next) (equals (score P1) (score P2))) (result Next Loss)) (if (and (no Moves Next) (notEqual (score P1) (score P2))) (byScore))}))) 
