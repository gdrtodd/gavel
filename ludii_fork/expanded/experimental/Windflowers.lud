Choose between two versions: -- Place the most stones, or -- Form the largest group. Ties are broken by relying on a cascading comparison of largest groups; - With a standard choice of breaking the tie in favor of the underdog. The board starts empty. Players take turns in sequence. Passing is allowed. The game ends when all players have passed in succession. On a turn, the mover either: 1: Places a stone on an empty site, - or - 2: Replaces an opponent's stone with their own, ---- But replacing a stone is only allowed when there are more stones around that site of the captured stone's color than there are of the mover's own color. Note: On boards with diagonals, diagonally adjacent stones are part of the count used to allow or disallow capture. At the end of the game, players count all their stones, or count the stones in their largest group, depending on the goal. Which stones belong to a given group are determined by orthogonal connections. In the case of a tie between the leading players, each pair of those players compares the size of their largest remaining group after any tied pairs have been removed. This difference is added to the score of the player with the larger group in that pairing - (or to the score of other player in that pairing, in the case of underdog tie-breaking) The winner of the game is decided by these amended scores. Ties may still remain. Also ties between non-leading players are not resolved. Order 4 board Triangle-Square N-2: Capture-compare all 7 adjacent directions. Scoring - groups connect only in the 5 edge-edge directions. Score a point for each stone placed. While ignoring paired groups of equal size, if your largest group is SMALLER, augment your score by the difference between your largest group and the largest group for every tied opponent. 2 players
(game "Windflowers" (players 2) (equipment {(board (tiling T33434 (sub 4 2)) use:Vertex) (piece "Ball" Each)}) (rules (start (set Score Each 0)) (play (or {(move Pass) (move Claim (to (sites Empty))) (forEach Site (difference (difference (sites Board) (sites Empty)) (sites Occupied by:Mover)) (if (gt (max 0 (count Pieces of:(who at:(site)) in:(sites Around (site) All))) (max 0 (count Pieces of:(mover) in:(sites Around (site) All)))) (move Remove (site) (then (claim (to (last To)))))))} (then (if (all Passed) (do (forEach Player (remember Value "Scores" (count Sites in:(sites Occupied by:Player)))) next:(do (forEach Player (if (equals (count Sites in:(sites Occupied by:Player)) (max (difference (values Remembered "Scores") (count Sites in:(sites Occupied by:Player))))) (and (remember Value "Tied" (player)) (set Score Player (count Sites in:(sites Occupied by:Player)))) (set Score Player (count Sites in:(sites Occupied by:Player))))) next:(do (forEach Value (values Remembered "Tied") (forEach (players All if:(is In (player) (values Remembered "Tied"))) (addScore (player (player)) (max 0 (sub (max 0 (max (difference (sizes Group Adjacent of:(value)) (sizes Group Adjacent of:(player))))) (max 0 (max (difference (sizes Group Adjacent of:(player)) (sizes Group Adjacent of:(value)))))))))) next:(forget Value "Scores" All (then (forget Value "Tied" All)))))) (forEach Player (set Score Player (count Sites in:(sites Occupied by:Player)))))))) (end (if (all Passed) (byScore))))) 
