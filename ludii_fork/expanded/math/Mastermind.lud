At the beginning of the game, the first player places 4 pieces of any colour in the bottom row. These pieces will be hidden to the second player during all the game. The objective of the second player (called codebreaker) is to try to guess the pattern, in both order and color, within a specific number of tries (corresponding to the number of rows). Each guess is made by placing a row of code pegs on the board. Once placed, a feedback on his last try is provided by placing from zero to four key pegs in the small holes of the row with the guess. A black key peg is placed for each code peg from the guess which is correct in both color and position. A white key peg indicates the existence of a correct color code peg placed in the wrong position. The game is played on a 12x12 board.
(game "Mastermind" (players 2) (equipment {(board (merge {(rectangle (add 1 12) 4) (shift 4 0.75 (repeat 12 1 step:{{1 0} {0 1}} (poly {{0 0} {0 0.5} {0.5 0.5} {0.5 0}})))}) use:Vertex) (piece "Marker1" Shared) (piece "Marker2" Shared) (piece "Marker3" Shared) (piece "Marker4" Shared) (piece "Marker5" Shared) (piece "Marker6" Shared) (piece "Marker7" Shared) (piece "Marker8" Shared) (piece "Disc1" Shared) (piece "Disc2" Shared) (hand Shared size:8)}) (rules (start {(place "Marker1" (handSite Shared)) (place "Marker2" (handSite Shared 1)) (place "Marker3" (handSite Shared 2)) (place "Marker4" (handSite Shared 3)) (place "Marker5" (handSite Shared 4)) (place "Marker6" (handSite Shared 5)) (place "Marker7" (handSite Shared 6)) (place "Marker8" (handSite Shared 7))}) phases:{(phase "Placement" P1 (play (move (from (sites Hand Shared)) (to (intersection (sites Empty) (sites Bottom))) copy:True (then (and {(set Hidden at:(last To) to:P2) (if (equals 0 (count Sites in:(intersection (sites Empty) (sites Bottom)))) (set Var 0) (moveAgain))}))))) (phase "Finding" P2 (play (move (from (sites Hand Shared)) (to (intersection (sites Empty) (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var)))))) copy:True (then (and (moveAgain) (if (equals 0 (count Sites in:(intersection (sites Empty) (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var))))))) (and (forEach Value min:0 max:(sub 4 1) (if (equals (what at:(regionSite (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var)))) index:(value))) (what at:(coord row:0 column:(value)))) (add (piece "Disc2") (to (regionSite (union (sites Row (add (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var))) 1)) (sites Row (sub (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var))) 1))) index:(value)))) (if (is In (what at:(regionSite (sites Bottom) index:(value))) (results from:(sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var)))) to:0 (what at:(from)))) (add (piece "Disc1") (to (regionSite (union (sites Row (add (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var))) 1)) (sites Row (sub (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (var))) 1))) index:(value))))))) (set Var (add 1 (var))) (then (if (or (and (equals 0 (count Sites in:(intersection (sites Empty) (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (sub (var) 1))))))) (equals 4 (count Sites in:(forEach (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (sub (var) 1)))) if:(equals (what at:(site)) (what at:(coord row:0 column:(column of:(site))))))))) (ge (var) 12)) (forEach Site (sites Bottom) (set Hidden at:(site) False to:P2)))))))))) (end {(if (and (equals 0 (count Sites in:(intersection (sites Empty) (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (sub (var) 1))))))) (equals 4 (count Sites in:(forEach (sites Row (sub (add 2 (mul 3 (sub 12 1))) (mul 3 (sub (var) 1)))) if:(equals (what at:(site)) (what at:(coord row:0 column:(column of:(site))))))))) (result P2 Win)) (if (ge (var) 12) (result P1 Win))}))})) 
