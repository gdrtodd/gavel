Chase is played on a two-dimensional rectangular grid. The objective of the game is to escape from a number of robots, which have been programmed to kill the player. The game is turn-based. The player character and the robots start at randomly selected locations. Every time the player character moves a square in any direction (horizontally, vertically, or diagonally), each robot moves one square closer to their new location, in whichever direction is the shortest path. If the player character collides with a robot, they die and the game ends. The player attempts to survive by causing the robots to kill themselves by colliding with other objects on the map. When two robots collide each other a pile of rubble is created. The player can also teleport into a randomly selected location. Teleportation counts as a move, and the robots will respond by moving towards the new location. Because the location is randomly selected, it is possible that the player teleports right into the path of a robot. A safe teleport is also possible for the player but can be used only a limited number of times. The game is won when all of the robots are destroyed. In Ludii, the number of safe teleportations available is the score of the player. In clicking on the player a safe teleportation will be applied. To make a non safe teleportation, the button Pass has to be pressed. The board has 10 rows. The board has 20 columns. The player has 5 safe teleportations. 20 robots.
(game "Chase" (players 1) (equipment {(board (rectangle 10 20)) (piece "Human" P1 (move Step (to if:(is Empty (to))) (then (forEach Site (sites Occupied by:Shared) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NE) (where (id "Human")))) (if (equals (what at:(ahead (site) NE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NW) (where (id "Human")))) (if (equals (what at:(ahead (site) NW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SW) (where (id "Human")))) (if (equals (what at:(ahead (site) SW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SE) (where (id "Human")))) (if (equals (what at:(ahead (site) SE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) E) (where (id "Human")))) (if (equals (what at:(ahead (site) E)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) E) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) W) (where (id "Human")))) (if (equals (what at:(ahead (site) W)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) W) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) N) (where (id "Human")))) (if (equals (what at:(ahead (site) N)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) N) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) S) (where (id "Human")))) (if (equals (what at:(ahead (site) S)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) S) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))))))))))))))) (piece "Robot" Shared) (piece "Rubble" Neutral)}) (rules (start {(place Random {"Human"}) (place Random {"Robot"} count:20) (set Score P1 5)}) (play (or {(forEach Piece) (move Pass (then (fromTo (from (where (id "Human"))) (to (sites Random)) (then (forEach Site (sites Occupied by:Shared) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NE) (where (id "Human")))) (if (equals (what at:(ahead (site) NE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NW) (where (id "Human")))) (if (equals (what at:(ahead (site) NW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SW) (where (id "Human")))) (if (equals (what at:(ahead (site) SW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SE) (where (id "Human")))) (if (equals (what at:(ahead (site) SE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) E) (where (id "Human")))) (if (equals (what at:(ahead (site) E)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) E) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) W) (where (id "Human")))) (if (equals (what at:(ahead (site) W)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) W) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) N) (where (id "Human")))) (if (equals (what at:(ahead (site) N)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) N) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) S) (where (id "Human")))) (if (equals (what at:(ahead (site) S)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) S) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to)))))))))))))))))))) (if (lt 0 (score P1)) (move Select (from (where (id "Human"))) (then (and (set Score Mover (sub (score P1) 1)) (fromTo (from (where (id "Human"))) (to (sites Random (difference (sites Empty) (sites Around (sites Occupied by:Shared))))) (then (forEach Site (sites Occupied by:Shared) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NE) (where (id "Human")))) (if (equals (what at:(ahead (site) NE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) NW) (where (id "Human")))) (if (equals (what at:(ahead (site) NW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) NW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SW) (where (id "Human")))) (if (equals (what at:(ahead (site) SW)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SW) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) SE) (where (id "Human")))) (if (equals (what at:(ahead (site) SE)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) SE) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) E) (where (id "Human")))) (if (equals (what at:(ahead (site) E)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) E) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) W) (where (id "Human")))) (if (equals (what at:(ahead (site) W)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) W) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) N) (where (id "Human")))) (if (equals (what at:(ahead (site) N)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) N) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))) (if (gt (count Steps Orthogonal (site) (where (id "Human"))) (count Steps Orthogonal (ahead (site) S) (where (id "Human")))) (if (equals (what at:(ahead (site) S)) (id "Rubble" Neutral)) (remove (site)) (fromTo (from (site)) (to (ahead (site) S) (apply (if (equals (what at:(to)) (id "Human" P1)) (remove (to))))))))))))))))))))))} (then (forEach Site (sites Occupied by:Shared) (if (ge (count at:(site)) 2) (and (remove (site)) (add (piece "Rubble0") (to (site))))))))) (end {(if (no Pieces Mover) (result Mover Loss)) (if (no Pieces "Robot") (result Mover Win))}))) 
