The game Guettal is played by two players on a 5x5 rectangle board with square tiling. All players play with Counters. Rules for Pieces: Counters hop adjacent then if the to location of the last move is in , a piece of the moving player the to location of the last move, this piece can promote into DoubleCounter and set the value of Player the moving player to 0 or step adjacent then set the value of Player the moving player to 1 if the to location of the last move is in , a piece of the moving player the to location of the last move, this piece can promote into DoubleCounter. Players take turns moving. Setup: Place a Counter for player one at the union of the bottom sites of the board expanded by 1 steps and the vertexes with coordinates [D3, E3]. Place a Counter for player two at the union of the vertexes with coordinates [A3, B3] and the top sites of the board expanded by 1 steps.. Rules: If not in the same turn and the value of Player Prev is equal to 1, if the from location of the last move is in the pending sites and the from location of the last move is in the set of empty vertexs, select Vertex in the to location of the last move if vertex the location of the piece is occupied then remove pieces at the to location of the last move and move again and set the value of Player Prev to 0 or select Vertex in the pending sites if vertex the location of the piece is occupied then remove pieces at the to location of the last move and move again and set the value of Player Prev to 0 or if in the same turn, if the to location of the last move is equal to the from location of the last move, set the region the from sites of move one of your pieces to pending and afterwards move one of your pieces, else hop adjacent then set the value of Player the moving player to 0, else set the region the from sites of move one of your pieces to pending and afterwards move one of your pieces. Aim: If player one cannot move and player two cannot move. The Guettal (Ludii 1) ruleset.
(game "Guettal" (players {(player N) (player S)}) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Counter" Each (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0)))) (move Step (to if:(is Empty (to))) (then (set Value Mover 1))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Counter2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (or (if (and (not (is Prev Mover)) (equals (value Player Prev) 1)) (or (if (and (is In (last From) (sites Pending)) (is In (last From) (sites Empty))) (move Select (from (last To) if:(is Occupied (from))) (then (and {(remove (last To)) (moveAgain) (set Value Prev 0)})))) (move Select (from (sites Pending) if:(is Occupied (from))) (then (and {(remove (last To)) (moveAgain) (set Value Prev 0)}))))) (if (is Prev Mover) (if (equals (last To) (last From)) (do (set Pending (sites From (forEach Piece "Counter" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)) (set Value Mover 0))))))) next:(forEach Piece "Counter" (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)) (set Value Mover 0)))) (move Step (to if:(is Empty (to))) (then (set Value Mover 1)))))) (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (set Value Mover 0)))) (do (set Pending (sites From (forEach Piece "Counter" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)) (set Value Mover 0))))))) next:(forEach Piece "Counter" (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (and (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)) (set Value Mover 0)))) (move Step (to if:(is Empty (to))) (then (set Value Mover 1))))))))) (end (if (and (no Moves P1) (no Moves P2)) {(if (lt (count Pieces P1) (count Pieces P2)) (result P2 Win)) (if (lt (count Pieces P2) (count Pieces P1)) (result P1 Win)) (if (equals (count Pieces P2) (count Pieces P1)) (result Mover Draw))})))) 
